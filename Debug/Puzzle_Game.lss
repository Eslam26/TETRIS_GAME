
Puzzle_Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003ae  00800060  00003f1c  00003fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080040e  0080040e  0000435e  2**0
                  ALLOC
  3 .stab         0000369c  00000000  00000000  00004360  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015fe  00000000  00000000  000079fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000091ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000093ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000ceae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000e1bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000e39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e6a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_1>
       8:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__vector_2>
       c:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 31       	cpi	r26, 0x1A	; 26
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1a 09 	call	0x1234	; 0x1234 <main>
      8a:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ed       	ldi	r26, 0xD9	; 217
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 55 1f 	jmp	0x3eaa	; 0x3eaa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ed       	ldi	r24, 0xD9	; 217
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ed       	ldi	r22, 0xD9	; 217
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 79 1f 	jmp	0x3ef2	; 0x3ef2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 79 1f 	jmp	0x3ef2	; 0x3ef2 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ef 51       	subi	r30, 0x1F	; 31
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <__vector_1>:
static volatile void (*	g_INT1_callBackPtr)(void) = NULL_PTR;
static volatile void (*	g_INT2_callBackPtr)(void) = NULL_PTR;

/*----------------------------------ISR DEFINITIONS---------------------------------------------------*/
ISR(INT0_vect)
{
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	2f 93       	push	r18
     ef6:	3f 93       	push	r19
     ef8:	4f 93       	push	r20
     efa:	5f 93       	push	r21
     efc:	6f 93       	push	r22
     efe:	7f 93       	push	r23
     f00:	8f 93       	push	r24
     f02:	9f 93       	push	r25
     f04:	af 93       	push	r26
     f06:	bf 93       	push	r27
     f08:	ef 93       	push	r30
     f0a:	ff 93       	push	r31
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	if (g_INT0_callBackPtr != NULL_PTR) {
     f14:	80 91 0e 04 	lds	r24, 0x040E
     f18:	90 91 0f 04 	lds	r25, 0x040F
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	29 f0       	breq	.+10     	; 0xf2a <__vector_1+0x40>
			(*g_INT0_callBackPtr)();
     f20:	e0 91 0e 04 	lds	r30, 0x040E
     f24:	f0 91 0f 04 	lds	r31, 0x040F
     f28:	09 95       	icall
}
}
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	ff 91       	pop	r31
     f30:	ef 91       	pop	r30
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	1f 90       	pop	r1
     f4e:	18 95       	reti

00000f50 <__vector_2>:

ISR(INT1_vect)
{
     f50:	1f 92       	push	r1
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	0f 92       	push	r0
     f58:	11 24       	eor	r1, r1
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	4f 93       	push	r20
     f60:	5f 93       	push	r21
     f62:	6f 93       	push	r22
     f64:	7f 93       	push	r23
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	if (g_INT1_callBackPtr != NULL_PTR) {
     f7a:	80 91 10 04 	lds	r24, 0x0410
     f7e:	90 91 11 04 	lds	r25, 0x0411
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	29 f0       	breq	.+10     	; 0xf90 <__vector_2+0x40>
			(*g_INT1_callBackPtr)();
     f86:	e0 91 10 04 	lds	r30, 0x0410
     f8a:	f0 91 11 04 	lds	r31, 0x0411
     f8e:	09 95       	icall
}

}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_3>:

ISR(INT2_vect)
{
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	4f 93       	push	r20
     fc6:	5f 93       	push	r21
     fc8:	6f 93       	push	r22
     fca:	7f 93       	push	r23
     fcc:	8f 93       	push	r24
     fce:	9f 93       	push	r25
     fd0:	af 93       	push	r26
     fd2:	bf 93       	push	r27
     fd4:	ef 93       	push	r30
     fd6:	ff 93       	push	r31
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	if (g_INT2_callBackPtr != NULL_PTR) {
     fe0:	80 91 12 04 	lds	r24, 0x0412
     fe4:	90 91 13 04 	lds	r25, 0x0413
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	29 f0       	breq	.+10     	; 0xff6 <__vector_3+0x40>
			(*g_INT2_callBackPtr)();
     fec:	e0 91 12 04 	lds	r30, 0x0412
     ff0:	f0 91 13 04 	lds	r31, 0x0413
     ff4:	09 95       	icall
}

}
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	ff 91       	pop	r31
     ffc:	ef 91       	pop	r30
     ffe:	bf 91       	pop	r27
    1000:	af 91       	pop	r26
    1002:	9f 91       	pop	r25
    1004:	8f 91       	pop	r24
    1006:	7f 91       	pop	r23
    1008:	6f 91       	pop	r22
    100a:	5f 91       	pop	r21
    100c:	4f 91       	pop	r20
    100e:	3f 91       	pop	r19
    1010:	2f 91       	pop	r18
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <ExternalInterrupts_init>:
 [Function Name]:  ExternalInterrupts_init
 [Description]  :  This function is responsible for initialize external interrupts
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void ExternalInterrupts_init(
		E_Interrupts_configType * E_Interrupts_configType_Ptr) {
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <ExternalInterrupts_init+0x6>
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
	if (E_Interrupts_configType_Ptr->INT0_configType == OFF_INT0) {
    102a:	e9 81       	ldd	r30, Y+1	; 0x01
    102c:	fa 81       	ldd	r31, Y+2	; 0x02
    102e:	80 81       	ld	r24, Z
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	41 f4       	brne	.+16     	; 0x1044 <ExternalInterrupts_init+0x28>
		GICR &= ~(1<<INT0);
    1034:	ab e5       	ldi	r26, 0x5B	; 91
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e5       	ldi	r30, 0x5B	; 91
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8f 7b       	andi	r24, 0xBF	; 191
    1040:	8c 93       	st	X, r24
    1042:	22 c0       	rjmp	.+68     	; 0x1088 <ExternalInterrupts_init+0x6c>
	} else {
		DDRD &=~(1<<PD2);
    1044:	a1 e3       	ldi	r26, 0x31	; 49
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e1 e3       	ldi	r30, 0x31	; 49
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8b 7f       	andi	r24, 0xFB	; 251
    1050:	8c 93       	st	X, r24
		PORTD |= (1<<PD2);
    1052:	a2 e3       	ldi	r26, 0x32	; 50
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e2 e3       	ldi	r30, 0x32	; 50
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	84 60       	ori	r24, 0x04	; 4
    105e:	8c 93       	st	X, r24
		GICR |= (1<<INT0);
    1060:	ab e5       	ldi	r26, 0x5B	; 91
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	eb e5       	ldi	r30, 0x5B	; 91
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	80 64       	ori	r24, 0x40	; 64
    106c:	8c 93       	st	X, r24
		MCUCR = (MCUCR & 0b11111100) | ((E_Interrupts_configType_Ptr->INT0_configType & 0b00000011)<<(ISC00));
    106e:	a5 e5       	ldi	r26, 0x55	; 85
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e5       	ldi	r30, 0x55	; 85
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	98 2f       	mov	r25, r24
    107a:	9c 7f       	andi	r25, 0xFC	; 252
    107c:	e9 81       	ldd	r30, Y+1	; 0x01
    107e:	fa 81       	ldd	r31, Y+2	; 0x02
    1080:	80 81       	ld	r24, Z
    1082:	83 70       	andi	r24, 0x03	; 3
    1084:	89 2b       	or	r24, r25
    1086:	8c 93       	st	X, r24

	}
	if (E_Interrupts_configType_Ptr->INT1_configType == OFF_INT1) {
    1088:	e9 81       	ldd	r30, Y+1	; 0x01
    108a:	fa 81       	ldd	r31, Y+2	; 0x02
    108c:	81 81       	ldd	r24, Z+1	; 0x01
    108e:	84 30       	cpi	r24, 0x04	; 4
    1090:	41 f4       	brne	.+16     	; 0x10a2 <ExternalInterrupts_init+0x86>
		GICR &= ~(1<<INT1);
    1092:	ab e5       	ldi	r26, 0x5B	; 91
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	eb e5       	ldi	r30, 0x5B	; 91
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 77       	andi	r24, 0x7F	; 127
    109e:	8c 93       	st	X, r24
    10a0:	29 c0       	rjmp	.+82     	; 0x10f4 <ExternalInterrupts_init+0xd8>

	} else {
		DDRD &=~(1<<PD3);
    10a2:	a1 e3       	ldi	r26, 0x31	; 49
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e1 e3       	ldi	r30, 0x31	; 49
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	87 7f       	andi	r24, 0xF7	; 247
    10ae:	8c 93       	st	X, r24
		PORTD |= (1<<PD3);
    10b0:	a2 e3       	ldi	r26, 0x32	; 50
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e2 e3       	ldi	r30, 0x32	; 50
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	88 60       	ori	r24, 0x08	; 8
    10bc:	8c 93       	st	X, r24
		GICR |= (1<<INT1);
    10be:	ab e5       	ldi	r26, 0x5B	; 91
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	eb e5       	ldi	r30, 0x5B	; 91
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	80 68       	ori	r24, 0x80	; 128
    10ca:	8c 93       	st	X, r24
		MCUCR = (MCUCR & 0b11111100) | ((E_Interrupts_configType_Ptr->INT1_configType & 0b00000011)<<(ISC10));
    10cc:	a5 e5       	ldi	r26, 0x55	; 85
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e5       	ldi	r30, 0x55	; 85
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	28 2f       	mov	r18, r24
    10d8:	2c 7f       	andi	r18, 0xFC	; 252
    10da:	e9 81       	ldd	r30, Y+1	; 0x01
    10dc:	fa 81       	ldd	r31, Y+2	; 0x02
    10de:	81 81       	ldd	r24, Z+1	; 0x01
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	83 70       	andi	r24, 0x03	; 3
    10e6:	90 70       	andi	r25, 0x00	; 0
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	82 2b       	or	r24, r18
    10f2:	8c 93       	st	X, r24

	}

	if (E_Interrupts_configType_Ptr->INT2_configType == OFF_INT2) {
    10f4:	e9 81       	ldd	r30, Y+1	; 0x01
    10f6:	fa 81       	ldd	r31, Y+2	; 0x02
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	41 f4       	brne	.+16     	; 0x110e <ExternalInterrupts_init+0xf2>
		GICR &= ~(1<<INT2);
    10fe:	ab e5       	ldi	r26, 0x5B	; 91
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e5       	ldi	r30, 0x5B	; 91
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7d       	andi	r24, 0xDF	; 223
    110a:	8c 93       	st	X, r24
    110c:	3c c0       	rjmp	.+120    	; 0x1186 <ExternalInterrupts_init+0x16a>
	} else {
		SREG   &= ~(1<<7);
    110e:	af e5       	ldi	r26, 0x5F	; 95
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ef e5       	ldi	r30, 0x5F	; 95
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 77       	andi	r24, 0x7F	; 127
    111a:	8c 93       	st	X, r24
		DDRB   &= (~(1<<PB2));
    111c:	a7 e3       	ldi	r26, 0x37	; 55
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e7 e3       	ldi	r30, 0x37	; 55
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8b 7f       	andi	r24, 0xFB	; 251
    1128:	8c 93       	st	X, r24
		PORTB  |= (1<<PB2);
    112a:	a8 e3       	ldi	r26, 0x38	; 56
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	84 60       	ori	r24, 0x04	; 4
    1136:	8c 93       	st	X, r24
		GICR   |= (1<<INT2);
    1138:	ab e5       	ldi	r26, 0x5B	; 91
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e5       	ldi	r30, 0x5B	; 91
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 62       	ori	r24, 0x20	; 32
    1144:	8c 93       	st	X, r24
		MCUCSR = (MCUCSR & 0b10111111) | ((E_Interrupts_configType_Ptr->INT2_configType & 0b00000001)<<(ISC2));
    1146:	a4 e5       	ldi	r26, 0x54	; 84
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e4 e5       	ldi	r30, 0x54	; 84
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	2f 7b       	andi	r18, 0xBF	; 191
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	00 24       	eor	r0, r0
    1164:	96 95       	lsr	r25
    1166:	87 95       	ror	r24
    1168:	07 94       	ror	r0
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	07 94       	ror	r0
    1170:	98 2f       	mov	r25, r24
    1172:	80 2d       	mov	r24, r0
    1174:	82 2b       	or	r24, r18
    1176:	8c 93       	st	X, r24
		SREG   |= (1<<7);
    1178:	af e5       	ldi	r26, 0x5F	; 95
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ef e5       	ldi	r30, 0x5F	; 95
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 68       	ori	r24, 0x80	; 128
    1184:	8c 93       	st	X, r24
	}

}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <ExternalInterrupts_Deinit>:
 [Function Name]:  ExternalInterrupts_Deinit
 [Description]  :  This function is responsible for deinitilization of external interrupts
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void ExternalInterrupts_Deinit()
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	GICR &= ~(1<<INT0);
    1198:	ab e5       	ldi	r26, 0x5B	; 91
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	eb e5       	ldi	r30, 0x5B	; 91
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8f 7b       	andi	r24, 0xBF	; 191
    11a4:	8c 93       	st	X, r24
	GICR &= ~(1<<INT1);
    11a6:	ab e5       	ldi	r26, 0x5B	; 91
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	eb e5       	ldi	r30, 0x5B	; 91
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 77       	andi	r24, 0x7F	; 127
    11b2:	8c 93       	st	X, r24
	GICR &= ~(1<<INT2);
    11b4:	ab e5       	ldi	r26, 0x5B	; 91
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	eb e5       	ldi	r30, 0x5B	; 91
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 7d       	andi	r24, 0xDF	; 223
    11c0:	8c 93       	st	X, r24
}
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <ExternalInterrupts_INT0_setCallBack>:

void ExternalInterrupts_INT0_setCallBack(void (*INT0_setCallBack_Ptr)(void)) {
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <ExternalInterrupts_INT0_setCallBack+0x6>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	89 83       	std	Y+1, r24	; 0x01
	g_INT0_callBackPtr = INT0_setCallBack_Ptr;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	90 93 0f 04 	sts	0x040F, r25
    11de:	80 93 0e 04 	sts	0x040E, r24
}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <ExternalInterrupts_INT1_setCallBack>:

void ExternalInterrupts_INT1_setCallBack(void (*INT1_setCallBack_Ptr)(void)) {
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <ExternalInterrupts_INT1_setCallBack+0x6>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
	g_INT1_callBackPtr = INT1_setCallBack_Ptr;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	90 93 11 04 	sts	0x0411, r25
    1202:	80 93 10 04 	sts	0x0410, r24
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <ExternalInterrupts_INT2_setCallBack>:

void ExternalInterrupts_INT2_setCallBack(void (*INT2_setCallBack_Ptr)(void)) {
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <ExternalInterrupts_INT2_setCallBack+0x6>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
	g_INT2_callBackPtr = INT2_setCallBack_Ptr;
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	90 93 13 04 	sts	0x0413, r25
    1226:	80 93 12 04 	sts	0x0412, r24
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <main>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  main
 [Description]  :  This function is the main function of the program
 [Returns]      :  This function returns Zero
 ----------------------------------------------------------------------------------------------------*/
int main() {
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	ac 97       	sbiw	r28, 0x2c	; 44
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61

	/* Initialize the main local varibles */
	uint8 rowIndicator = STARTED_ROW; /* started row  */
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 columnIndicator = STARTED_COLUMN; /* started column */
    125c:	82 e2       	ldi	r24, 0x22	; 34
    125e:	89 8b       	std	Y+17, r24	; 0x11
	uint8 upperPageIndicator = STARTED_UPPER_PAGE; /* started upper page */
    1260:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 lowerPageIndicator = STARTED_LOWER_PAGE; /* started lower page */
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	8b 8b       	std	Y+19, r24	; 0x13
	uint8 nextShapeFlag = OFF; /* this variable is set to one when the shape collides with another shape */
    1266:	1c 8a       	std	Y+20, r1	; 0x14
	uint8 prevRow = rowIndicator; /* stores previous row number */
    1268:	88 89       	ldd	r24, Y+16	; 0x10
    126a:	8d 8b       	std	Y+21, r24	; 0x15
	uint8 prevColumn = columnIndicator; /* stores previous column number */
    126c:	89 89       	ldd	r24, Y+17	; 0x11
    126e:	8e 8b       	std	Y+22, r24	; 0x16
	uint8 prevUpperPage = upperPageIndicator; /* stores previous upper page number */
    1270:	8a 89       	ldd	r24, Y+18	; 0x12
    1272:	8f 8b       	std	Y+23, r24	; 0x17
	uint8 prevLowerPage = lowerPageIndicator; /* stores previous lower page number */
    1274:	8b 89       	ldd	r24, Y+19	; 0x13
    1276:	88 8f       	std	Y+24, r24	; 0x18
	uint8 upperState[SHAPE_WIDTH] = { ZERO }; /* array for storing the state of upper columns */
    1278:	88 e0       	ldi	r24, 0x08	; 8
    127a:	fe 01       	movw	r30, r28
    127c:	79 96       	adiw	r30, 0x19	; 25
    127e:	df 01       	movw	r26, r30
    1280:	28 2f       	mov	r18, r24
    1282:	1d 92       	st	X+, r1
    1284:	2a 95       	dec	r18
    1286:	e9 f7       	brne	.-6      	; 0x1282 <main+0x4e>
	uint8 lowerState[SHAPE_WIDTH] = { ZERO }; /* array for storing the state of lower columns */
    1288:	88 e0       	ldi	r24, 0x08	; 8
    128a:	fe 01       	movw	r30, r28
    128c:	b1 96       	adiw	r30, 0x21	; 33
    128e:	df 01       	movw	r26, r30
    1290:	28 2f       	mov	r18, r24
    1292:	1d 92       	st	X+, r1
    1294:	2a 95       	dec	r18
    1296:	e9 f7       	brne	.-6      	; 0x1292 <main+0x5e>
	uint8 gamePlay = ON; /* sets Game mode " ON "*/
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	8f 87       	std	Y+15, r24	; 0x0f

	Setting_Interrupts(); /* intializes and sets the interrupts parameters */
    129c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Setting_Interrupts>
	GameInit(); /* intializes the game interface */
    12a0:	0e 94 c5 0a 	call	0x158a	; 0x158a <GameInit>
    12a4:	6a c1       	rjmp	.+724    	; 0x157a <main+0x346>

	while (ONE) {
		while (gamePlay) { /* looping while gamePlay mode is ON  */

			/* displaying the current shape in specific location (specific row, specific column, specific page ) */
			DrawShape(&shape, &rowIndicator, &columnIndicator,
    12a6:	84 ee       	ldi	r24, 0xE4	; 228
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	9e 01       	movw	r18, r28
    12ac:	20 5f       	subi	r18, 0xF0	; 240
    12ae:	3f 4f       	sbci	r19, 0xFF	; 255
    12b0:	ae 01       	movw	r20, r28
    12b2:	4f 5e       	subi	r20, 0xEF	; 239
    12b4:	5f 4f       	sbci	r21, 0xFF	; 255
    12b6:	fe 01       	movw	r30, r28
    12b8:	73 96       	adiw	r30, 0x13	; 19
    12ba:	de 01       	movw	r26, r28
    12bc:	52 96       	adiw	r26, 0x12	; 18
    12be:	0f 2e       	mov	r0, r31
    12c0:	f4 e1       	ldi	r31, 0x14	; 20
    12c2:	ef 2e       	mov	r14, r31
    12c4:	ff 24       	eor	r15, r15
    12c6:	f0 2d       	mov	r31, r0
    12c8:	ec 0e       	add	r14, r28
    12ca:	fd 1e       	adc	r15, r29
    12cc:	0f 2e       	mov	r0, r31
    12ce:	f1 e2       	ldi	r31, 0x21	; 33
    12d0:	cf 2e       	mov	r12, r31
    12d2:	dd 24       	eor	r13, r13
    12d4:	f0 2d       	mov	r31, r0
    12d6:	cc 0e       	add	r12, r28
    12d8:	dd 1e       	adc	r13, r29
    12da:	0f 2e       	mov	r0, r31
    12dc:	f9 e1       	ldi	r31, 0x19	; 25
    12de:	af 2e       	mov	r10, r31
    12e0:	bb 24       	eor	r11, r11
    12e2:	f0 2d       	mov	r31, r0
    12e4:	ac 0e       	add	r10, r28
    12e6:	bd 1e       	adc	r11, r29
    12e8:	b9 01       	movw	r22, r18
    12ea:	9f 01       	movw	r18, r30
    12ec:	8d 01       	movw	r16, r26
    12ee:	0e 94 1c 1a 	call	0x3438	; 0x3438 <DrawShape>
					&lowerPageIndicator, &upperPageIndicator, &nextShapeFlag,
					lowerState, upperState);

			/* checking on the shape collides with another shape or not */
			switch (nextShapeFlag) {
    12f2:	8c 89       	ldd	r24, Y+20	; 0x14
    12f4:	a8 2f       	mov	r26, r24
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	bc a7       	std	Y+44, r27	; 0x2c
    12fa:	ab a7       	std	Y+43, r26	; 0x2b
    12fc:	2b a5       	ldd	r18, Y+43	; 0x2b
    12fe:	3c a5       	ldd	r19, Y+44	; 0x2c
    1300:	21 15       	cp	r18, r1
    1302:	31 05       	cpc	r19, r1
    1304:	09 f4       	brne	.+2      	; 0x1308 <main+0xd4>
    1306:	4d c0       	rjmp	.+154    	; 0x13a2 <main+0x16e>
    1308:	8b a5       	ldd	r24, Y+43	; 0x2b
    130a:	9c a5       	ldd	r25, Y+44	; 0x2c
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	91 05       	cpc	r25, r1
    1310:	09 f0       	breq	.+2      	; 0x1314 <main+0xe0>
    1312:	fb c0       	rjmp	.+502    	; 0x150a <main+0x2d6>
			case ONE:
				/* current shape collides with another shape */
				/* set the nextShapeFlag variable again to Zero */
				nextShapeFlag = ZERO;
    1314:	1c 8a       	std	Y+20, r1	; 0x14
				/* displaying the last position of the shape before collision */
				DrawShape(&shape, &prevRow, &prevColumn, &prevLowerPage,
    1316:	84 ee       	ldi	r24, 0xE4	; 228
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	9e 01       	movw	r18, r28
    131c:	2b 5e       	subi	r18, 0xEB	; 235
    131e:	3f 4f       	sbci	r19, 0xFF	; 255
    1320:	ae 01       	movw	r20, r28
    1322:	4a 5e       	subi	r20, 0xEA	; 234
    1324:	5f 4f       	sbci	r21, 0xFF	; 255
    1326:	fe 01       	movw	r30, r28
    1328:	78 96       	adiw	r30, 0x18	; 24
    132a:	de 01       	movw	r26, r28
    132c:	57 96       	adiw	r26, 0x17	; 23
    132e:	0f 2e       	mov	r0, r31
    1330:	f4 e1       	ldi	r31, 0x14	; 20
    1332:	ef 2e       	mov	r14, r31
    1334:	ff 24       	eor	r15, r15
    1336:	f0 2d       	mov	r31, r0
    1338:	ec 0e       	add	r14, r28
    133a:	fd 1e       	adc	r15, r29
    133c:	0f 2e       	mov	r0, r31
    133e:	f1 e2       	ldi	r31, 0x21	; 33
    1340:	cf 2e       	mov	r12, r31
    1342:	dd 24       	eor	r13, r13
    1344:	f0 2d       	mov	r31, r0
    1346:	cc 0e       	add	r12, r28
    1348:	dd 1e       	adc	r13, r29
    134a:	0f 2e       	mov	r0, r31
    134c:	f9 e1       	ldi	r31, 0x19	; 25
    134e:	af 2e       	mov	r10, r31
    1350:	bb 24       	eor	r11, r11
    1352:	f0 2d       	mov	r31, r0
    1354:	ac 0e       	add	r10, r28
    1356:	bd 1e       	adc	r11, r29
    1358:	b9 01       	movw	r22, r18
    135a:	9f 01       	movw	r18, r30
    135c:	8d 01       	movw	r16, r26
    135e:	0e 94 1c 1a 	call	0x3438	; 0x3438 <DrawShape>
						&prevUpperPage, &nextShapeFlag, lowerState, upperState);
				/* switch to the next shape */
				completeCheck(&rowIndicator, &upperPageIndicator);
    1362:	ce 01       	movw	r24, r28
    1364:	40 96       	adiw	r24, 0x10	; 16
    1366:	9e 01       	movw	r18, r28
    1368:	2e 5e       	subi	r18, 0xEE	; 238
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <completeCheck>


		        shape = nextShape;
    1372:	80 91 18 04 	lds	r24, 0x0418
    1376:	80 93 e4 01 	sts	0x01E4, r24
		        /* displaying the next shape on the screen */
				nextShape = NextShapeView(&shape);
    137a:	84 ee       	ldi	r24, 0xE4	; 228
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <NextShapeView>
    1382:	80 93 18 04 	sts	0x0418, r24

				/* check if it is the last shape or not */
				if ((shape) == NUM_SHAPES) {
    1386:	80 91 e4 01 	lds	r24, 0x01E4
    138a:	89 30       	cpi	r24, 0x09	; 9
    138c:	11 f4       	brne	.+4      	; 0x1392 <main+0x15e>
					(shape) = ZERO; /* let the current shape is the first shape */
    138e:	10 92 e4 01 	sts	0x01E4, r1
				}

				/* setting the location of the current shape to start from the top */
				rowIndicator = STARTED_ROW;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	88 8b       	std	Y+16, r24	; 0x10
				upperPageIndicator = STARTED_UPPER_PAGE;
    1396:	1a 8a       	std	Y+18, r1	; 0x12
				lowerPageIndicator = STARTED_LOWER_PAGE;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	8b 8b       	std	Y+19, r24	; 0x13
				columnIndicator = STARTED_COLUMN;
    139c:	82 e2       	ldi	r24, 0x22	; 34
    139e:	89 8b       	std	Y+17, r24	; 0x11
    13a0:	b4 c0       	rjmp	.+360    	; 0x150a <main+0x2d6>
				/*  current shape does not collide
				 *  checks if the current location is the last location or not
				 *  if true skip the erasing shape function
				 *  if false erase the current shape
				 */
				if ((rowIndicator == 7)
    13a2:	88 89       	ldd	r24, Y+16	; 0x10
    13a4:	87 30       	cpi	r24, 0x07	; 7
    13a6:	39 f4       	brne	.+14     	; 0x13b6 <main+0x182>
    13a8:	8a 89       	ldd	r24, Y+18	; 0x12
    13aa:	87 30       	cpi	r24, 0x07	; 7
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <main+0x182>
    13ae:	8b 89       	ldd	r24, Y+19	; 0x13
    13b0:	88 30       	cpi	r24, 0x08	; 8
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <main+0x182>
    13b4:	99 c0       	rjmp	.+306    	; 0x14e8 <main+0x2b4>
						&& (upperPageIndicator == LOCATION_LAST_UPPER_PAGE)
						&& (lowerPageIndicator == LOCATION_LAST_LOWER_PAGE)) {

				} else {
					/* erasing the current shape */
					EraseShape(&shape, &rowIndicator, &columnIndicator,
    13b6:	84 ee       	ldi	r24, 0xE4	; 228
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	9e 01       	movw	r18, r28
    13bc:	20 5f       	subi	r18, 0xF0	; 240
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	ae 01       	movw	r20, r28
    13c2:	4f 5e       	subi	r20, 0xEF	; 239
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255
    13c6:	fe 01       	movw	r30, r28
    13c8:	73 96       	adiw	r30, 0x13	; 19
    13ca:	de 01       	movw	r26, r28
    13cc:	52 96       	adiw	r26, 0x12	; 18
    13ce:	0f 2e       	mov	r0, r31
    13d0:	f1 e2       	ldi	r31, 0x21	; 33
    13d2:	ef 2e       	mov	r14, r31
    13d4:	ff 24       	eor	r15, r15
    13d6:	f0 2d       	mov	r31, r0
    13d8:	ec 0e       	add	r14, r28
    13da:	fd 1e       	adc	r15, r29
    13dc:	0f 2e       	mov	r0, r31
    13de:	f9 e1       	ldi	r31, 0x19	; 25
    13e0:	cf 2e       	mov	r12, r31
    13e2:	dd 24       	eor	r13, r13
    13e4:	f0 2d       	mov	r31, r0
    13e6:	cc 0e       	add	r12, r28
    13e8:	dd 1e       	adc	r13, r29
    13ea:	b9 01       	movw	r22, r18
    13ec:	9f 01       	movw	r18, r30
    13ee:	8d 01       	movw	r16, r26
    13f0:	0e 94 b7 1c 	call	0x396e	; 0x396e <EraseShape>
							&lowerPageIndicator, &upperPageIndicator,
							lowerState, upperState);

					/* storing the location of the last shape erased */
					prevRow = rowIndicator;
    13f4:	88 89       	ldd	r24, Y+16	; 0x10
    13f6:	8d 8b       	std	Y+21, r24	; 0x15
					prevColumn = columnIndicator;
    13f8:	89 89       	ldd	r24, Y+17	; 0x11
    13fa:	8e 8b       	std	Y+22, r24	; 0x16
					prevUpperPage = upperPageIndicator;
    13fc:	8a 89       	ldd	r24, Y+18	; 0x12
    13fe:	8f 8b       	std	Y+23, r24	; 0x17
					prevLowerPage = lowerPageIndicator;
    1400:	8b 89       	ldd	r24, Y+19	; 0x13
    1402:	88 8f       	std	Y+24, r24	; 0x18
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 e2       	ldi	r26, 0x20	; 32
    140a:	b1 e4       	ldi	r27, 0x41	; 65
    140c:	8b 87       	std	Y+11, r24	; 0x0b
    140e:	9c 87       	std	Y+12, r25	; 0x0c
    1410:	ad 87       	std	Y+13, r26	; 0x0d
    1412:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a ef       	ldi	r20, 0xFA	; 250
    1422:	54 e4       	ldi	r21, 0x44	; 68
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8f 83       	std	Y+7, r24	; 0x07
    142e:	98 87       	std	Y+8, r25	; 0x08
    1430:	a9 87       	std	Y+9, r26	; 0x09
    1432:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1434:	6f 81       	ldd	r22, Y+7	; 0x07
    1436:	78 85       	ldd	r23, Y+8	; 0x08
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	2c f4       	brge	.+10     	; 0x1456 <main+0x222>
		__ticks = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <main+0x2a0>
	else if (__tmp > 65535)
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	4c f5       	brge	.+82     	; 0x14c0 <main+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1470:	7c 85       	ldd	r23, Y+12	; 0x0c
    1472:	8d 85       	ldd	r24, Y+13	; 0x0d
    1474:	9e 85       	ldd	r25, Y+14	; 0x0e
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <main+0x282>
    1498:	88 ec       	ldi	r24, 0xC8	; 200
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <main+0x270>
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	69 f7       	brne	.-38     	; 0x1498 <main+0x264>
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <main+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c0:	6f 81       	ldd	r22, Y+7	; 0x07
    14c2:	78 85       	ldd	r23, Y+8	; 0x08
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <main+0x2ac>
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(DELAY_AFTER_ERASING_TIME);

				}

				/* generates the new location of the next shape */
				GenerateLocation(&shape, &rowIndicator, &upperPageIndicator,
    14e8:	84 ee       	ldi	r24, 0xE4	; 228
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	9e 01       	movw	r18, r28
    14ee:	20 5f       	subi	r18, 0xF0	; 240
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	ae 01       	movw	r20, r28
    14f4:	4e 5e       	subi	r20, 0xEE	; 238
    14f6:	5f 4f       	sbci	r21, 0xFF	; 255
    14f8:	fe 01       	movw	r30, r28
    14fa:	73 96       	adiw	r30, 0x13	; 19
    14fc:	de 01       	movw	r26, r28
    14fe:	51 96       	adiw	r26, 0x11	; 17
    1500:	b9 01       	movw	r22, r18
    1502:	9f 01       	movw	r18, r30
    1504:	8d 01       	movw	r16, r26
    1506:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <GenerateLocation>
				break;

			}

			/* checking if the user loses or not  */
			switch (loseFlag) {
    150a:	80 91 16 04 	lds	r24, 0x0416
    150e:	a8 2f       	mov	r26, r24
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ba a7       	std	Y+42, r27	; 0x2a
    1514:	a9 a7       	std	Y+41, r26	; 0x29
    1516:	29 a5       	ldd	r18, Y+41	; 0x29
    1518:	3a a5       	ldd	r19, Y+42	; 0x2a
    151a:	21 15       	cp	r18, r1
    151c:	31 05       	cpc	r19, r1
    151e:	49 f0       	breq	.+18     	; 0x1532 <main+0x2fe>
    1520:	89 a5       	ldd	r24, Y+41	; 0x29
    1522:	9a a5       	ldd	r25, Y+42	; 0x2a
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	91 05       	cpc	r25, r1
    1528:	41 f5       	brne	.+80     	; 0x157a <main+0x346>
			/* in case of losing the game */
			case LOST:
				/* set the loseFlag againg to zero
				 * and set the gamePlay mode to "OFF"
				 */
				gamePlay = OFF;
    152a:	1f 86       	std	Y+15, r1	; 0x0f
				loseFlag = ZERO;
    152c:	10 92 16 04 	sts	0x0416, r1
    1530:	24 c0       	rjmp	.+72     	; 0x157a <main+0x346>
				break;
				/* in case of not losing the game */
			case NOT_LOST:
				/* checks if the user presses the moveLeft button or not */
				if (moveLeftFlag == ONE) {
    1532:	80 91 14 04 	lds	r24, 0x0414
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	49 f4       	brne	.+18     	; 0x154c <main+0x318>

					columnIndicator = columnIndicator - TWO;
    153a:	89 89       	ldd	r24, Y+17	; 0x11
    153c:	82 50       	subi	r24, 0x02	; 2
    153e:	89 8b       	std	Y+17, r24	; 0x11
					checkAfterMoving(&columnIndicator);
    1540:	ce 01       	movw	r24, r28
    1542:	41 96       	adiw	r24, 0x11	; 17
    1544:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <checkAfterMoving>

					moveLeftFlag = ZERO;
    1548:	10 92 14 04 	sts	0x0414, r1
				}
				/* checks if the user presses the moveRight button or not */
				if (moveRightFlag == ONE) {
    154c:	80 91 15 04 	lds	r24, 0x0415
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	49 f4       	brne	.+18     	; 0x1566 <main+0x332>

					columnIndicator = columnIndicator + TWO;
    1554:	89 89       	ldd	r24, Y+17	; 0x11
    1556:	8e 5f       	subi	r24, 0xFE	; 254
    1558:	89 8b       	std	Y+17, r24	; 0x11
					checkAfterMoving(&columnIndicator);
    155a:	ce 01       	movw	r24, r28
    155c:	41 96       	adiw	r24, 0x11	; 17
    155e:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <checkAfterMoving>

					moveRightFlag = ZERO;
    1562:	10 92 15 04 	sts	0x0415, r1
				}
				/* checks if the user presses the rotate button or not */
				if (rotateShapeFlag == ONE) {
    1566:	80 91 17 04 	lds	r24, 0x0417
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	31 f4       	brne	.+12     	; 0x157a <main+0x346>

					rotateShapeFlag = ZERO;
    156e:	10 92 17 04 	sts	0x0417, r1
					/* rotates the shape */
					RotateShape(&columnIndicator);
    1572:	ce 01       	movw	r24, r28
    1574:	41 96       	adiw	r24, 0x11	; 17
    1576:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <RotateShape>

	Setting_Interrupts(); /* intializes and sets the interrupts parameters */
	GameInit(); /* intializes the game interface */

	while (ONE) {
		while (gamePlay) { /* looping while gamePlay mode is ON  */
    157a:	8f 85       	ldd	r24, Y+15	; 0x0f
    157c:	88 23       	and	r24, r24
    157e:	09 f0       	breq	.+2      	; 0x1582 <main+0x34e>
    1580:	92 ce       	rjmp	.-732    	; 0x12a6 <main+0x72>
			}



		}
		cli();
    1582:	f8 94       	cli
		LosingFunction();
    1584:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <LosingFunction>
    1588:	f8 cf       	rjmp	.-16     	; 0x157a <main+0x346>

0000158a <GameInit>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  GameInit
 [Description]  :  This function is responsible for intializing the game
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
static void GameInit(void) {
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	2e 97       	sbiw	r28, 0x0e	; 14
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61

	GLCD_Init(); /* intialize GLCD Driver */
    159e:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <GLCD_Init>
	GLCD_clearScreen(); /* clear the GLCD Screen */
    15a2:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <GLCD_clearScreen>
	GLCD_displayString(PAGE_3, "         Welcome               Tetris Game");
    15a6:	20 e6       	ldi	r18, 0x60	; 96
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	b9 01       	movw	r22, r18
    15ae:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <GLCD_displayString>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a8 ec       	ldi	r26, 0xC8	; 200
    15b8:	b3 e4       	ldi	r27, 0x43	; 67
    15ba:	8b 87       	std	Y+11, r24	; 0x0b
    15bc:	9c 87       	std	Y+12, r25	; 0x0c
    15be:	ad 87       	std	Y+13, r26	; 0x0d
    15c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a ef       	ldi	r20, 0xFA	; 250
    15d0:	54 e4       	ldi	r21, 0x44	; 68
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	8f 83       	std	Y+7, r24	; 0x07
    15dc:	98 87       	std	Y+8, r25	; 0x08
    15de:	a9 87       	std	Y+9, r26	; 0x09
    15e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	2c f4       	brge	.+10     	; 0x1604 <GameInit+0x7a>
		__ticks = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <GameInit+0xf8>
	else if (__tmp > 65535)
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1618:	18 16       	cp	r1, r24
    161a:	4c f5       	brge	.+82     	; 0x166e <GameInit+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161c:	6b 85       	ldd	r22, Y+11	; 0x0b
    161e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1620:	8d 85       	ldd	r24, Y+13	; 0x0d
    1622:	9e 85       	ldd	r25, Y+14	; 0x0e
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e2       	ldi	r20, 0x20	; 32
    162a:	51 e4       	ldi	r21, 0x41	; 65
    162c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <GameInit+0xda>
    1646:	88 ec       	ldi	r24, 0xC8	; 200
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <GameInit+0xc8>
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	69 f7       	brne	.-38     	; 0x1646 <GameInit+0xbc>
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <GameInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <GameInit+0x104>
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	GLCD_clearScreen(); /* clear the GLCD Screen */
    1696:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <GLCD_clearScreen>

	GameIntiate(0, &shape); /* initiate the game */
    169a:	24 ee       	ldi	r18, 0xE4	; 228
    169c:	31 e0       	ldi	r19, 0x01	; 1
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	b9 01       	movw	r22, r18
    16a2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <GameIntiate>
	sei();
    16a6:	78 94       	sei
}
    16a8:	2e 96       	adiw	r28, 0x0e	; 14
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <Setting_Interrupts>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  Setting_Interrupts
 [Description]  :  This function is responsible for intializing the external interrupts
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
static void Setting_Interrupts(void) {
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62

	ExternalInterrupts_INT0_setCallBack(MoveLeftCallBackFunction); /* setting INT0 callback function */
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	9c e0       	ldi	r25, 0x0C	; 12
    16c6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <ExternalInterrupts_INT0_setCallBack>
	ExternalInterrupts_INT1_setCallBack(MoveRightCallBackFunction);/* setting INT1 callback function */
    16ca:	8c e0       	ldi	r24, 0x0C	; 12
    16cc:	9c e0       	ldi	r25, 0x0C	; 12
    16ce:	0e 94 f6 08 	call	0x11ec	; 0x11ec <ExternalInterrupts_INT1_setCallBack>
	ExternalInterrupts_INT2_setCallBack(RotateShapeCallBackFunction);
    16d2:	86 e1       	ldi	r24, 0x16	; 22
    16d4:	9c e0       	ldi	r25, 0x0C	; 12
    16d6:	0e 94 08 09 	call	0x1210	; 0x1210 <ExternalInterrupts_INT2_setCallBack>
	ExternalInterrupts_init(&interruptsConfig); /* intialize the External Interrupts Driver */
    16da:	81 ee       	ldi	r24, 0xE1	; 225
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	0e 94 0e 08 	call	0x101c	; 0x101c <ExternalInterrupts_init>
}
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <GameIntiate>:
 [Description]  :  This function is responsible for initiating the game and displaying the main borders
 of the game.
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

static void GameIntiate(uint8 gamePlay, uint8 *shape_Ptr) {
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GameIntiate+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <GameIntiate+0x8>
    16f0:	0f 92       	push	r0
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	8b 83       	std	Y+3, r24	; 0x03
    16f8:	7d 83       	std	Y+5, r23	; 0x05
    16fa:	6c 83       	std	Y+4, r22	; 0x04
	uint8 page = ZERO;
    16fc:	1a 82       	std	Y+2, r1	; 0x02
	uint8 loopCounter = ZERO;
    16fe:	19 82       	std	Y+1, r1	; 0x01

	cli();
    1700:	f8 94       	cli
	/* Setting up records place */
	GLCD_CTRL_PORT |= (ONE << CS2); /* Select Left half of display */
    1702:	a5 e3       	ldi	r26, 0x35	; 53
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e5 e3       	ldi	r30, 0x35	; 53
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	80 61       	ori	r24, 0x10	; 16
    170e:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(ONE << CS1);
    1710:	a5 e3       	ldi	r26, 0x35	; 53
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e5 e3       	ldi	r30, 0x35	; 53
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	87 7f       	andi	r24, 0xF7	; 247
    171c:	8c 93       	st	X, r24
	GLCD_displayString(PAGE_1, "              ->Shape:");
    171e:	2b e8       	ldi	r18, 0x8B	; 139
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	b9 01       	movw	r22, r18
    1726:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <GLCD_displayString>
	nextShape=NextShapeView(shape_Ptr); /* displaying the next shape */
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <NextShapeView>
    1732:	80 93 18 04 	sts	0x0418, r24

	/* generating border of the game */
	GLCD_CTRL_PORT |= (ONE << CS1); /* Select Right half of display */
    1736:	a5 e3       	ldi	r26, 0x35	; 53
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e5 e3       	ldi	r30, 0x35	; 53
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	88 60       	ori	r24, 0x08	; 8
    1742:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(ONE << CS2);
    1744:	a5 e3       	ldi	r26, 0x35	; 53
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e5 e3       	ldi	r30, 0x35	; 53
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 7e       	andi	r24, 0xEF	; 239
    1750:	8c 93       	st	X, r24
	GLCD_sendCommand(COLUMN_SETTING_ADDRESS + LEFT_BORDER); /* Set Y address (fifth column) */
    1752:	8f e4       	ldi	r24, 0x4F	; 79
    1754:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(PAGE_SETTING_ADDRESS); /* Set x address (page=0) */
    1758:	88 eb       	ldi	r24, 0xB8	; 184
    175a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	/* displaying the border of the game */
	GLCD_sendData(ALL_ROWS);
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
	for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE; loopCounter++) {
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <GameIntiate+0x8e>
		GLCD_sendData(FIRST_ROW);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
	GLCD_CTRL_PORT &= ~(ONE << CS2);
	GLCD_sendCommand(COLUMN_SETTING_ADDRESS + LEFT_BORDER); /* Set Y address (fifth column) */
	GLCD_sendCommand(PAGE_SETTING_ADDRESS); /* Set x address (page=0) */
	/* displaying the border of the game */
	GLCD_sendData(ALL_ROWS);
	for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE; loopCounter++) {
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	8f 5f       	subi	r24, 0xFF	; 255
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	89 32       	cpi	r24, 0x29	; 41
    177a:	b8 f3       	brcs	.-18     	; 0x176a <GameIntiate+0x82>
		GLCD_sendData(FIRST_ROW);
	}
	GLCD_sendData(ALL_ROWS);
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
	for (page = ONE; page < PAGE_7; page++) {
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	13 c0       	rjmp	.+38     	; 0x17ae <GameIntiate+0xc6>
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + page); /* Set page address */
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	88 54       	subi	r24, 0x48	; 72
    178c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		GLCD_sendCommand(COLUMN_SETTING_ADDRESS + LEFT_BORDER); /* Set column address */
    1790:	8f e4       	ldi	r24, 0x4F	; 79
    1792:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		GLCD_sendData(ALL_ROWS);
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
		GLCD_sendCommand(
    179c:	88 e7       	ldi	r24, 0x78	; 120
    179e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + BORDER_WIDTH); /* Set column address */
		GLCD_sendData(ALL_ROWS);
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
    17a4:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
	GLCD_sendData(ALL_ROWS);
	for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE; loopCounter++) {
		GLCD_sendData(FIRST_ROW);
	}
	GLCD_sendData(ALL_ROWS);
	for (page = ONE; page < PAGE_7; page++) {
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	8a 83       	std	Y+2, r24	; 0x02
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	87 30       	cpi	r24, 0x07	; 7
    17b2:	50 f3       	brcs	.-44     	; 0x1788 <GameIntiate+0xa0>
		GLCD_sendData(ALL_ROWS);
		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + BORDER_WIDTH); /* Set column address */
		GLCD_sendData(ALL_ROWS);
	}
	GLCD_sendCommand(PAGE_SETTING_ADDRESS + page);
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	88 54       	subi	r24, 0x48	; 72
    17b8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(COLUMN_SETTING_ADDRESS + LEFT_BORDER); /* Set column address */
    17bc:	8f e4       	ldi	r24, 0x4F	; 79
    17be:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendData(ALL_ROWS);
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
	for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE; loopCounter++) {
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <GameIntiate+0xf2>
		GLCD_sendData(LAST_ROW);
    17ce:	80 e8       	ldi	r24, 0x80	; 128
    17d0:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
		GLCD_sendData(ALL_ROWS);
	}
	GLCD_sendCommand(PAGE_SETTING_ADDRESS + page);
	GLCD_sendCommand(COLUMN_SETTING_ADDRESS + LEFT_BORDER); /* Set column address */
	GLCD_sendData(ALL_ROWS);
	for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE; loopCounter++) {
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	89 32       	cpi	r24, 0x29	; 41
    17de:	b8 f3       	brcs	.-18     	; 0x17ce <GameIntiate+0xe6>
		GLCD_sendData(LAST_ROW);
	}
	GLCD_sendData(ALL_ROWS);
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>

	GLCD_sendCommand(COLUMN_SETTING_ADDRESS); /* Set Y address (column=0) */
    17e6:	80 e4       	ldi	r24, 0x40	; 64
    17e8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(PAGE_SETTING_ADDRESS); /* Set x address (page=0) */
    17ec:	88 eb       	ldi	r24, 0xB8	; 184
    17ee:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	sei();
    17f2:	78 94       	sei
}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <MoveLeftCallBackFunction>:
 [Function Name]:  MoveLeftCallBackFunction
 [Description]  :  This function is call back function when moveLeft button is pressed
 [Returns]      :  This function returns the masked part of the state
 ----------------------------------------------------------------------------------------------------*/

static void MoveLeftCallBackFunction(void) {
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
	/* set the moveLeft flag to one */
	moveLeftFlag = ONE;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	80 93 14 04 	sts	0x0414, r24
}
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <MoveRightCallBackFunction>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  MoveRightCallBackFunction
 [Description]  :  This function is call back function when moveRight button is pressed
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
static void MoveRightCallBackFunction(void) {
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	/* set the moveRight flag to one */
	moveRightFlag = ONE;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 15 04 	sts	0x0415, r24
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <RotateShapeCallBackFunction>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  RotateShapeCallBackFunction
 [Description]  :  This function is responsible is called when INT2 is triggred
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
static void RotateShapeCallBackFunction(void) {
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	/* set the roteteShape flag to one */
	rotateShapeFlag = ONE;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	80 93 17 04 	sts	0x0417, r24
}
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <checkUpper>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  checkUpper
 [Description]  :  This function is responsible for returning the masking part of the state column
 [Returns]      :  This function returns the masked part of the state
 ----------------------------------------------------------------------------------------------------*/
uint8 checkUpper(uint8 state, uint8 rowIndicator) {
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <checkUpper+0x6>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	6a 83       	std	Y+2, r22	; 0x02
	return (uint8) (state & (HIGH_8BITS << rowIndicator));
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <checkUpper+0x20>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <checkUpper+0x1c>
    1864:	98 2f       	mov	r25, r24
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	89 23       	and	r24, r25
}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <checkLower>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  checkLower
 [Description]  :  This function is responsible for returning the masking part of the state column
 [Returns]      :  This function returns the masked part of the state
 ----------------------------------------------------------------------------------------------------*/
uint8 checkLower(uint8 state, uint8 rowIndicator) {
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	00 d0       	rcall	.+0      	; 0x187a <checkLower+0x6>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	6a 83       	std	Y+2, r22	; 0x02
	return (uint8) (state & (HIGH_8BITS >> (NUM_BITS_IN_BYTE - rowIndicator)));
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	88 e0       	ldi	r24, 0x08	; 8
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	ac 01       	movw	r20, r24
    188e:	42 1b       	sub	r20, r18
    1890:	53 0b       	sbc	r21, r19
    1892:	9a 01       	movw	r18, r20
    1894:	8f ef       	ldi	r24, 0xFF	; 255
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <checkLower+0x2c>
    189c:	95 95       	asr	r25
    189e:	87 95       	ror	r24
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <checkLower+0x28>
    18a4:	98 2f       	mov	r25, r24
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	89 23       	and	r24, r25
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <completeCheck>:
 	 	 	 	   	  this argument shall contains the address of the upperPageIndicator variable

 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void completeCheck(uint8 * rowIndicator_Ptr, uint8 * upperPageIndicator_Ptr)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	2f 97       	sbiw	r28, 0x0f	; 15
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	9d 87       	std	Y+13, r25	; 0x0d
    18ca:	8c 87       	std	Y+12, r24	; 0x0c
    18cc:	7f 87       	std	Y+15, r23	; 0x0f
    18ce:	6e 87       	std	Y+14, r22	; 0x0e
		RowCompleteTranform(*rowIndicator_Ptr, *upperPageIndicator_Ptr);
	}

#endif
#if ROW_TRANSFORM== ON
	uint8 loopCounter = ZERO;
    18d0:	1b 82       	std	Y+3, r1	; 0x03
	uint8 state = ZERO;
    18d2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 rowCounter = ZERO;
    18d4:	19 82       	std	Y+1, r1	; 0x01
	uint8 counter[NUM_BITS_IN_BYTE] = {ZERO};
    18d6:	88 e0       	ldi	r24, 0x08	; 8
    18d8:	fe 01       	movw	r30, r28
    18da:	34 96       	adiw	r30, 0x04	; 4
    18dc:	df 01       	movw	r26, r30
    18de:	48 2f       	mov	r20, r24
    18e0:	1d 92       	st	X+, r1
    18e2:	4a 95       	dec	r20
    18e4:	e9 f7       	brne	.-6      	; 0x18e0 <completeCheck+0x2c>


		/* set the page address */
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);
    18e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    18e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    18ea:	80 81       	ld	r24, Z
    18ec:	88 54       	subi	r24, 0x48	; 72
    18ee:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		/* set the column address */
		GLCD_sendCommand(
    18f2:	80 e5       	ldi	r24, 0x50	; 80
    18f4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	33 c0       	rjmp	.+102    	; 0x1964 <completeCheck+0xb0>
				loopCounter++) {

			state = GLCD_readData();
    18fe:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    1902:	8a 83       	std	Y+2, r24	; 0x02
			state = GLCD_readData();
    1904:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    1908:	8a 83       	std	Y+2, r24	; 0x02
			for (rowCounter = ZERO; rowCounter<NUM_BITS_IN_BYTE;rowCounter++)
    190a:	19 82       	std	Y+1, r1	; 0x01
    190c:	25 c0       	rjmp	.+74     	; 0x1958 <completeCheck+0xa4>
			{
				if(BIT_IS_SET(state,rowCounter))
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	d9 01       	movw	r26, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <completeCheck+0x6e>
    191e:	b5 95       	asr	r27
    1920:	a7 95       	ror	r26
    1922:	8a 95       	dec	r24
    1924:	e2 f7       	brpl	.-8      	; 0x191e <completeCheck+0x6a>
    1926:	cd 01       	movw	r24, r26
    1928:	81 70       	andi	r24, 0x01	; 1
    192a:	90 70       	andi	r25, 0x00	; 0
    192c:	88 23       	and	r24, r24
    192e:	89 f0       	breq	.+34     	; 0x1952 <completeCheck+0x9e>
				{
					counter[rowCounter]++;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	ce 01       	movw	r24, r28
    1938:	04 96       	adiw	r24, 0x04	; 4
    193a:	fc 01       	movw	r30, r24
    193c:	e2 0f       	add	r30, r18
    193e:	f3 1f       	adc	r31, r19
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	4f 5f       	subi	r20, 0xFF	; 255
    1946:	ce 01       	movw	r24, r28
    1948:	04 96       	adiw	r24, 0x04	; 4
    194a:	fc 01       	movw	r30, r24
    194c:	e2 0f       	add	r30, r18
    194e:	f3 1f       	adc	r31, r19
    1950:	40 83       	st	Z, r20
		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
				loopCounter++) {

			state = GLCD_readData();
			state = GLCD_readData();
			for (rowCounter = ZERO; rowCounter<NUM_BITS_IN_BYTE;rowCounter++)
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	8f 5f       	subi	r24, 0xFF	; 255
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	88 30       	cpi	r24, 0x08	; 8
    195c:	c0 f2       	brcs	.-80     	; 0x190e <completeCheck+0x5a>
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);
		/* set the column address */
		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
				loopCounter++) {
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	8f 5f       	subi	r24, 0xFF	; 255
    1962:	8b 83       	std	Y+3, r24	; 0x03
		/* set the page address */
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);
		/* set the column address */
		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	89 32       	cpi	r24, 0x29	; 41
    1968:	50 f2       	brcs	.-108    	; 0x18fe <completeCheck+0x4a>
				{
					counter[rowCounter]++;
				}
			}
		}
		for (rowCounter = NUM_BITS_IN_BYTE ; rowCounter > ZERO; rowCounter--)
    196a:	88 e0       	ldi	r24, 0x08	; 8
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	21 c0       	rjmp	.+66     	; 0x19b2 <completeCheck+0xfe>
		{
			if(counter[rowCounter-ONE] == (BORDER_WIDTH - ONE))
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9c 01       	movw	r18, r24
    1978:	21 50       	subi	r18, 0x01	; 1
    197a:	30 40       	sbci	r19, 0x00	; 0
    197c:	ce 01       	movw	r24, r28
    197e:	04 96       	adiw	r24, 0x04	; 4
    1980:	fc 01       	movw	r30, r24
    1982:	e2 0f       	add	r30, r18
    1984:	f3 1f       	adc	r31, r19
    1986:	80 81       	ld	r24, Z
    1988:	88 32       	cpi	r24, 0x28	; 40
    198a:	81 f4       	brne	.+32     	; 0x19ac <completeCheck+0xf8>
			{
				if(rowCounter-ONE == SEVEN && *upperPageIndicator_Ptr == SEVEN)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	29 f4       	brne	.+10     	; 0x199c <completeCheck+0xe8>
    1992:	ee 85       	ldd	r30, Y+14	; 0x0e
    1994:	ff 85       	ldd	r31, Y+15	; 0x0f
    1996:	80 81       	ld	r24, Z
    1998:	87 30       	cpi	r24, 0x07	; 7
    199a:	41 f0       	breq	.+16     	; 0x19ac <completeCheck+0xf8>
				{

				}
				else
				{
					RowCompleteTranform(rowCounter-ONE, *upperPageIndicator_Ptr);
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	81 50       	subi	r24, 0x01	; 1
    19a0:	ee 85       	ldd	r30, Y+14	; 0x0e
    19a2:	ff 85       	ldd	r31, Y+15	; 0x0f
    19a4:	90 81       	ld	r25, Z
    19a6:	69 2f       	mov	r22, r25
    19a8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <RowCompleteTranform>
				{
					counter[rowCounter]++;
				}
			}
		}
		for (rowCounter = NUM_BITS_IN_BYTE ; rowCounter > ZERO; rowCounter--)
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	81 50       	subi	r24, 0x01	; 1
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	88 23       	and	r24, r24
    19b6:	e1 f6       	brne	.-72     	; 0x1970 <completeCheck+0xbc>



#endif

}
    19b8:	2f 96       	adiw	r28, 0x0f	; 15
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <RowCompleteTranform>:
 this argument shall contains the address of the current page
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void RowCompleteTranform(uint8 rowIndicator, uint8 pageIndicator
		) {
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	c8 55       	subi	r28, 0x58	; 88
    19d8:	d0 40       	sbci	r29, 0x00	; 0
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	fe 01       	movw	r30, r28
    19e6:	e9 5a       	subi	r30, 0xA9	; 169
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 83       	st	Z, r24
    19ec:	fe 01       	movw	r30, r28
    19ee:	e8 5a       	subi	r30, 0xA8	; 168
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 83       	st	Z, r22
#if ROW_TRANSFORM == ON
	/* intialize local variables */
	uint8 loopCounter = ZERO; /* this variable is responsible for looping counter */
    19f4:	1c 82       	std	Y+4, r1	; 0x04

	/* this variable is responsible for storing the new state of the column */
	uint8 newColumn = ZERO;
    19f6:	1b 82       	std	Y+3, r1	; 0x03
	uint8 page = ZERO;
    19f8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 upperRow = ZERO;
    19fa:	19 82       	std	Y+1, r1	; 0x01
	uint8 upperPagePart[BORDER_WIDTH] = { ZERO };
    19fc:	89 e2       	ldi	r24, 0x29	; 41
    19fe:	fe 01       	movw	r30, r28
    1a00:	35 96       	adiw	r30, 0x05	; 5
    1a02:	df 01       	movw	r26, r30
    1a04:	98 2f       	mov	r25, r24
    1a06:	1d 92       	st	X+, r1
    1a08:	9a 95       	dec	r25
    1a0a:	e9 f7       	brne	.-6      	; 0x1a06 <RowCompleteTranform+0x3c>
	uint8 lowerPagePart[BORDER_WIDTH] = { ZERO };
    1a0c:	89 e2       	ldi	r24, 0x29	; 41
    1a0e:	fe 01       	movw	r30, r28
    1a10:	be 96       	adiw	r30, 0x2e	; 46
    1a12:	df 01       	movw	r26, r30
    1a14:	98 2f       	mov	r25, r24
    1a16:	1d 92       	st	X+, r1
    1a18:	9a 95       	dec	r25
    1a1a:	e9 f7       	brne	.-6      	; 0x1a16 <RowCompleteTranform+0x4c>
	cli();
    1a1c:	f8 94       	cli

	page = pageIndicator;
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e8 5a       	subi	r30, 0xA8	; 168
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	8a 83       	std	Y+2, r24	; 0x02
    1a28:	d7 c0       	rjmp	.+430    	; 0x1bd8 <RowCompleteTranform+0x20e>

	while (page >= ONE) {

		/* set the page address */
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + page);
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	88 54       	subi	r24, 0x48	; 72
    1a2e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>

		/* set the column address */
		GLCD_sendCommand(
    1a32:	80 e5       	ldi	r24, 0x50	; 80
    1a34:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);

		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	8c 83       	std	Y+4, r24	; 0x04
    1a3c:	1b c0       	rjmp	.+54     	; 0x1a74 <RowCompleteTranform+0xaa>
				loopCounter++) {

			upperPagePart[loopCounter] = GLCD_readData();
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	08 2f       	mov	r16, r24
    1a42:	10 e0       	ldi	r17, 0x00	; 0
    1a44:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    1a48:	28 2f       	mov	r18, r24
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	05 96       	adiw	r24, 0x05	; 5
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e0 0f       	add	r30, r16
    1a52:	f1 1f       	adc	r31, r17
    1a54:	20 83       	st	Z, r18
			upperPagePart[loopCounter] = GLCD_readData();
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	08 2f       	mov	r16, r24
    1a5a:	10 e0       	ldi	r17, 0x00	; 0
    1a5c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    1a60:	28 2f       	mov	r18, r24
    1a62:	ce 01       	movw	r24, r28
    1a64:	05 96       	adiw	r24, 0x05	; 5
    1a66:	fc 01       	movw	r30, r24
    1a68:	e0 0f       	add	r30, r16
    1a6a:	f1 1f       	adc	r31, r17
    1a6c:	20 83       	st	Z, r18
		/* set the column address */
		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);

		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
				loopCounter++) {
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	8f 5f       	subi	r24, 0xFF	; 255
    1a72:	8c 83       	std	Y+4, r24	; 0x04

		/* set the column address */
		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);

		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	89 32       	cpi	r24, 0x29	; 41
    1a78:	10 f3       	brcs	.-60     	; 0x1a3e <RowCompleteTranform+0x74>
			upperPagePart[loopCounter] = GLCD_readData();
			upperPagePart[loopCounter] = GLCD_readData();
		}
		/* set the column address */

		if(page+ONE == EIGHT)
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	87 30       	cpi	r24, 0x07	; 7
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <RowCompleteTranform+0xc0>
		{
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + page );
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	88 54       	subi	r24, 0x48	; 72
    1a84:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
    1a88:	04 c0       	rjmp	.+8      	; 0x1a92 <RowCompleteTranform+0xc8>
		}
		else
		{
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + page + ONE);
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	87 54       	subi	r24, 0x47	; 71
    1a8e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		}

		GLCD_sendCommand(
    1a92:	80 e5       	ldi	r24, 0x50	; 80
    1a94:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	8c 83       	std	Y+4, r24	; 0x04
    1a9c:	1b c0       	rjmp	.+54     	; 0x1ad4 <RowCompleteTranform+0x10a>
				loopCounter++) {

			lowerPagePart[loopCounter] = GLCD_readData();
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa0:	08 2f       	mov	r16, r24
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	ce 01       	movw	r24, r28
    1aac:	8e 96       	adiw	r24, 0x2e	; 46
    1aae:	fc 01       	movw	r30, r24
    1ab0:	e0 0f       	add	r30, r16
    1ab2:	f1 1f       	adc	r31, r17
    1ab4:	20 83       	st	Z, r18
			lowerPagePart[loopCounter] = GLCD_readData();
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	08 2f       	mov	r16, r24
    1aba:	10 e0       	ldi	r17, 0x00	; 0
    1abc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	8e 96       	adiw	r24, 0x2e	; 46
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	e0 0f       	add	r30, r16
    1aca:	f1 1f       	adc	r31, r17
    1acc:	20 83       	st	Z, r18
		}

		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
				loopCounter++) {
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	8f 5f       	subi	r24, 0xFF	; 255
    1ad2:	8c 83       	std	Y+4, r24	; 0x04
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + page + ONE);
		}

		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
		for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	89 32       	cpi	r24, 0x29	; 41
    1ad8:	10 f3       	brcs	.-60     	; 0x1a9e <RowCompleteTranform+0xd4>
				loopCounter++) {

			lowerPagePart[loopCounter] = GLCD_readData();
			lowerPagePart[loopCounter] = GLCD_readData();
		}
		if(page+ONE == EIGHT)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	87 30       	cpi	r24, 0x07	; 7
    1ade:	29 f4       	brne	.+10     	; 0x1aea <RowCompleteTranform+0x120>
		{
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + page );
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	88 54       	subi	r24, 0x48	; 72
    1ae4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
    1ae8:	6f c0       	rjmp	.+222    	; 0x1bc8 <RowCompleteTranform+0x1fe>
		}
		else
		{
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + page + ONE);
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	87 54       	subi	r24, 0x47	; 71
    1aee:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
			GLCD_sendCommand(
    1af2:	80 e5       	ldi	r24, 0x50	; 80
    1af4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
				COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
			/* displaying the new column state by ORing the new part with the remaining the old part*/
			for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	8c 83       	std	Y+4, r24	; 0x04
    1afc:	61 c0       	rjmp	.+194    	; 0x1bc0 <RowCompleteTranform+0x1f6>
					loopCounter++) {

				upperRow = (upperPagePart[loopCounter] & 0x80) >> LAST_ROW_IN_PAGE;
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	ce 01       	movw	r24, r28
    1b06:	05 96       	adiw	r24, 0x05	; 5
    1b08:	fc 01       	movw	r30, r24
    1b0a:	e2 0f       	add	r30, r18
    1b0c:	f3 1f       	adc	r31, r19
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 1f       	adc	r24, r24
    1b12:	88 27       	eor	r24, r24
    1b14:	88 1f       	adc	r24, r24
    1b16:	89 83       	std	Y+1, r24	; 0x01
				newColumn = ((lowerPagePart[loopCounter]
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	ce 01       	movw	r24, r28
    1b20:	8e 96       	adiw	r24, 0x2e	; 46
    1b22:	fc 01       	movw	r30, r24
    1b24:	e2 0f       	add	r30, r18
    1b26:	f3 1f       	adc	r31, r19
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e9 5a       	subi	r30, 0xA9	; 169
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 01       	movw	r18, r24
    1b3a:	2f 5f       	subi	r18, 0xFF	; 255
    1b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <RowCompleteTranform+0x17e>
    1b44:	95 95       	asr	r25
    1b46:	87 95       	ror	r24
    1b48:	2a 95       	dec	r18
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <RowCompleteTranform+0x17a>
    1b4c:	84 23       	and	r24, r20
    1b4e:	88 0f       	add	r24, r24
    1b50:	8b 83       	std	Y+3, r24	; 0x03
						& (HIGH_8BITS >> (rowIndicator + ONE))) << ONE);
				lowerPagePart[loopCounter] = (lowerPagePart[loopCounter]
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	48 2f       	mov	r20, r24
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	ce 01       	movw	r24, r28
    1b60:	8e 96       	adiw	r24, 0x2e	; 46
    1b62:	fc 01       	movw	r30, r24
    1b64:	e2 0f       	add	r30, r18
    1b66:	f3 1f       	adc	r31, r19
    1b68:	80 81       	ld	r24, Z
    1b6a:	68 2f       	mov	r22, r24
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e9 5a       	subi	r30, 0xA9	; 169
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9c 01       	movw	r18, r24
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <RowCompleteTranform+0x1be>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	2a 95       	dec	r18
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <RowCompleteTranform+0x1ba>
    1b8c:	86 23       	and	r24, r22
    1b8e:	28 2f       	mov	r18, r24
    1b90:	ce 01       	movw	r24, r28
    1b92:	8e 96       	adiw	r24, 0x2e	; 46
    1b94:	fc 01       	movw	r30, r24
    1b96:	e4 0f       	add	r30, r20
    1b98:	f5 1f       	adc	r31, r21
    1b9a:	20 83       	st	Z, r18
						& (HIGH_8BITS << (rowIndicator + ONE)));
				GLCD_sendData((newColumn | lowerPagePart[loopCounter]) | upperRow);
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	8e 96       	adiw	r24, 0x2e	; 46
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	e2 0f       	add	r30, r18
    1baa:	f3 1f       	adc	r31, r19
    1bac:	90 81       	ld	r25, Z
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	98 2b       	or	r25, r24
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	89 2b       	or	r24, r25
    1bb6:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + page + ONE);
			GLCD_sendCommand(
				COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
			/* displaying the new column state by ORing the new part with the remaining the old part*/
			for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
					loopCounter++) {
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	8f 5f       	subi	r24, 0xFF	; 255
    1bbe:	8c 83       	std	Y+4, r24	; 0x04
		{
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + page + ONE);
			GLCD_sendCommand(
				COLUMN_SETTING_ADDRESS + LEFT_BORDER + ONE);
			/* displaying the new column state by ORing the new part with the remaining the old part*/
			for (loopCounter = ONE; loopCounter <= BORDER_WIDTH - ONE;
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	89 32       	cpi	r24, 0x29	; 41
    1bc4:	08 f4       	brcc	.+2      	; 0x1bc8 <RowCompleteTranform+0x1fe>
    1bc6:	9b cf       	rjmp	.-202    	; 0x1afe <RowCompleteTranform+0x134>
				GLCD_sendData((newColumn | lowerPagePart[loopCounter]) | upperRow);

			}
		}

		page--;
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	81 50       	subi	r24, 0x01	; 1
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
		rowIndicator = LAST_ROW_IN_PAGE;
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e9 5a       	subi	r30, 0xA9	; 169
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	87 e0       	ldi	r24, 0x07	; 7
    1bd6:	80 83       	st	Z, r24
	uint8 lowerPagePart[BORDER_WIDTH] = { ZERO };
	cli();

	page = pageIndicator;

	while (page >= ONE) {
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	88 23       	and	r24, r24
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <RowCompleteTranform+0x216>
    1bde:	25 cf       	rjmp	.-438    	; 0x1a2a <RowCompleteTranform+0x60>
		page--;
	}

#endif

}
    1be0:	c8 5a       	subi	r28, 0xA8	; 168
    1be2:	df 4f       	sbci	r29, 0xFF	; 255
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	08 95       	ret

00001bf8 <LosingFunction>:
 [Function Name]:  LosingFunction
 [Description]  :  This function is responsible for generating the exit message
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void LosingFunction(void) {
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	6c 97       	sbiw	r28, 0x1c	; 28
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61

	GLCD_sendCommand(COLUMN_SETTING_ADDRESS); /* Set Y address (column=0) */
    1c0c:	80 e4       	ldi	r24, 0x40	; 64
    1c0e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(PAGE_SETTING_ADDRESS); /* Set x address (page=0) */
    1c12:	88 eb       	ldi	r24, 0xB8	; 184
    1c14:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_CTRL_PORT |= (ONE << CS1); /* Select Right half of display */
    1c18:	a5 e3       	ldi	r26, 0x35	; 53
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e5 e3       	ldi	r30, 0x35	; 53
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	88 60       	ori	r24, 0x08	; 8
    1c24:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(ONE << CS2);
    1c26:	a5 e3       	ldi	r26, 0x35	; 53
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e5 e3       	ldi	r30, 0x35	; 53
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8f 7e       	andi	r24, 0xEF	; 239
    1c32:	8c 93       	st	X, r24
	/* clear the graphical LCD screen */
	GLCD_clearScreen();
    1c34:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <GLCD_clearScreen>
	GLCD_CTRL_PORT |= (ONE << CS2); /* Select Left half of display */
    1c38:	a5 e3       	ldi	r26, 0x35	; 53
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e5 e3       	ldi	r30, 0x35	; 53
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 61       	ori	r24, 0x10	; 16
    1c44:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(ONE << CS1);
    1c46:	a5 e3       	ldi	r26, 0x35	; 53
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e5 e3       	ldi	r30, 0x35	; 53
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	87 7f       	andi	r24, 0xF7	; 247
    1c52:	8c 93       	st	X, r24
	/* Display the " Sorry, you have lost the game " sentence */
	GLCD_displayString(PAGE_2, "Sorry, you have lost  the game :')");
    1c54:	22 ea       	ldi	r18, 0xA2	; 162
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	b9 01       	movw	r22, r18
    1c5c:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <GLCD_displayString>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	aa e7       	ldi	r26, 0x7A	; 122
    1c66:	b4 e4       	ldi	r27, 0x44	; 68
    1c68:	89 8f       	std	Y+25, r24	; 0x19
    1c6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c70:	69 8d       	ldd	r22, Y+25	; 0x19
    1c72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	4a ef       	ldi	r20, 0xFA	; 250
    1c7e:	54 e4       	ldi	r21, 0x44	; 68
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	8d 8b       	std	Y+21, r24	; 0x15
    1c8a:	9e 8b       	std	Y+22, r25	; 0x16
    1c8c:	af 8b       	std	Y+23, r26	; 0x17
    1c8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c90:	6d 89       	ldd	r22, Y+21	; 0x15
    1c92:	7e 89       	ldd	r23, Y+22	; 0x16
    1c94:	8f 89       	ldd	r24, Y+23	; 0x17
    1c96:	98 8d       	ldd	r25, Y+24	; 0x18
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ca0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca4:	88 23       	and	r24, r24
    1ca6:	2c f4       	brge	.+10     	; 0x1cb2 <LosingFunction+0xba>
		__ticks = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9c 8b       	std	Y+20, r25	; 0x14
    1cae:	8b 8b       	std	Y+19, r24	; 0x13
    1cb0:	3f c0       	rjmp	.+126    	; 0x1d30 <LosingFunction+0x138>
	else if (__tmp > 65535)
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	3f ef       	ldi	r19, 0xFF	; 255
    1cbe:	4f e7       	ldi	r20, 0x7F	; 127
    1cc0:	57 e4       	ldi	r21, 0x47	; 71
    1cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc6:	18 16       	cp	r1, r24
    1cc8:	4c f5       	brge	.+82     	; 0x1d1c <LosingFunction+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cca:	69 8d       	ldd	r22, Y+25	; 0x19
    1ccc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e2       	ldi	r20, 0x20	; 32
    1cd8:	51 e4       	ldi	r21, 0x41	; 65
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9c 8b       	std	Y+20, r25	; 0x14
    1cf0:	8b 8b       	std	Y+19, r24	; 0x13
    1cf2:	0f c0       	rjmp	.+30     	; 0x1d12 <LosingFunction+0x11a>
    1cf4:	88 ec       	ldi	r24, 0xC8	; 200
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9a 8b       	std	Y+18, r25	; 0x12
    1cfa:	89 8b       	std	Y+17, r24	; 0x11
    1cfc:	89 89       	ldd	r24, Y+17	; 0x11
    1cfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <LosingFunction+0x108>
    1d04:	9a 8b       	std	Y+18, r25	; 0x12
    1d06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d08:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d12:	8b 89       	ldd	r24, Y+19	; 0x13
    1d14:	9c 89       	ldd	r25, Y+20	; 0x14
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	69 f7       	brne	.-38     	; 0x1cf4 <LosingFunction+0xfc>
    1d1a:	14 c0       	rjmp	.+40     	; 0x1d44 <LosingFunction+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d20:	8f 89       	ldd	r24, Y+23	; 0x17
    1d22:	98 8d       	ldd	r25, Y+24	; 0x18
    1d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	9c 8b       	std	Y+20, r25	; 0x14
    1d2e:	8b 8b       	std	Y+19, r24	; 0x13
    1d30:	8b 89       	ldd	r24, Y+19	; 0x13
    1d32:	9c 89       	ldd	r25, Y+20	; 0x14
    1d34:	98 8b       	std	Y+16, r25	; 0x10
    1d36:	8f 87       	std	Y+15, r24	; 0x0f
    1d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3a:	98 89       	ldd	r25, Y+16	; 0x10
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LosingFunction+0x144>
    1d40:	98 8b       	std	Y+16, r25	; 0x10
    1d42:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(ONE_SECOND);
	/* clear the graphical LCD screen */
	GLCD_clearScreen();
    1d44:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <GLCD_clearScreen>
	/* Display the "Thank you" sentence */
	GLCD_displayString(PAGE_2, "      Thank You :')");
    1d48:	25 ec       	ldi	r18, 0xC5	; 197
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	b9 01       	movw	r22, r18
    1d50:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <GLCD_displayString>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	aa e7       	ldi	r26, 0x7A	; 122
    1d5a:	b4 e4       	ldi	r27, 0x44	; 68
    1d5c:	8b 87       	std	Y+11, r24	; 0x0b
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	ad 87       	std	Y+13, r26	; 0x0d
    1d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8f 83       	std	Y+7, r24	; 0x07
    1d7e:	98 87       	std	Y+8, r25	; 0x08
    1d80:	a9 87       	std	Y+9, r26	; 0x09
    1d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LosingFunction+0x1ae>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LosingFunction+0x22c>
	else if (__tmp > 65535)
    1da6:	6f 81       	ldd	r22, Y+7	; 0x07
    1da8:	78 85       	ldd	r23, Y+8	; 0x08
    1daa:	89 85       	ldd	r24, Y+9	; 0x09
    1dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LosingFunction+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LosingFunction+0x20e>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LosingFunction+0x1fc>
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9e 83       	std	Y+6, r25	; 0x06
    1e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LosingFunction+0x1f0>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LosingFunction+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LosingFunction+0x238>
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	ff cf       	rjmp	.-2      	; 0x1e38 <LosingFunction+0x240>

00001e3a <GLCD_sendCommand>:
 [Function Name]:  GLCD_sendCommand
 [Description]  :  This function is responsible for sending command to GLCD
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GLCD_sendCommand(char Command)		/* GLCD command function */
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	e1 97       	sbiw	r28, 0x31	; 49
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	89 ab       	std	Y+49, r24	; 0x31
	GLCD_DATA_PORT = Command;		/* Copy command on data pin */
    1e50:	eb e3       	ldi	r30, 0x3B	; 59
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	89 a9       	ldd	r24, Y+49	; 0x31
    1e56:	80 83       	st	Z, r24
	GLCD_CTRL_PORT &= ~(1 << RS);	/* Make RS LOW for command register*/
    1e58:	a5 e3       	ldi	r26, 0x35	; 53
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e3       	ldi	r30, 0x35	; 53
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8e 7f       	andi	r24, 0xFE	; 254
    1e64:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(1 << RW);	/* Make RW LOW for write operation */
    1e66:	a5 e3       	ldi	r26, 0x35	; 53
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e5 e3       	ldi	r30, 0x35	; 53
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8d 7f       	andi	r24, 0xFD	; 253
    1e72:	8c 93       	st	X, r24
	GLCD_CTRL_PORT |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    1e74:	a5 e3       	ldi	r26, 0x35	; 53
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e3       	ldi	r30, 0x35	; 53
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	84 60       	ori	r24, 0x04	; 4
    1e80:	8c 93       	st	X, r24
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a0 ea       	ldi	r26, 0xA0	; 160
    1e88:	b0 e4       	ldi	r27, 0x40	; 64
    1e8a:	8d a7       	std	Y+45, r24	; 0x2d
    1e8c:	9e a7       	std	Y+46, r25	; 0x2e
    1e8e:	af a7       	std	Y+47, r26	; 0x2f
    1e90:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e92:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e94:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e98:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9a:	2b ea       	ldi	r18, 0xAB	; 171
    1e9c:	3a ea       	ldi	r19, 0xAA	; 170
    1e9e:	4a e2       	ldi	r20, 0x2A	; 42
    1ea0:	50 e4       	ldi	r21, 0x40	; 64
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	89 a7       	std	Y+41, r24	; 0x29
    1eac:	9a a7       	std	Y+42, r25	; 0x2a
    1eae:	ab a7       	std	Y+43, r26	; 0x2b
    1eb0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1eb2:	69 a5       	ldd	r22, Y+41	; 0x29
    1eb4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	1c f4       	brge	.+6      	; 0x1ed0 <GLCD_sendCommand+0x96>
		__ticks = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	88 a7       	std	Y+40, r24	; 0x28
    1ece:	91 c0       	rjmp	.+290    	; 0x1ff2 <GLCD_sendCommand+0x1b8>
	else if (__tmp > 255)
    1ed0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ed2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	53 e4       	ldi	r21, 0x43	; 67
    1ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	0c f0       	brlt	.+2      	; 0x1eea <GLCD_sendCommand+0xb0>
    1ee8:	7b c0       	rjmp	.+246    	; 0x1fe0 <GLCD_sendCommand+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    1eea:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eec:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a e7       	ldi	r20, 0x7A	; 122
    1ef8:	54 e4       	ldi	r21, 0x44	; 68
    1efa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8c a3       	std	Y+36, r24	; 0x24
    1f04:	9d a3       	std	Y+37, r25	; 0x25
    1f06:	ae a3       	std	Y+38, r26	; 0x26
    1f08:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f0c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f0e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f10:	9f a1       	ldd	r25, Y+39	; 0x27
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	4a ef       	ldi	r20, 0xFA	; 250
    1f18:	54 e4       	ldi	r21, 0x44	; 68
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	88 a3       	std	Y+32, r24	; 0x20
    1f24:	99 a3       	std	Y+33, r25	; 0x21
    1f26:	aa a3       	std	Y+34, r26	; 0x22
    1f28:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f2a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f2c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f2e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f30:	9b a1       	ldd	r25, Y+35	; 0x23
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e8       	ldi	r20, 0x80	; 128
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3e:	88 23       	and	r24, r24
    1f40:	2c f4       	brge	.+10     	; 0x1f4c <GLCD_sendCommand+0x112>
		__ticks = 1;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9f 8f       	std	Y+31, r25	; 0x1f
    1f48:	8e 8f       	std	Y+30, r24	; 0x1e
    1f4a:	3f c0       	rjmp	.+126    	; 0x1fca <GLCD_sendCommand+0x190>
	else if (__tmp > 65535)
    1f4c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f4e:	79 a1       	ldd	r23, Y+33	; 0x21
    1f50:	8a a1       	ldd	r24, Y+34	; 0x22
    1f52:	9b a1       	ldd	r25, Y+35	; 0x23
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	4c f5       	brge	.+82     	; 0x1fb6 <GLCD_sendCommand+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	6c a1       	ldd	r22, Y+36	; 0x24
    1f66:	7d a1       	ldd	r23, Y+37	; 0x25
    1f68:	8e a1       	ldd	r24, Y+38	; 0x26
    1f6a:	9f a1       	ldd	r25, Y+39	; 0x27
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e2       	ldi	r20, 0x20	; 32
    1f72:	51 e4       	ldi	r21, 0x41	; 65
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9f 8f       	std	Y+31, r25	; 0x1f
    1f8a:	8e 8f       	std	Y+30, r24	; 0x1e
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <GLCD_sendCommand+0x172>
    1f8e:	88 ec       	ldi	r24, 0xC8	; 200
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9d 8f       	std	Y+29, r25	; 0x1d
    1f94:	8c 8f       	std	Y+28, r24	; 0x1c
    1f96:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f98:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <GLCD_sendCommand+0x160>
    1f9e:	9d 8f       	std	Y+29, r25	; 0x1d
    1fa0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	9f 8f       	std	Y+31, r25	; 0x1f
    1faa:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	69 f7       	brne	.-38     	; 0x1f8e <GLCD_sendCommand+0x154>
    1fb4:	24 c0       	rjmp	.+72     	; 0x1ffe <GLCD_sendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb6:	68 a1       	ldd	r22, Y+32	; 0x20
    1fb8:	79 a1       	ldd	r23, Y+33	; 0x21
    1fba:	8a a1       	ldd	r24, Y+34	; 0x22
    1fbc:	9b a1       	ldd	r25, Y+35	; 0x23
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fc8:	8e 8f       	std	Y+30, r24	; 0x1e
    1fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fce:	9b 8f       	std	Y+27, r25	; 0x1b
    1fd0:	8a 8f       	std	Y+26, r24	; 0x1a
    1fd2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fd4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <GLCD_sendCommand+0x19c>
    1fda:	9b 8f       	std	Y+27, r25	; 0x1b
    1fdc:	8a 8f       	std	Y+26, r24	; 0x1a
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <GLCD_sendCommand+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe0:	69 a5       	ldd	r22, Y+41	; 0x29
    1fe2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fe4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	88 a7       	std	Y+40, r24	; 0x28
    1ff2:	88 a5       	ldd	r24, Y+40	; 0x28
    1ff4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ff6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ff8:	8a 95       	dec	r24
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <GLCD_sendCommand+0x1be>
    1ffc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	GLCD_CTRL_PORT &= ~(1 << EN);
    1ffe:	a5 e3       	ldi	r26, 0x35	; 53
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e5 e3       	ldi	r30, 0x35	; 53
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8b 7f       	andi	r24, 0xFB	; 251
    200a:	8c 93       	st	X, r24
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 ea       	ldi	r26, 0xA0	; 160
    2012:	b0 e4       	ldi	r27, 0x40	; 64
    2014:	8d 8b       	std	Y+21, r24	; 0x15
    2016:	9e 8b       	std	Y+22, r25	; 0x16
    2018:	af 8b       	std	Y+23, r26	; 0x17
    201a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	2b ea       	ldi	r18, 0xAB	; 171
    2026:	3a ea       	ldi	r19, 0xAA	; 170
    2028:	4a e2       	ldi	r20, 0x2A	; 42
    202a:	50 e4       	ldi	r21, 0x40	; 64
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	89 8b       	std	Y+17, r24	; 0x11
    2036:	9a 8b       	std	Y+18, r25	; 0x12
    2038:	ab 8b       	std	Y+19, r26	; 0x13
    203a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    203c:	69 89       	ldd	r22, Y+17	; 0x11
    203e:	7a 89       	ldd	r23, Y+18	; 0x12
    2040:	8b 89       	ldd	r24, Y+19	; 0x13
    2042:	9c 89       	ldd	r25, Y+20	; 0x14
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	1c f4       	brge	.+6      	; 0x205a <GLCD_sendCommand+0x220>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	88 8b       	std	Y+16, r24	; 0x10
    2058:	91 c0       	rjmp	.+290    	; 0x217c <GLCD_sendCommand+0x342>
	else if (__tmp > 255)
    205a:	69 89       	ldd	r22, Y+17	; 0x11
    205c:	7a 89       	ldd	r23, Y+18	; 0x12
    205e:	8b 89       	ldd	r24, Y+19	; 0x13
    2060:	9c 89       	ldd	r25, Y+20	; 0x14
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	53 e4       	ldi	r21, 0x43	; 67
    206a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	0c f0       	brlt	.+2      	; 0x2074 <GLCD_sendCommand+0x23a>
    2072:	7b c0       	rjmp	.+246    	; 0x216a <GLCD_sendCommand+0x330>
	{
		_delay_ms(__us / 1000.0);
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	4a e7       	ldi	r20, 0x7A	; 122
    2082:	54 e4       	ldi	r21, 0x44	; 68
    2084:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	8c 87       	std	Y+12, r24	; 0x0c
    208e:	9d 87       	std	Y+13, r25	; 0x0d
    2090:	ae 87       	std	Y+14, r26	; 0x0e
    2092:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6c 85       	ldd	r22, Y+12	; 0x0c
    2096:	7d 85       	ldd	r23, Y+13	; 0x0d
    2098:	8e 85       	ldd	r24, Y+14	; 0x0e
    209a:	9f 85       	ldd	r25, Y+15	; 0x0f
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a ef       	ldi	r20, 0xFA	; 250
    20a2:	54 e4       	ldi	r21, 0x44	; 68
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	88 87       	std	Y+8, r24	; 0x08
    20ae:	99 87       	std	Y+9, r25	; 0x09
    20b0:	aa 87       	std	Y+10, r26	; 0x0a
    20b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20b4:	68 85       	ldd	r22, Y+8	; 0x08
    20b6:	79 85       	ldd	r23, Y+9	; 0x09
    20b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <GLCD_sendCommand+0x29c>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9f 83       	std	Y+7, r25	; 0x07
    20d2:	8e 83       	std	Y+6, r24	; 0x06
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <GLCD_sendCommand+0x31a>
	else if (__tmp > 65535)
    20d6:	68 85       	ldd	r22, Y+8	; 0x08
    20d8:	79 85       	ldd	r23, Y+9	; 0x09
    20da:	8a 85       	ldd	r24, Y+10	; 0x0a
    20dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <GLCD_sendCommand+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    20f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    20f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9f 83       	std	Y+7, r25	; 0x07
    2114:	8e 83       	std	Y+6, r24	; 0x06
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <GLCD_sendCommand+0x2fc>
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9d 83       	std	Y+5, r25	; 0x05
    211e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <GLCD_sendCommand+0x2ea>
    2128:	9d 83       	std	Y+5, r25	; 0x05
    212a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	8e 81       	ldd	r24, Y+6	; 0x06
    212e:	9f 81       	ldd	r25, Y+7	; 0x07
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9f 83       	std	Y+7, r25	; 0x07
    2134:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	8e 81       	ldd	r24, Y+6	; 0x06
    2138:	9f 81       	ldd	r25, Y+7	; 0x07
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <GLCD_sendCommand+0x2de>
    213e:	24 c0       	rjmp	.+72     	; 0x2188 <GLCD_sendCommand+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	68 85       	ldd	r22, Y+8	; 0x08
    2142:	79 85       	ldd	r23, Y+9	; 0x09
    2144:	8a 85       	ldd	r24, Y+10	; 0x0a
    2146:	9b 85       	ldd	r25, Y+11	; 0x0b
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9f 83       	std	Y+7, r25	; 0x07
    2152:	8e 83       	std	Y+6, r24	; 0x06
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	9f 81       	ldd	r25, Y+7	; 0x07
    2158:	9b 83       	std	Y+3, r25	; 0x03
    215a:	8a 83       	std	Y+2, r24	; 0x02
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	9b 81       	ldd	r25, Y+3	; 0x03
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <GLCD_sendCommand+0x326>
    2164:	9b 83       	std	Y+3, r25	; 0x03
    2166:	8a 83       	std	Y+2, r24	; 0x02
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <GLCD_sendCommand+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    216a:	69 89       	ldd	r22, Y+17	; 0x11
    216c:	7a 89       	ldd	r23, Y+18	; 0x12
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	9c 89       	ldd	r25, Y+20	; 0x14
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	88 8b       	std	Y+16, r24	; 0x10
    217c:	88 89       	ldd	r24, Y+16	; 0x10
    217e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	8a 95       	dec	r24
    2184:	f1 f7       	brne	.-4      	; 0x2182 <GLCD_sendCommand+0x348>
    2186:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    2188:	e1 96       	adiw	r28, 0x31	; 49
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <GLCD_sendData>:
 [Function Name]:  GLCD_sendData
 [Description]  :  This function is responsible for sending data to GLCD
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GLCD_sendData(char Data)		/* GLCD data function */
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	e1 97       	sbiw	r28, 0x31	; 49
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	89 ab       	std	Y+49, r24	; 0x31
	GLCD_DATA_PORT = Data;		/* Copy data on data pin */
    21b0:	eb e3       	ldi	r30, 0x3B	; 59
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	89 a9       	ldd	r24, Y+49	; 0x31
    21b6:	80 83       	st	Z, r24
	GLCD_CTRL_PORT |=  (1 << RS);	/* Make RS HIGH for data register */
    21b8:	a5 e3       	ldi	r26, 0x35	; 53
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e5 e3       	ldi	r30, 0x35	; 53
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	81 60       	ori	r24, 0x01	; 1
    21c4:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(1 << RW);	/* Make RW LOW for write operation */
    21c6:	a5 e3       	ldi	r26, 0x35	; 53
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e5 e3       	ldi	r30, 0x35	; 53
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	8d 7f       	andi	r24, 0xFD	; 253
    21d2:	8c 93       	st	X, r24
	GLCD_CTRL_PORT |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    21d4:	a5 e3       	ldi	r26, 0x35	; 53
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e5 e3       	ldi	r30, 0x35	; 53
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	84 60       	ori	r24, 0x04	; 4
    21e0:	8c 93       	st	X, r24
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 ea       	ldi	r26, 0xA0	; 160
    21e8:	b0 e4       	ldi	r27, 0x40	; 64
    21ea:	8d a7       	std	Y+45, r24	; 0x2d
    21ec:	9e a7       	std	Y+46, r25	; 0x2e
    21ee:	af a7       	std	Y+47, r26	; 0x2f
    21f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    21f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    21f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f8:	98 a9       	ldd	r25, Y+48	; 0x30
    21fa:	2b ea       	ldi	r18, 0xAB	; 171
    21fc:	3a ea       	ldi	r19, 0xAA	; 170
    21fe:	4a e2       	ldi	r20, 0x2A	; 42
    2200:	50 e4       	ldi	r21, 0x40	; 64
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	89 a7       	std	Y+41, r24	; 0x29
    220c:	9a a7       	std	Y+42, r25	; 0x2a
    220e:	ab a7       	std	Y+43, r26	; 0x2b
    2210:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2212:	69 a5       	ldd	r22, Y+41	; 0x29
    2214:	7a a5       	ldd	r23, Y+42	; 0x2a
    2216:	8b a5       	ldd	r24, Y+43	; 0x2b
    2218:	9c a5       	ldd	r25, Y+44	; 0x2c
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	1c f4       	brge	.+6      	; 0x2230 <GLCD_sendData+0x96>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	88 a7       	std	Y+40, r24	; 0x28
    222e:	91 c0       	rjmp	.+290    	; 0x2352 <GLCD_sendData+0x1b8>
	else if (__tmp > 255)
    2230:	69 a5       	ldd	r22, Y+41	; 0x29
    2232:	7a a5       	ldd	r23, Y+42	; 0x2a
    2234:	8b a5       	ldd	r24, Y+43	; 0x2b
    2236:	9c a5       	ldd	r25, Y+44	; 0x2c
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4f e7       	ldi	r20, 0x7F	; 127
    223e:	53 e4       	ldi	r21, 0x43	; 67
    2240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2244:	18 16       	cp	r1, r24
    2246:	0c f0       	brlt	.+2      	; 0x224a <GLCD_sendData+0xb0>
    2248:	7b c0       	rjmp	.+246    	; 0x2340 <GLCD_sendData+0x1a6>
	{
		_delay_ms(__us / 1000.0);
    224a:	6d a5       	ldd	r22, Y+45	; 0x2d
    224c:	7e a5       	ldd	r23, Y+46	; 0x2e
    224e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2250:	98 a9       	ldd	r25, Y+48	; 0x30
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a e7       	ldi	r20, 0x7A	; 122
    2258:	54 e4       	ldi	r21, 0x44	; 68
    225a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8c a3       	std	Y+36, r24	; 0x24
    2264:	9d a3       	std	Y+37, r25	; 0x25
    2266:	ae a3       	std	Y+38, r26	; 0x26
    2268:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	6c a1       	ldd	r22, Y+36	; 0x24
    226c:	7d a1       	ldd	r23, Y+37	; 0x25
    226e:	8e a1       	ldd	r24, Y+38	; 0x26
    2270:	9f a1       	ldd	r25, Y+39	; 0x27
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	88 a3       	std	Y+32, r24	; 0x20
    2284:	99 a3       	std	Y+33, r25	; 0x21
    2286:	aa a3       	std	Y+34, r26	; 0x22
    2288:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    228a:	68 a1       	ldd	r22, Y+32	; 0x20
    228c:	79 a1       	ldd	r23, Y+33	; 0x21
    228e:	8a a1       	ldd	r24, Y+34	; 0x22
    2290:	9b a1       	ldd	r25, Y+35	; 0x23
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <GLCD_sendData+0x112>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9f 8f       	std	Y+31, r25	; 0x1f
    22a8:	8e 8f       	std	Y+30, r24	; 0x1e
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <GLCD_sendData+0x190>
	else if (__tmp > 65535)
    22ac:	68 a1       	ldd	r22, Y+32	; 0x20
    22ae:	79 a1       	ldd	r23, Y+33	; 0x21
    22b0:	8a a1       	ldd	r24, Y+34	; 0x22
    22b2:	9b a1       	ldd	r25, Y+35	; 0x23
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <GLCD_sendData+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	6c a1       	ldd	r22, Y+36	; 0x24
    22c6:	7d a1       	ldd	r23, Y+37	; 0x25
    22c8:	8e a1       	ldd	r24, Y+38	; 0x26
    22ca:	9f a1       	ldd	r25, Y+39	; 0x27
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9f 8f       	std	Y+31, r25	; 0x1f
    22ea:	8e 8f       	std	Y+30, r24	; 0x1e
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <GLCD_sendData+0x172>
    22ee:	88 ec       	ldi	r24, 0xC8	; 200
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9d 8f       	std	Y+29, r25	; 0x1d
    22f4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <GLCD_sendData+0x160>
    22fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2300:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2304:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9f 8f       	std	Y+31, r25	; 0x1f
    230a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    230e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <GLCD_sendData+0x154>
    2314:	24 c0       	rjmp	.+72     	; 0x235e <GLCD_sendData+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	68 a1       	ldd	r22, Y+32	; 0x20
    2318:	79 a1       	ldd	r23, Y+33	; 0x21
    231a:	8a a1       	ldd	r24, Y+34	; 0x22
    231c:	9b a1       	ldd	r25, Y+35	; 0x23
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9f 8f       	std	Y+31, r25	; 0x1f
    2328:	8e 8f       	std	Y+30, r24	; 0x1e
    232a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    232c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    232e:	9b 8f       	std	Y+27, r25	; 0x1b
    2330:	8a 8f       	std	Y+26, r24	; 0x1a
    2332:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2334:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <GLCD_sendData+0x19c>
    233a:	9b 8f       	std	Y+27, r25	; 0x1b
    233c:	8a 8f       	std	Y+26, r24	; 0x1a
    233e:	0f c0       	rjmp	.+30     	; 0x235e <GLCD_sendData+0x1c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2340:	69 a5       	ldd	r22, Y+41	; 0x29
    2342:	7a a5       	ldd	r23, Y+42	; 0x2a
    2344:	8b a5       	ldd	r24, Y+43	; 0x2b
    2346:	9c a5       	ldd	r25, Y+44	; 0x2c
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	88 a7       	std	Y+40, r24	; 0x28
    2352:	88 a5       	ldd	r24, Y+40	; 0x28
    2354:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2356:	89 8d       	ldd	r24, Y+25	; 0x19
    2358:	8a 95       	dec	r24
    235a:	f1 f7       	brne	.-4      	; 0x2358 <GLCD_sendData+0x1be>
    235c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	GLCD_CTRL_PORT &= ~(1 << EN);
    235e:	a5 e3       	ldi	r26, 0x35	; 53
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e5 e3       	ldi	r30, 0x35	; 53
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	8b 7f       	andi	r24, 0xFB	; 251
    236a:	8c 93       	st	X, r24
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a0 ea       	ldi	r26, 0xA0	; 160
    2372:	b0 e4       	ldi	r27, 0x40	; 64
    2374:	8d 8b       	std	Y+21, r24	; 0x15
    2376:	9e 8b       	std	Y+22, r25	; 0x16
    2378:	af 8b       	std	Y+23, r26	; 0x17
    237a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	2b ea       	ldi	r18, 0xAB	; 171
    2386:	3a ea       	ldi	r19, 0xAA	; 170
    2388:	4a e2       	ldi	r20, 0x2A	; 42
    238a:	50 e4       	ldi	r21, 0x40	; 64
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	89 8b       	std	Y+17, r24	; 0x11
    2396:	9a 8b       	std	Y+18, r25	; 0x12
    2398:	ab 8b       	std	Y+19, r26	; 0x13
    239a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    239c:	69 89       	ldd	r22, Y+17	; 0x11
    239e:	7a 89       	ldd	r23, Y+18	; 0x12
    23a0:	8b 89       	ldd	r24, Y+19	; 0x13
    23a2:	9c 89       	ldd	r25, Y+20	; 0x14
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	1c f4       	brge	.+6      	; 0x23ba <GLCD_sendData+0x220>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	88 8b       	std	Y+16, r24	; 0x10
    23b8:	91 c0       	rjmp	.+290    	; 0x24dc <GLCD_sendData+0x342>
	else if (__tmp > 255)
    23ba:	69 89       	ldd	r22, Y+17	; 0x11
    23bc:	7a 89       	ldd	r23, Y+18	; 0x12
    23be:	8b 89       	ldd	r24, Y+19	; 0x13
    23c0:	9c 89       	ldd	r25, Y+20	; 0x14
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	53 e4       	ldi	r21, 0x43	; 67
    23ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	0c f0       	brlt	.+2      	; 0x23d4 <GLCD_sendData+0x23a>
    23d2:	7b c0       	rjmp	.+246    	; 0x24ca <GLCD_sendData+0x330>
	{
		_delay_ms(__us / 1000.0);
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a e7       	ldi	r20, 0x7A	; 122
    23e2:	54 e4       	ldi	r21, 0x44	; 68
    23e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8c 87       	std	Y+12, r24	; 0x0c
    23ee:	9d 87       	std	Y+13, r25	; 0x0d
    23f0:	ae 87       	std	Y+14, r26	; 0x0e
    23f2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    23f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    23f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	4a ef       	ldi	r20, 0xFA	; 250
    2402:	54 e4       	ldi	r21, 0x44	; 68
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	88 87       	std	Y+8, r24	; 0x08
    240e:	99 87       	std	Y+9, r25	; 0x09
    2410:	aa 87       	std	Y+10, r26	; 0x0a
    2412:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2414:	68 85       	ldd	r22, Y+8	; 0x08
    2416:	79 85       	ldd	r23, Y+9	; 0x09
    2418:	8a 85       	ldd	r24, Y+10	; 0x0a
    241a:	9b 85       	ldd	r25, Y+11	; 0x0b
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e8       	ldi	r20, 0x80	; 128
    2422:	5f e3       	ldi	r21, 0x3F	; 63
    2424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2428:	88 23       	and	r24, r24
    242a:	2c f4       	brge	.+10     	; 0x2436 <GLCD_sendData+0x29c>
		__ticks = 1;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9f 83       	std	Y+7, r25	; 0x07
    2432:	8e 83       	std	Y+6, r24	; 0x06
    2434:	3f c0       	rjmp	.+126    	; 0x24b4 <GLCD_sendData+0x31a>
	else if (__tmp > 65535)
    2436:	68 85       	ldd	r22, Y+8	; 0x08
    2438:	79 85       	ldd	r23, Y+9	; 0x09
    243a:	8a 85       	ldd	r24, Y+10	; 0x0a
    243c:	9b 85       	ldd	r25, Y+11	; 0x0b
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	3f ef       	ldi	r19, 0xFF	; 255
    2442:	4f e7       	ldi	r20, 0x7F	; 127
    2444:	57 e4       	ldi	r21, 0x47	; 71
    2446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    244a:	18 16       	cp	r1, r24
    244c:	4c f5       	brge	.+82     	; 0x24a0 <GLCD_sendData+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2450:	7d 85       	ldd	r23, Y+13	; 0x0d
    2452:	8e 85       	ldd	r24, Y+14	; 0x0e
    2454:	9f 85       	ldd	r25, Y+15	; 0x0f
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e2       	ldi	r20, 0x20	; 32
    245c:	51 e4       	ldi	r21, 0x41	; 65
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9f 83       	std	Y+7, r25	; 0x07
    2474:	8e 83       	std	Y+6, r24	; 0x06
    2476:	0f c0       	rjmp	.+30     	; 0x2496 <GLCD_sendData+0x2fc>
    2478:	88 ec       	ldi	r24, 0xC8	; 200
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9d 83       	std	Y+5, r25	; 0x05
    247e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2480:	8c 81       	ldd	r24, Y+4	; 0x04
    2482:	9d 81       	ldd	r25, Y+5	; 0x05
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <GLCD_sendData+0x2ea>
    2488:	9d 83       	std	Y+5, r25	; 0x05
    248a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248c:	8e 81       	ldd	r24, Y+6	; 0x06
    248e:	9f 81       	ldd	r25, Y+7	; 0x07
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	9f 83       	std	Y+7, r25	; 0x07
    2494:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	9f 81       	ldd	r25, Y+7	; 0x07
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	69 f7       	brne	.-38     	; 0x2478 <GLCD_sendData+0x2de>
    249e:	24 c0       	rjmp	.+72     	; 0x24e8 <GLCD_sendData+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a0:	68 85       	ldd	r22, Y+8	; 0x08
    24a2:	79 85       	ldd	r23, Y+9	; 0x09
    24a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	9f 83       	std	Y+7, r25	; 0x07
    24b2:	8e 83       	std	Y+6, r24	; 0x06
    24b4:	8e 81       	ldd	r24, Y+6	; 0x06
    24b6:	9f 81       	ldd	r25, Y+7	; 0x07
    24b8:	9b 83       	std	Y+3, r25	; 0x03
    24ba:	8a 83       	std	Y+2, r24	; 0x02
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	9b 81       	ldd	r25, Y+3	; 0x03
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <GLCD_sendData+0x326>
    24c4:	9b 83       	std	Y+3, r25	; 0x03
    24c6:	8a 83       	std	Y+2, r24	; 0x02
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <GLCD_sendData+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ca:	69 89       	ldd	r22, Y+17	; 0x11
    24cc:	7a 89       	ldd	r23, Y+18	; 0x12
    24ce:	8b 89       	ldd	r24, Y+19	; 0x13
    24d0:	9c 89       	ldd	r25, Y+20	; 0x14
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	88 8b       	std	Y+16, r24	; 0x10
    24dc:	88 89       	ldd	r24, Y+16	; 0x10
    24de:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	8a 95       	dec	r24
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <GLCD_sendData+0x348>
    24e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
}
    24e8:	e1 96       	adiw	r28, 0x31	; 49
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <GLCD_readData>:
 [Function Name]:  GLCD_readData
 [Description]  :  This function is responsible for reading data from GLCD
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
uint8 GLCD_readData()		/* GLCD data function */
{
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	c7 55       	subi	r28, 0x57	; 87
    2508:	d0 40       	sbci	r29, 0x00	; 0
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61

	uint8 Data;
	GLCD_DATA_PORT_DIRECTION = 0x00;
    2514:	ea e3       	ldi	r30, 0x3A	; 58
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	10 82       	st	Z, r1
    251a:	fe 01       	movw	r30, r28
    251c:	ed 5a       	subi	r30, 0xAD	; 173
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a0 ea       	ldi	r26, 0xA0	; 160
    2526:	b0 e4       	ldi	r27, 0x40	; 64
    2528:	80 83       	st	Z, r24
    252a:	91 83       	std	Z+1, r25	; 0x01
    252c:	a2 83       	std	Z+2, r26	; 0x02
    252e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2530:	8e 01       	movw	r16, r28
    2532:	01 5b       	subi	r16, 0xB1	; 177
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	fe 01       	movw	r30, r28
    2538:	ed 5a       	subi	r30, 0xAD	; 173
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a ef       	ldi	r20, 0xFA	; 250
    254a:	54 e4       	ldi	r21, 0x44	; 68
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	f8 01       	movw	r30, r16
    2556:	80 83       	st	Z, r24
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	a2 83       	std	Z+2, r26	; 0x02
    255c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    255e:	fe 01       	movw	r30, r28
    2560:	e1 5b       	subi	r30, 0xB1	; 177
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e8       	ldi	r20, 0x80	; 128
    2572:	5f e3       	ldi	r21, 0x3F	; 63
    2574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2578:	88 23       	and	r24, r24
    257a:	44 f4       	brge	.+16     	; 0x258c <GLCD_readData+0x92>
		__ticks = 1;
    257c:	fe 01       	movw	r30, r28
    257e:	e3 5b       	subi	r30, 0xB3	; 179
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	91 83       	std	Z+1, r25	; 0x01
    2588:	80 83       	st	Z, r24
    258a:	64 c0       	rjmp	.+200    	; 0x2654 <GLCD_readData+0x15a>
	else if (__tmp > 65535)
    258c:	fe 01       	movw	r30, r28
    258e:	e1 5b       	subi	r30, 0xB1	; 177
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	57 e4       	ldi	r21, 0x47	; 71
    25a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	0c f0       	brlt	.+2      	; 0x25ac <GLCD_readData+0xb2>
    25aa:	43 c0       	rjmp	.+134    	; 0x2632 <GLCD_readData+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ac:	fe 01       	movw	r30, r28
    25ae:	ed 5a       	subi	r30, 0xAD	; 173
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e2       	ldi	r20, 0x20	; 32
    25c0:	51 e4       	ldi	r21, 0x41	; 65
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	8e 01       	movw	r16, r28
    25cc:	03 5b       	subi	r16, 0xB3	; 179
    25ce:	1f 4f       	sbci	r17, 0xFF	; 255
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	f8 01       	movw	r30, r16
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	80 83       	st	Z, r24
    25e2:	1f c0       	rjmp	.+62     	; 0x2622 <GLCD_readData+0x128>
    25e4:	fe 01       	movw	r30, r28
    25e6:	e5 5b       	subi	r30, 0xB5	; 181
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	88 ec       	ldi	r24, 0xC8	; 200
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25f2:	fe 01       	movw	r30, r28
    25f4:	e5 5b       	subi	r30, 0xB5	; 181
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	80 81       	ld	r24, Z
    25fa:	91 81       	ldd	r25, Z+1	; 0x01
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <GLCD_readData+0x102>
    2600:	fe 01       	movw	r30, r28
    2602:	e5 5b       	subi	r30, 0xB5	; 181
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	de 01       	movw	r26, r28
    260c:	a3 5b       	subi	r26, 0xB3	; 179
    260e:	bf 4f       	sbci	r27, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	e3 5b       	subi	r30, 0xB3	; 179
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	11 96       	adiw	r26, 0x01	; 1
    261e:	9c 93       	st	X, r25
    2620:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2622:	fe 01       	movw	r30, r28
    2624:	e3 5b       	subi	r30, 0xB3	; 179
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	d1 f6       	brne	.-76     	; 0x25e4 <GLCD_readData+0xea>
    2630:	27 c0       	rjmp	.+78     	; 0x2680 <GLCD_readData+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2632:	8e 01       	movw	r16, r28
    2634:	03 5b       	subi	r16, 0xB3	; 179
    2636:	1f 4f       	sbci	r17, 0xFF	; 255
    2638:	fe 01       	movw	r30, r28
    263a:	e1 5b       	subi	r30, 0xB1	; 177
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	f8 01       	movw	r30, r16
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
    2654:	de 01       	movw	r26, r28
    2656:	a7 5b       	subi	r26, 0xB7	; 183
    2658:	bf 4f       	sbci	r27, 0xFF	; 255
    265a:	fe 01       	movw	r30, r28
    265c:	e3 5b       	subi	r30, 0xB3	; 179
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	91 81       	ldd	r25, Z+1	; 0x01
    2664:	8d 93       	st	X+, r24
    2666:	9c 93       	st	X, r25
    2668:	fe 01       	movw	r30, r28
    266a:	e7 5b       	subi	r30, 0xB7	; 183
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <GLCD_readData+0x178>
    2676:	fe 01       	movw	r30, r28
    2678:	e7 5b       	subi	r30, 0xB7	; 183
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
	_delay_ms(5);
	GLCD_CTRL_PORT |=  (1 << RS);	/* Make RS HIGH for data register */
    2680:	a5 e3       	ldi	r26, 0x35	; 53
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e5 e3       	ldi	r30, 0x35	; 53
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	81 60       	ori	r24, 0x01	; 1
    268c:	8c 93       	st	X, r24
	GLCD_CTRL_PORT |= (1 << RW);	/* Make RW LOW for write operation */
    268e:	a5 e3       	ldi	r26, 0x35	; 53
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e5 e3       	ldi	r30, 0x35	; 53
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	82 60       	ori	r24, 0x02	; 2
    269a:	8c 93       	st	X, r24
	GLCD_CTRL_PORT |=  (1 << EN);	/* HIGH-LOW transition on Enable */
    269c:	a5 e3       	ldi	r26, 0x35	; 53
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e5 e3       	ldi	r30, 0x35	; 53
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	84 60       	ori	r24, 0x04	; 4
    26a8:	8c 93       	st	X, r24
    26aa:	fe 01       	movw	r30, r28
    26ac:	eb 5b       	subi	r30, 0xBB	; 187
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 ea       	ldi	r26, 0xA0	; 160
    26b6:	b0 e4       	ldi	r27, 0x40	; 64
    26b8:	80 83       	st	Z, r24
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	a2 83       	std	Z+2, r26	; 0x02
    26be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26c0:	8e 01       	movw	r16, r28
    26c2:	0f 5b       	subi	r16, 0xBF	; 191
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	fe 01       	movw	r30, r28
    26c8:	eb 5b       	subi	r30, 0xBB	; 187
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	2b ea       	ldi	r18, 0xAB	; 171
    26d6:	3a ea       	ldi	r19, 0xAA	; 170
    26d8:	4a e2       	ldi	r20, 0x2A	; 42
    26da:	50 e4       	ldi	r21, 0x40	; 64
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	f8 01       	movw	r30, r16
    26e6:	80 83       	st	Z, r24
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	a2 83       	std	Z+2, r26	; 0x02
    26ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ee:	fe 01       	movw	r30, r28
    26f0:	ef 5b       	subi	r30, 0xBF	; 191
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	34 f4       	brge	.+12     	; 0x2718 <GLCD_readData+0x21e>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	fe 01       	movw	r30, r28
    2710:	e0 5c       	subi	r30, 0xC0	; 192
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 83       	st	Z, r24
    2716:	9d c0       	rjmp	.+314    	; 0x2852 <GLCD_readData+0x358>
	else if (__tmp > 255)
    2718:	fe 01       	movw	r30, r28
    271a:	ef 5b       	subi	r30, 0xBF	; 191
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4f e7       	ldi	r20, 0x7F	; 127
    272c:	53 e4       	ldi	r21, 0x43	; 67
    272e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2732:	18 16       	cp	r1, r24
    2734:	0c f0       	brlt	.+2      	; 0x2738 <GLCD_readData+0x23e>
    2736:	7e c0       	rjmp	.+252    	; 0x2834 <GLCD_readData+0x33a>
	{
		_delay_ms(__us / 1000.0);
    2738:	fe 01       	movw	r30, r28
    273a:	eb 5b       	subi	r30, 0xBB	; 187
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a e7       	ldi	r20, 0x7A	; 122
    274c:	54 e4       	ldi	r21, 0x44	; 68
    274e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	8c af       	std	Y+60, r24	; 0x3c
    2758:	9d af       	std	Y+61, r25	; 0x3d
    275a:	ae af       	std	Y+62, r26	; 0x3e
    275c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2760:	7d ad       	ldd	r23, Y+61	; 0x3d
    2762:	8e ad       	ldd	r24, Y+62	; 0x3e
    2764:	9f ad       	ldd	r25, Y+63	; 0x3f
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4a ef       	ldi	r20, 0xFA	; 250
    276c:	54 e4       	ldi	r21, 0x44	; 68
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	88 af       	std	Y+56, r24	; 0x38
    2778:	99 af       	std	Y+57, r25	; 0x39
    277a:	aa af       	std	Y+58, r26	; 0x3a
    277c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    277e:	68 ad       	ldd	r22, Y+56	; 0x38
    2780:	79 ad       	ldd	r23, Y+57	; 0x39
    2782:	8a ad       	ldd	r24, Y+58	; 0x3a
    2784:	9b ad       	ldd	r25, Y+59	; 0x3b
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	5f e3       	ldi	r21, 0x3F	; 63
    278e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2792:	88 23       	and	r24, r24
    2794:	2c f4       	brge	.+10     	; 0x27a0 <GLCD_readData+0x2a6>
		__ticks = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9f ab       	std	Y+55, r25	; 0x37
    279c:	8e ab       	std	Y+54, r24	; 0x36
    279e:	3f c0       	rjmp	.+126    	; 0x281e <GLCD_readData+0x324>
	else if (__tmp > 65535)
    27a0:	68 ad       	ldd	r22, Y+56	; 0x38
    27a2:	79 ad       	ldd	r23, Y+57	; 0x39
    27a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    27a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	3f ef       	ldi	r19, 0xFF	; 255
    27ac:	4f e7       	ldi	r20, 0x7F	; 127
    27ae:	57 e4       	ldi	r21, 0x47	; 71
    27b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	4c f5       	brge	.+82     	; 0x280a <GLCD_readData+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    27ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    27bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    27be:	9f ad       	ldd	r25, Y+63	; 0x3f
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e2       	ldi	r20, 0x20	; 32
    27c6:	51 e4       	ldi	r21, 0x41	; 65
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9f ab       	std	Y+55, r25	; 0x37
    27de:	8e ab       	std	Y+54, r24	; 0x36
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <GLCD_readData+0x306>
    27e2:	88 ec       	ldi	r24, 0xC8	; 200
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9d ab       	std	Y+53, r25	; 0x35
    27e8:	8c ab       	std	Y+52, r24	; 0x34
    27ea:	8c a9       	ldd	r24, Y+52	; 0x34
    27ec:	9d a9       	ldd	r25, Y+53	; 0x35
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <GLCD_readData+0x2f4>
    27f2:	9d ab       	std	Y+53, r25	; 0x35
    27f4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	8e a9       	ldd	r24, Y+54	; 0x36
    27f8:	9f a9       	ldd	r25, Y+55	; 0x37
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9f ab       	std	Y+55, r25	; 0x37
    27fe:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2800:	8e a9       	ldd	r24, Y+54	; 0x36
    2802:	9f a9       	ldd	r25, Y+55	; 0x37
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	69 f7       	brne	.-38     	; 0x27e2 <GLCD_readData+0x2e8>
    2808:	2d c0       	rjmp	.+90     	; 0x2864 <GLCD_readData+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280a:	68 ad       	ldd	r22, Y+56	; 0x38
    280c:	79 ad       	ldd	r23, Y+57	; 0x39
    280e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2810:	9b ad       	ldd	r25, Y+59	; 0x3b
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9f ab       	std	Y+55, r25	; 0x37
    281c:	8e ab       	std	Y+54, r24	; 0x36
    281e:	8e a9       	ldd	r24, Y+54	; 0x36
    2820:	9f a9       	ldd	r25, Y+55	; 0x37
    2822:	9b ab       	std	Y+51, r25	; 0x33
    2824:	8a ab       	std	Y+50, r24	; 0x32
    2826:	8a a9       	ldd	r24, Y+50	; 0x32
    2828:	9b a9       	ldd	r25, Y+51	; 0x33
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <GLCD_readData+0x330>
    282e:	9b ab       	std	Y+51, r25	; 0x33
    2830:	8a ab       	std	Y+50, r24	; 0x32
    2832:	18 c0       	rjmp	.+48     	; 0x2864 <GLCD_readData+0x36a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2834:	fe 01       	movw	r30, r28
    2836:	ef 5b       	subi	r30, 0xBF	; 191
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	fe 01       	movw	r30, r28
    284c:	e0 5c       	subi	r30, 0xC0	; 192
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 83       	st	Z, r24
    2852:	fe 01       	movw	r30, r28
    2854:	e0 5c       	subi	r30, 0xC0	; 192
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    285c:	89 a9       	ldd	r24, Y+49	; 0x31
    285e:	8a 95       	dec	r24
    2860:	f1 f7       	brne	.-4      	; 0x285e <GLCD_readData+0x364>
    2862:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(5);
	Data = GLCD_DATA_PIN;
    2864:	e9 e3       	ldi	r30, 0x39	; 57
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	de 01       	movw	r26, r28
    286a:	a9 5a       	subi	r26, 0xA9	; 169
    286c:	bf 4f       	sbci	r27, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	8c 93       	st	X, r24
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	a0 ea       	ldi	r26, 0xA0	; 160
    2878:	b0 e4       	ldi	r27, 0x40	; 64
    287a:	8d a7       	std	Y+45, r24	; 0x2d
    287c:	9e a7       	std	Y+46, r25	; 0x2e
    287e:	af a7       	std	Y+47, r26	; 0x2f
    2880:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2882:	6d a5       	ldd	r22, Y+45	; 0x2d
    2884:	7e a5       	ldd	r23, Y+46	; 0x2e
    2886:	8f a5       	ldd	r24, Y+47	; 0x2f
    2888:	98 a9       	ldd	r25, Y+48	; 0x30
    288a:	2b ea       	ldi	r18, 0xAB	; 171
    288c:	3a ea       	ldi	r19, 0xAA	; 170
    288e:	4a e2       	ldi	r20, 0x2A	; 42
    2890:	50 e4       	ldi	r21, 0x40	; 64
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	89 a7       	std	Y+41, r24	; 0x29
    289c:	9a a7       	std	Y+42, r25	; 0x2a
    289e:	ab a7       	std	Y+43, r26	; 0x2b
    28a0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    28a2:	69 a5       	ldd	r22, Y+41	; 0x29
    28a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    28a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e8       	ldi	r20, 0x80	; 128
    28b0:	5f e3       	ldi	r21, 0x3F	; 63
    28b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b6:	88 23       	and	r24, r24
    28b8:	1c f4       	brge	.+6      	; 0x28c0 <GLCD_readData+0x3c6>
		__ticks = 1;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	88 a7       	std	Y+40, r24	; 0x28
    28be:	91 c0       	rjmp	.+290    	; 0x29e2 <GLCD_readData+0x4e8>
	else if (__tmp > 255)
    28c0:	69 a5       	ldd	r22, Y+41	; 0x29
    28c2:	7a a5       	ldd	r23, Y+42	; 0x2a
    28c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    28c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	53 e4       	ldi	r21, 0x43	; 67
    28d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	0c f0       	brlt	.+2      	; 0x28da <GLCD_readData+0x3e0>
    28d8:	7b c0       	rjmp	.+246    	; 0x29d0 <GLCD_readData+0x4d6>
	{
		_delay_ms(__us / 1000.0);
    28da:	6d a5       	ldd	r22, Y+45	; 0x2d
    28dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    28de:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e0:	98 a9       	ldd	r25, Y+48	; 0x30
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a e7       	ldi	r20, 0x7A	; 122
    28e8:	54 e4       	ldi	r21, 0x44	; 68
    28ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	8c a3       	std	Y+36, r24	; 0x24
    28f4:	9d a3       	std	Y+37, r25	; 0x25
    28f6:	ae a3       	std	Y+38, r26	; 0x26
    28f8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	6c a1       	ldd	r22, Y+36	; 0x24
    28fc:	7d a1       	ldd	r23, Y+37	; 0x25
    28fe:	8e a1       	ldd	r24, Y+38	; 0x26
    2900:	9f a1       	ldd	r25, Y+39	; 0x27
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a ef       	ldi	r20, 0xFA	; 250
    2908:	54 e4       	ldi	r21, 0x44	; 68
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	88 a3       	std	Y+32, r24	; 0x20
    2914:	99 a3       	std	Y+33, r25	; 0x21
    2916:	aa a3       	std	Y+34, r26	; 0x22
    2918:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    291a:	68 a1       	ldd	r22, Y+32	; 0x20
    291c:	79 a1       	ldd	r23, Y+33	; 0x21
    291e:	8a a1       	ldd	r24, Y+34	; 0x22
    2920:	9b a1       	ldd	r25, Y+35	; 0x23
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <GLCD_readData+0x442>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9f 8f       	std	Y+31, r25	; 0x1f
    2938:	8e 8f       	std	Y+30, r24	; 0x1e
    293a:	3f c0       	rjmp	.+126    	; 0x29ba <GLCD_readData+0x4c0>
	else if (__tmp > 65535)
    293c:	68 a1       	ldd	r22, Y+32	; 0x20
    293e:	79 a1       	ldd	r23, Y+33	; 0x21
    2940:	8a a1       	ldd	r24, Y+34	; 0x22
    2942:	9b a1       	ldd	r25, Y+35	; 0x23
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	57 e4       	ldi	r21, 0x47	; 71
    294c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2950:	18 16       	cp	r1, r24
    2952:	4c f5       	brge	.+82     	; 0x29a6 <GLCD_readData+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	6c a1       	ldd	r22, Y+36	; 0x24
    2956:	7d a1       	ldd	r23, Y+37	; 0x25
    2958:	8e a1       	ldd	r24, Y+38	; 0x26
    295a:	9f a1       	ldd	r25, Y+39	; 0x27
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e2       	ldi	r20, 0x20	; 32
    2962:	51 e4       	ldi	r21, 0x41	; 65
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9f 8f       	std	Y+31, r25	; 0x1f
    297a:	8e 8f       	std	Y+30, r24	; 0x1e
    297c:	0f c0       	rjmp	.+30     	; 0x299c <GLCD_readData+0x4a2>
    297e:	88 ec       	ldi	r24, 0xC8	; 200
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9d 8f       	std	Y+29, r25	; 0x1d
    2984:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2986:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2988:	9d 8d       	ldd	r25, Y+29	; 0x1d
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <GLCD_readData+0x490>
    298e:	9d 8f       	std	Y+29, r25	; 0x1d
    2990:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2994:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	9f 8f       	std	Y+31, r25	; 0x1f
    299a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    299e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	69 f7       	brne	.-38     	; 0x297e <GLCD_readData+0x484>
    29a4:	24 c0       	rjmp	.+72     	; 0x29ee <GLCD_readData+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a6:	68 a1       	ldd	r22, Y+32	; 0x20
    29a8:	79 a1       	ldd	r23, Y+33	; 0x21
    29aa:	8a a1       	ldd	r24, Y+34	; 0x22
    29ac:	9b a1       	ldd	r25, Y+35	; 0x23
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9f 8f       	std	Y+31, r25	; 0x1f
    29b8:	8e 8f       	std	Y+30, r24	; 0x1e
    29ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29be:	9b 8f       	std	Y+27, r25	; 0x1b
    29c0:	8a 8f       	std	Y+26, r24	; 0x1a
    29c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <GLCD_readData+0x4cc>
    29ca:	9b 8f       	std	Y+27, r25	; 0x1b
    29cc:	8a 8f       	std	Y+26, r24	; 0x1a
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <GLCD_readData+0x4f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29d0:	69 a5       	ldd	r22, Y+41	; 0x29
    29d2:	7a a5       	ldd	r23, Y+42	; 0x2a
    29d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	88 a7       	std	Y+40, r24	; 0x28
    29e2:	88 a5       	ldd	r24, Y+40	; 0x28
    29e4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29e6:	89 8d       	ldd	r24, Y+25	; 0x19
    29e8:	8a 95       	dec	r24
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <GLCD_readData+0x4ee>
    29ec:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(5);
	GLCD_CTRL_PORT &= ~(1 << EN);
    29ee:	a5 e3       	ldi	r26, 0x35	; 53
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e5 e3       	ldi	r30, 0x35	; 53
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	8b 7f       	andi	r24, 0xFB	; 251
    29fa:	8c 93       	st	X, r24
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a0 ea       	ldi	r26, 0xA0	; 160
    2a02:	b0 e4       	ldi	r27, 0x40	; 64
    2a04:	8d 8b       	std	Y+21, r24	; 0x15
    2a06:	9e 8b       	std	Y+22, r25	; 0x16
    2a08:	af 8b       	std	Y+23, r26	; 0x17
    2a0a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a10:	8f 89       	ldd	r24, Y+23	; 0x17
    2a12:	98 8d       	ldd	r25, Y+24	; 0x18
    2a14:	2b ea       	ldi	r18, 0xAB	; 171
    2a16:	3a ea       	ldi	r19, 0xAA	; 170
    2a18:	4a e2       	ldi	r20, 0x2A	; 42
    2a1a:	50 e4       	ldi	r21, 0x40	; 64
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	89 8b       	std	Y+17, r24	; 0x11
    2a26:	9a 8b       	std	Y+18, r25	; 0x12
    2a28:	ab 8b       	std	Y+19, r26	; 0x13
    2a2a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a2c:	69 89       	ldd	r22, Y+17	; 0x11
    2a2e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a30:	8b 89       	ldd	r24, Y+19	; 0x13
    2a32:	9c 89       	ldd	r25, Y+20	; 0x14
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e8       	ldi	r20, 0x80	; 128
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a40:	88 23       	and	r24, r24
    2a42:	1c f4       	brge	.+6      	; 0x2a4a <GLCD_readData+0x550>
		__ticks = 1;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	88 8b       	std	Y+16, r24	; 0x10
    2a48:	91 c0       	rjmp	.+290    	; 0x2b6c <GLCD_readData+0x672>
	else if (__tmp > 255)
    2a4a:	69 89       	ldd	r22, Y+17	; 0x11
    2a4c:	7a 89       	ldd	r23, Y+18	; 0x12
    2a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a50:	9c 89       	ldd	r25, Y+20	; 0x14
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4f e7       	ldi	r20, 0x7F	; 127
    2a58:	53 e4       	ldi	r21, 0x43	; 67
    2a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	0c f0       	brlt	.+2      	; 0x2a64 <GLCD_readData+0x56a>
    2a62:	7b c0       	rjmp	.+246    	; 0x2b5a <GLCD_readData+0x660>
	{
		_delay_ms(__us / 1000.0);
    2a64:	6d 89       	ldd	r22, Y+21	; 0x15
    2a66:	7e 89       	ldd	r23, Y+22	; 0x16
    2a68:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	4a e7       	ldi	r20, 0x7A	; 122
    2a72:	54 e4       	ldi	r21, 0x44	; 68
    2a74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	8c 87       	std	Y+12, r24	; 0x0c
    2a7e:	9d 87       	std	Y+13, r25	; 0x0d
    2a80:	ae 87       	std	Y+14, r26	; 0x0e
    2a82:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a84:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a86:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a88:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	4a ef       	ldi	r20, 0xFA	; 250
    2a92:	54 e4       	ldi	r21, 0x44	; 68
    2a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	88 87       	std	Y+8, r24	; 0x08
    2a9e:	99 87       	std	Y+9, r25	; 0x09
    2aa0:	aa 87       	std	Y+10, r26	; 0x0a
    2aa2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2aa4:	68 85       	ldd	r22, Y+8	; 0x08
    2aa6:	79 85       	ldd	r23, Y+9	; 0x09
    2aa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aaa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e8       	ldi	r20, 0x80	; 128
    2ab2:	5f e3       	ldi	r21, 0x3F	; 63
    2ab4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab8:	88 23       	and	r24, r24
    2aba:	2c f4       	brge	.+10     	; 0x2ac6 <GLCD_readData+0x5cc>
		__ticks = 1;
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	9f 83       	std	Y+7, r25	; 0x07
    2ac2:	8e 83       	std	Y+6, r24	; 0x06
    2ac4:	3f c0       	rjmp	.+126    	; 0x2b44 <GLCD_readData+0x64a>
	else if (__tmp > 65535)
    2ac6:	68 85       	ldd	r22, Y+8	; 0x08
    2ac8:	79 85       	ldd	r23, Y+9	; 0x09
    2aca:	8a 85       	ldd	r24, Y+10	; 0x0a
    2acc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	3f ef       	ldi	r19, 0xFF	; 255
    2ad2:	4f e7       	ldi	r20, 0x7F	; 127
    2ad4:	57 e4       	ldi	r21, 0x47	; 71
    2ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ada:	18 16       	cp	r1, r24
    2adc:	4c f5       	brge	.+82     	; 0x2b30 <GLCD_readData+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ade:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ae0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ae2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ae4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e2       	ldi	r20, 0x20	; 32
    2aec:	51 e4       	ldi	r21, 0x41	; 65
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	bc 01       	movw	r22, r24
    2af8:	cd 01       	movw	r24, r26
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9f 83       	std	Y+7, r25	; 0x07
    2b04:	8e 83       	std	Y+6, r24	; 0x06
    2b06:	0f c0       	rjmp	.+30     	; 0x2b26 <GLCD_readData+0x62c>
    2b08:	88 ec       	ldi	r24, 0xC8	; 200
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	9d 83       	std	Y+5, r25	; 0x05
    2b0e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b10:	8c 81       	ldd	r24, Y+4	; 0x04
    2b12:	9d 81       	ldd	r25, Y+5	; 0x05
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <GLCD_readData+0x61a>
    2b18:	9d 83       	std	Y+5, r25	; 0x05
    2b1a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	9f 83       	std	Y+7, r25	; 0x07
    2b24:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b26:	8e 81       	ldd	r24, Y+6	; 0x06
    2b28:	9f 81       	ldd	r25, Y+7	; 0x07
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	69 f7       	brne	.-38     	; 0x2b08 <GLCD_readData+0x60e>
    2b2e:	24 c0       	rjmp	.+72     	; 0x2b78 <GLCD_readData+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b30:	68 85       	ldd	r22, Y+8	; 0x08
    2b32:	79 85       	ldd	r23, Y+9	; 0x09
    2b34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9f 83       	std	Y+7, r25	; 0x07
    2b42:	8e 83       	std	Y+6, r24	; 0x06
    2b44:	8e 81       	ldd	r24, Y+6	; 0x06
    2b46:	9f 81       	ldd	r25, Y+7	; 0x07
    2b48:	9b 83       	std	Y+3, r25	; 0x03
    2b4a:	8a 83       	std	Y+2, r24	; 0x02
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <GLCD_readData+0x656>
    2b54:	9b 83       	std	Y+3, r25	; 0x03
    2b56:	8a 83       	std	Y+2, r24	; 0x02
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <GLCD_readData+0x67e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b5a:	69 89       	ldd	r22, Y+17	; 0x11
    2b5c:	7a 89       	ldd	r23, Y+18	; 0x12
    2b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b60:	9c 89       	ldd	r25, Y+20	; 0x14
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	88 8b       	std	Y+16, r24	; 0x10
    2b6c:	88 89       	ldd	r24, Y+16	; 0x10
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	8a 95       	dec	r24
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <GLCD_readData+0x678>
    2b76:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
	GLCD_DATA_PORT_DIRECTION = 0xFF;
    2b78:	ea e3       	ldi	r30, 0x3A	; 58
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	8f ef       	ldi	r24, 0xFF	; 255
    2b7e:	80 83       	st	Z, r24
	return Data;
    2b80:	fe 01       	movw	r30, r28
    2b82:	e9 5a       	subi	r30, 0xA9	; 169
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	80 81       	ld	r24, Z
}
    2b88:	c9 5a       	subi	r28, 0xA9	; 169
    2b8a:	df 4f       	sbci	r29, 0xFF	; 255
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	1f 91       	pop	r17
    2b9c:	0f 91       	pop	r16
    2b9e:	08 95       	ret

00002ba0 <GLCD_Init>:
 [Function Name]:  GLCD_Init
 [Description]  :  This function is responsible for initializing GLCD
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GLCD_Init()			/* GLCD initialize function */
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	2e 97       	sbiw	r28, 0x0e	; 14
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
	GLCD_DATA_PORT_DIRECTION = 0xFF;
    2bb4:	ea e3       	ldi	r30, 0x3A	; 58
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	8f ef       	ldi	r24, 0xFF	; 255
    2bba:	80 83       	st	Z, r24
	GLCD_CTRL_PORT_DIRECTION = 0xFF;
    2bbc:	e4 e3       	ldi	r30, 0x34	; 52
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	8f ef       	ldi	r24, 0xFF	; 255
    2bc2:	80 83       	st	Z, r24
	/* Select both left & right half of display & Keep reset pin high */
	GLCD_CTRL_PORT |= (1 << CS1) | (1 << CS2) | (1 << RST);
    2bc4:	a5 e3       	ldi	r26, 0x35	; 53
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e5 e3       	ldi	r30, 0x35	; 53
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	88 63       	ori	r24, 0x38	; 56
    2bd0:	8c 93       	st	X, r24
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a0 ea       	ldi	r26, 0xA0	; 160
    2bd8:	b1 e4       	ldi	r27, 0x41	; 65
    2bda:	8b 87       	std	Y+11, r24	; 0x0b
    2bdc:	9c 87       	std	Y+12, r25	; 0x0c
    2bde:	ad 87       	std	Y+13, r26	; 0x0d
    2be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a ef       	ldi	r20, 0xFA	; 250
    2bf0:	54 e4       	ldi	r21, 0x44	; 68
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	8f 83       	std	Y+7, r24	; 0x07
    2bfc:	98 87       	std	Y+8, r25	; 0x08
    2bfe:	a9 87       	std	Y+9, r26	; 0x09
    2c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e8       	ldi	r20, 0x80	; 128
    2c10:	5f e3       	ldi	r21, 0x3F	; 63
    2c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <GLCD_Init+0x84>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	8d 83       	std	Y+5, r24	; 0x05
    2c22:	3f c0       	rjmp	.+126    	; 0x2ca2 <GLCD_Init+0x102>
	else if (__tmp > 65535)
    2c24:	6f 81       	ldd	r22, Y+7	; 0x07
    2c26:	78 85       	ldd	r23, Y+8	; 0x08
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	4c f5       	brge	.+82     	; 0x2c8e <GLCD_Init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <GLCD_Init+0xe4>
    2c66:	88 ec       	ldi	r24, 0xC8	; 200
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	9c 81       	ldd	r25, Y+4	; 0x04
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <GLCD_Init+0xd2>
    2c76:	9c 83       	std	Y+4, r25	; 0x04
    2c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <GLCD_Init+0xc6>
    2c8c:	14 c0       	rjmp	.+40     	; 0x2cb6 <GLCD_Init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c90:	78 85       	ldd	r23, Y+8	; 0x08
    2c92:	89 85       	ldd	r24, Y+9	; 0x09
    2c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	9a 81       	ldd	r25, Y+2	; 0x02
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <GLCD_Init+0x10e>
    2cb2:	9a 83       	std	Y+2, r25	; 0x02
    2cb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	GLCD_sendCommand(0x3E);		/* Display OFF */
    2cb6:	8e e3       	ldi	r24, 0x3E	; 62
    2cb8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(COLUMN_SETTING_ADDRESS);		/* Set Y address (column=0) */
    2cbc:	80 e4       	ldi	r24, 0x40	; 64
    2cbe:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(PAGE_SETTING_ADDRESS);		/* Set x address (page=0) */
    2cc2:	88 eb       	ldi	r24, 0xB8	; 184
    2cc4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(START_LINE_ADDRESS);		/* Set z address (start line=0) */
    2cc8:	80 ec       	ldi	r24, 0xC0	; 192
    2cca:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(DISPLAY_ON);		/* Display ON */
    2cce:	8f e3       	ldi	r24, 0x3F	; 63
    2cd0:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
}
    2cd4:	2e 96       	adiw	r28, 0x0e	; 14
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <GLCD_clearScreen>:
 [Function Name]:  GLCD_clearScreen
 [Description]  :  This function is responsible for clearing the screen
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GLCD_clearScreen()			/* GLCD all display clear function */
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	2d 97       	sbiw	r28, 0x0d	; 13
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
	{
		int column,page,page_add=PAGE_SETTING_ADDRESS,k=0;
    2cfa:	88 eb       	ldi	r24, 0xB8	; 184
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	99 87       	std	Y+9, r25	; 0x09
    2d00:	88 87       	std	Y+8, r24	; 0x08
    2d02:	1f 82       	std	Y+7, r1	; 0x07
    2d04:	1e 82       	std	Y+6, r1	; 0x06
		float page_inc= 0.5 ;
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a0 e0       	ldi	r26, 0x00	; 0
    2d0c:	bf e3       	ldi	r27, 0x3F	; 63
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
    2d10:	9b 83       	std	Y+3, r25	; 0x03
    2d12:	ac 83       	std	Y+4, r26	; 0x04
    2d14:	bd 83       	std	Y+5, r27	; 0x05
		char byte;
		GLCD_sendCommand(COLUMN_SETTING_ADDRESS);		/* Set Y address (column=0) */
    2d16:	80 e4       	ldi	r24, 0x40	; 64
    2d18:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		GLCD_sendCommand(PAGE_SETTING_ADDRESS);		/* Set x address (page=0) */
    2d1c:	88 eb       	ldi	r24, 0xB8	; 184
    2d1e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>

		GLCD_CTRL_PORT |= (1 << CS1);	/* Select Left half of display */
    2d22:	a5 e3       	ldi	r26, 0x35	; 53
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e5 e3       	ldi	r30, 0x35	; 53
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	88 60       	ori	r24, 0x08	; 8
    2d2e:	8c 93       	st	X, r24
		GLCD_CTRL_PORT &= ~(1 << CS2);
    2d30:	a5 e3       	ldi	r26, 0x35	; 53
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	e5 e3       	ldi	r30, 0x35	; 53
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	8f 7e       	andi	r24, 0xEF	; 239
    2d3c:	8c 93       	st	X, r24

		for(page=0;page<16;page++)	/* Print pages(8 page of each half)*/
    2d3e:	1b 86       	std	Y+11, r1	; 0x0b
    2d40:	1a 86       	std	Y+10, r1	; 0x0a
    2d42:	53 c0       	rjmp	.+166    	; 0x2dea <GLCD_clearScreen+0x104>
		{
			for(column=0;column<64;column++)
    2d44:	1d 86       	std	Y+13, r1	; 0x0d
    2d46:	1c 86       	std	Y+12, r1	; 0x0c
    2d48:	08 c0       	rjmp	.+16     	; 0x2d5a <GLCD_clearScreen+0x74>
			{
				GLCD_sendData(0);/* Print 64 column of each page */
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
		GLCD_CTRL_PORT |= (1 << CS1);	/* Select Left half of display */
		GLCD_CTRL_PORT &= ~(1 << CS2);

		for(page=0;page<16;page++)	/* Print pages(8 page of each half)*/
		{
			for(column=0;column<64;column++)
    2d50:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d52:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d54:	01 96       	adiw	r24, 0x01	; 1
    2d56:	9d 87       	std	Y+13, r25	; 0x0d
    2d58:	8c 87       	std	Y+12, r24	; 0x0c
    2d5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d5e:	80 34       	cpi	r24, 0x40	; 64
    2d60:	91 05       	cpc	r25, r1
    2d62:	9c f3       	brlt	.-26     	; 0x2d4a <GLCD_clearScreen+0x64>
			{
				GLCD_sendData(0);/* Print 64 column of each page */
			}
			GLCD_CTRL_PORT ^= (1 << CS1);/* Change segment controller */
    2d64:	a5 e3       	ldi	r26, 0x35	; 53
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e5 e3       	ldi	r30, 0x35	; 53
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	90 81       	ld	r25, Z
    2d6e:	88 e0       	ldi	r24, 0x08	; 8
    2d70:	89 27       	eor	r24, r25
    2d72:	8c 93       	st	X, r24
			GLCD_CTRL_PORT ^= (1 << CS2);
    2d74:	a5 e3       	ldi	r26, 0x35	; 53
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e5 e3       	ldi	r30, 0x35	; 53
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	90 81       	ld	r25, Z
    2d7e:	80 e1       	ldi	r24, 0x10	; 16
    2d80:	89 27       	eor	r24, r25
    2d82:	8c 93       	st	X, r24
			GLCD_sendCommand((page_add+page_inc));/* Increment page address*/
    2d84:	88 85       	ldd	r24, Y+8	; 0x08
    2d86:	99 85       	ldd	r25, Y+9	; 0x09
    2d88:	aa 27       	eor	r26, r26
    2d8a:	97 fd       	sbrc	r25, 7
    2d8c:	a0 95       	com	r26
    2d8e:	ba 2f       	mov	r27, r26
    2d90:	bc 01       	movw	r22, r24
    2d92:	cd 01       	movw	r24, r26
    2d94:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	cd 01       	movw	r24, r26
    2da0:	2a 81       	ldd	r18, Y+2	; 0x02
    2da2:	3b 81       	ldd	r19, Y+3	; 0x03
    2da4:	4c 81       	ldd	r20, Y+4	; 0x04
    2da6:	5d 81       	ldd	r21, Y+5	; 0x05
    2da8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
			page_inc=page_inc+ 0.5 ;		/* Increment pointer */
    2dc0:	6a 81       	ldd	r22, Y+2	; 0x02
    2dc2:	7b 81       	ldd	r23, Y+3	; 0x03
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	5f e3       	ldi	r21, 0x3F	; 63
    2dd0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	8a 83       	std	Y+2, r24	; 0x02
    2dda:	9b 83       	std	Y+3, r25	; 0x03
    2ddc:	ac 83       	std	Y+4, r26	; 0x04
    2dde:	bd 83       	std	Y+5, r27	; 0x05
		GLCD_sendCommand(PAGE_SETTING_ADDRESS);		/* Set x address (page=0) */

		GLCD_CTRL_PORT |= (1 << CS1);	/* Select Left half of display */
		GLCD_CTRL_PORT &= ~(1 << CS2);

		for(page=0;page<16;page++)	/* Print pages(8 page of each half)*/
    2de0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	9b 87       	std	Y+11, r25	; 0x0b
    2de8:	8a 87       	std	Y+10, r24	; 0x0a
    2dea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dee:	80 31       	cpi	r24, 0x10	; 16
    2df0:	91 05       	cpc	r25, r1
    2df2:	0c f4       	brge	.+2      	; 0x2df6 <GLCD_clearScreen+0x110>
    2df4:	a7 cf       	rjmp	.-178    	; 0x2d44 <GLCD_clearScreen+0x5e>
			GLCD_CTRL_PORT ^= (1 << CS1);/* Change segment controller */
			GLCD_CTRL_PORT ^= (1 << CS2);
			GLCD_sendCommand((page_add+page_inc));/* Increment page address*/
			page_inc=page_inc+ 0.5 ;		/* Increment pointer */
		}
		GLCD_sendCommand(COLUMN_SETTING_ADDRESS);		/* Set Y address (column=0) */
    2df6:	80 e4       	ldi	r24, 0x40	; 64
    2df8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		GLCD_sendCommand(PAGE_SETTING_ADDRESS);		/* Set x address (page=0) */
    2dfc:	88 eb       	ldi	r24, 0xB8	; 184
    2dfe:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	}

}
    2e02:	2d 96       	adiw	r28, 0x0d	; 13
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <GLCD_displayImage>:
 [Function Name]:  GLCD_displayImage
 [Description]  :  This function is responsible for displaying the image
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GLCD_displayImage(const char* image)	/* GLCD string write function */
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
    2e1c:	62 97       	sbiw	r28, 0x12	; 18
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	9a 8b       	std	Y+18, r25	; 0x12
    2e2a:	89 8b       	std	Y+17, r24	; 0x11
	int column,page,page_add=PAGE_SETTING_ADDRESS,k=0;
    2e2c:	88 eb       	ldi	r24, 0xB8	; 184
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9c 87       	std	Y+12, r25	; 0x0c
    2e32:	8b 87       	std	Y+11, r24	; 0x0b
    2e34:	1a 86       	std	Y+10, r1	; 0x0a
    2e36:	19 86       	std	Y+9, r1	; 0x09
	float page_inc=0.5;
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	a0 e0       	ldi	r26, 0x00	; 0
    2e3e:	bf e3       	ldi	r27, 0x3F	; 63
    2e40:	8d 83       	std	Y+5, r24	; 0x05
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	af 83       	std	Y+7, r26	; 0x07
    2e46:	b8 87       	std	Y+8, r27	; 0x08
	char byte;

	GLCD_CTRL_PORT |= (1 << CS1);	/* Select Left half of display */
    2e48:	a5 e3       	ldi	r26, 0x35	; 53
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e5 e3       	ldi	r30, 0x35	; 53
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	88 60       	ori	r24, 0x08	; 8
    2e54:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(1 << CS2);
    2e56:	a5 e3       	ldi	r26, 0x35	; 53
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e5 e3       	ldi	r30, 0x35	; 53
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	8f 7e       	andi	r24, 0xEF	; 239
    2e62:	8c 93       	st	X, r24

	for(page=0;page<16;page++)	/* Print pages(8 page of each half)*/
    2e64:	1e 86       	std	Y+14, r1	; 0x0e
    2e66:	1d 86       	std	Y+13, r1	; 0x0d
    2e68:	6c c0       	rjmp	.+216    	; 0x2f42 <GLCD_displayImage+0x12e>
	{
		for(column=0;column<64;column++)
    2e6a:	18 8a       	std	Y+16, r1	; 0x10
    2e6c:	1f 86       	std	Y+15, r1	; 0x0f
    2e6e:	1b c0       	rjmp	.+54     	; 0x2ea6 <GLCD_displayImage+0x92>
		{
			byte = pgm_read_byte(&image[k+column]);
    2e70:	29 85       	ldd	r18, Y+9	; 0x09
    2e72:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e76:	98 89       	ldd	r25, Y+16	; 0x10
    2e78:	82 0f       	add	r24, r18
    2e7a:	93 1f       	adc	r25, r19
    2e7c:	9c 01       	movw	r18, r24
    2e7e:	89 89       	ldd	r24, Y+17	; 0x11
    2e80:	9a 89       	ldd	r25, Y+18	; 0x12
    2e82:	82 0f       	add	r24, r18
    2e84:	93 1f       	adc	r25, r19
    2e86:	9b 83       	std	Y+3, r25	; 0x03
    2e88:	8a 83       	std	Y+2, r24	; 0x02
    2e8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e8e:	84 91       	lpm	r24, Z+
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	8c 83       	std	Y+4, r24	; 0x04
			GLCD_sendData(byte);/* Print 64 column of each page */
    2e96:	8c 81       	ldd	r24, Y+4	; 0x04
    2e98:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
	GLCD_CTRL_PORT |= (1 << CS1);	/* Select Left half of display */
	GLCD_CTRL_PORT &= ~(1 << CS2);

	for(page=0;page<16;page++)	/* Print pages(8 page of each half)*/
	{
		for(column=0;column<64;column++)
    2e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	98 8b       	std	Y+16, r25	; 0x10
    2ea4:	8f 87       	std	Y+15, r24	; 0x0f
    2ea6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea8:	98 89       	ldd	r25, Y+16	; 0x10
    2eaa:	80 34       	cpi	r24, 0x40	; 64
    2eac:	91 05       	cpc	r25, r1
    2eae:	04 f3       	brlt	.-64     	; 0x2e70 <GLCD_displayImage+0x5c>
		{
			byte = pgm_read_byte(&image[k+column]);
			GLCD_sendData(byte);/* Print 64 column of each page */
		}
		GLCD_CTRL_PORT ^= (1 << CS1);/* Change segment controller */
    2eb0:	a5 e3       	ldi	r26, 0x35	; 53
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e5 e3       	ldi	r30, 0x35	; 53
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	90 81       	ld	r25, Z
    2eba:	88 e0       	ldi	r24, 0x08	; 8
    2ebc:	89 27       	eor	r24, r25
    2ebe:	8c 93       	st	X, r24
		GLCD_CTRL_PORT ^= (1 << CS2);
    2ec0:	a5 e3       	ldi	r26, 0x35	; 53
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e5 e3       	ldi	r30, 0x35	; 53
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	90 81       	ld	r25, Z
    2eca:	80 e1       	ldi	r24, 0x10	; 16
    2ecc:	89 27       	eor	r24, r25
    2ece:	8c 93       	st	X, r24
		GLCD_sendCommand((page_add+page_inc));/* Increment page address*/
    2ed0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ed2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ed4:	aa 27       	eor	r26, r26
    2ed6:	97 fd       	sbrc	r25, 7
    2ed8:	a0 95       	com	r26
    2eda:	ba 2f       	mov	r27, r26
    2edc:	bc 01       	movw	r22, r24
    2ede:	cd 01       	movw	r24, r26
    2ee0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	2d 81       	ldd	r18, Y+5	; 0x05
    2eee:	3e 81       	ldd	r19, Y+6	; 0x06
    2ef0:	4f 81       	ldd	r20, Y+7	; 0x07
    2ef2:	58 85       	ldd	r21, Y+8	; 0x08
    2ef4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		page_inc=page_inc+0.5;
    2f0c:	6d 81       	ldd	r22, Y+5	; 0x05
    2f0e:	7e 81       	ldd	r23, Y+6	; 0x06
    2f10:	8f 81       	ldd	r24, Y+7	; 0x07
    2f12:	98 85       	ldd	r25, Y+8	; 0x08
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	8d 83       	std	Y+5, r24	; 0x05
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	af 83       	std	Y+7, r26	; 0x07
    2f2a:	b8 87       	std	Y+8, r27	; 0x08
		k=k+64;			/* Increment pointer */
    2f2c:	89 85       	ldd	r24, Y+9	; 0x09
    2f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f30:	80 5c       	subi	r24, 0xC0	; 192
    2f32:	9f 4f       	sbci	r25, 0xFF	; 255
    2f34:	9a 87       	std	Y+10, r25	; 0x0a
    2f36:	89 87       	std	Y+9, r24	; 0x09
	char byte;

	GLCD_CTRL_PORT |= (1 << CS1);	/* Select Left half of display */
	GLCD_CTRL_PORT &= ~(1 << CS2);

	for(page=0;page<16;page++)	/* Print pages(8 page of each half)*/
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	9e 87       	std	Y+14, r25	; 0x0e
    2f40:	8d 87       	std	Y+13, r24	; 0x0d
    2f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f46:	80 31       	cpi	r24, 0x10	; 16
    2f48:	91 05       	cpc	r25, r1
    2f4a:	0c f4       	brge	.+2      	; 0x2f4e <GLCD_displayImage+0x13a>
    2f4c:	8e cf       	rjmp	.-228    	; 0x2e6a <GLCD_displayImage+0x56>
		GLCD_CTRL_PORT ^= (1 << CS2);
		GLCD_sendCommand((page_add+page_inc));/* Increment page address*/
		page_inc=page_inc+0.5;
		k=k+64;			/* Increment pointer */
	}
	GLCD_sendCommand(COLUMN_SETTING_ADDRESS);		/* Set Y address (column=0) */
    2f4e:	80 e4       	ldi	r24, 0x40	; 64
    2f50:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(PAGE_SETTING_ADDRESS);		/* Set x address (page=0) */
    2f54:	88 eb       	ldi	r24, 0xB8	; 184
    2f56:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
}
    2f5a:	62 96       	adiw	r28, 0x12	; 18
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <GLCD_displayString>:
 [Function Name]:  GLCD_displayString
 [Description]  :  This function is responsible for displaying the string
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void GLCD_displayString(char page_no, char *str)/* GLCD string write function */
{
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	2f 97       	sbiw	r28, 0x0f	; 15
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	f8 94       	cli
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	cd bf       	out	0x3d, r28	; 61
    2f84:	8d 87       	std	Y+13, r24	; 0x0d
    2f86:	7f 87       	std	Y+15, r23	; 0x0f
    2f88:	6e 87       	std	Y+14, r22	; 0x0e
	unsigned int i, column;
	unsigned int Page = ((PAGE_SETTING_ADDRESS) + page_no);
    2f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8c:	88 2f       	mov	r24, r24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	88 54       	subi	r24, 0x48	; 72
    2f92:	9f 4f       	sbci	r25, 0xFF	; 255
    2f94:	98 87       	std	Y+8, r25	; 0x08
    2f96:	8f 83       	std	Y+7, r24	; 0x07
	unsigned int Y_address = 0;
    2f98:	1e 82       	std	Y+6, r1	; 0x06
    2f9a:	1d 82       	std	Y+5, r1	; 0x05
	float Page_inc = 0.5;
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	a0 e0       	ldi	r26, 0x00	; 0
    2fa2:	bf e3       	ldi	r27, 0x3F	; 63
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	ab 83       	std	Y+3, r26	; 0x03
    2faa:	bc 83       	std	Y+4, r27	; 0x04

	GLCD_CTRL_PORT |= (1 << CS1);	/* Select Left half of display */
    2fac:	a5 e3       	ldi	r26, 0x35	; 53
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e5 e3       	ldi	r30, 0x35	; 53
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	88 60       	ori	r24, 0x08	; 8
    2fb8:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(1 << CS2);
    2fba:	a5 e3       	ldi	r26, 0x35	; 53
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e5 e3       	ldi	r30, 0x35	; 53
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8f 7e       	andi	r24, 0xEF	; 239
    2fc6:	8c 93       	st	X, r24

	GLCD_sendCommand(Page);
    2fc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fca:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    2fce:	1c 86       	std	Y+12, r1	; 0x0c
    2fd0:	1b 86       	std	Y+11, r1	; 0x0b
    2fd2:	16 c2       	rjmp	.+1068   	; 0x3400 <GLCD_displayString+0x494>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
    2fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd6:	88 2f       	mov	r24, r24
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	96 95       	lsr	r25
    2fdc:	98 2f       	mov	r25, r24
    2fde:	88 27       	eor	r24, r24
    2fe0:	97 95       	ror	r25
    2fe2:	87 95       	ror	r24
    2fe4:	90 95       	com	r25
    2fe6:	81 95       	neg	r24
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	85 50       	subi	r24, 0x05	; 5
    2fec:	9c 4f       	sbci	r25, 0xFC	; 252
    2fee:	9c 01       	movw	r18, r24
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	28 17       	cp	r18, r24
    2ff6:	39 07       	cpc	r19, r25
    2ff8:	08 f4       	brcc	.+2      	; 0x2ffc <GLCD_displayString+0x90>
    2ffa:	0d c2       	rjmp	.+1050   	; 0x3416 <GLCD_displayString+0x4aa>
		break;
		if (str[i]!=32)  /* space value */
    2ffc:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ffe:	3f 85       	ldd	r19, Y+15	; 0x0f
    3000:	8b 85       	ldd	r24, Y+11	; 0x0b
    3002:	9c 85       	ldd	r25, Y+12	; 0x0c
    3004:	f9 01       	movw	r30, r18
    3006:	e8 0f       	add	r30, r24
    3008:	f9 1f       	adc	r31, r25
    300a:	80 81       	ld	r24, Z
    300c:	80 32       	cpi	r24, 0x20	; 32
    300e:	09 f4       	brne	.+2      	; 0x3012 <GLCD_displayString+0xa6>
    3010:	80 c0       	rjmp	.+256    	; 0x3112 <GLCD_displayString+0x1a6>
		{
			for (column=1; column<=FontWidth; column++)
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	9a 87       	std	Y+10, r25	; 0x0a
    3018:	89 87       	std	Y+9, r24	; 0x09
    301a:	75 c0       	rjmp	.+234    	; 0x3106 <GLCD_displayString+0x19a>
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
    301c:	2d 81       	ldd	r18, Y+5	; 0x05
    301e:	3e 81       	ldd	r19, Y+6	; 0x06
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	89 01       	movw	r16, r18
    3026:	08 0f       	add	r16, r24
    3028:	19 1f       	adc	r17, r25
    302a:	69 81       	ldd	r22, Y+1	; 0x01
    302c:	7a 81       	ldd	r23, Y+2	; 0x02
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	5f e3       	ldi	r21, 0x3F	; 63
    303a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	96 95       	lsr	r25
    3050:	98 2f       	mov	r25, r24
    3052:	88 27       	eor	r24, r24
    3054:	97 95       	ror	r25
    3056:	87 95       	ror	r24
    3058:	08 17       	cp	r16, r24
    305a:	19 07       	cpc	r17, r25
    305c:	09 f0       	breq	.+2      	; 0x3060 <GLCD_displayString+0xf4>
    305e:	4e c0       	rjmp	.+156    	; 0x30fc <GLCD_displayString+0x190>
				{
					if (column == FontWidth)
    3060:	89 85       	ldd	r24, Y+9	; 0x09
    3062:	9a 85       	ldd	r25, Y+10	; 0x0a
    3064:	85 30       	cpi	r24, 0x05	; 5
    3066:	91 05       	cpc	r25, r1
    3068:	09 f4       	brne	.+2      	; 0x306c <GLCD_displayString+0x100>
    306a:	53 c0       	rjmp	.+166    	; 0x3112 <GLCD_displayString+0x1a6>
					break;
					GLCD_sendCommand(COLUMN_SETTING_ADDRESS); /* set Y-address to zero */
    306c:	80 e4       	ldi	r24, 0x40	; 64
    306e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
					Y_address = Y_address + column;
    3072:	2d 81       	ldd	r18, Y+5	; 0x05
    3074:	3e 81       	ldd	r19, Y+6	; 0x06
    3076:	89 85       	ldd	r24, Y+9	; 0x09
    3078:	9a 85       	ldd	r25, Y+10	; 0x0a
    307a:	82 0f       	add	r24, r18
    307c:	93 1f       	adc	r25, r19
    307e:	9e 83       	std	Y+6, r25	; 0x06
    3080:	8d 83       	std	Y+5, r24	; 0x05
					GLCD_CTRL_PORT ^= (1 << CS1);
    3082:	a5 e3       	ldi	r26, 0x35	; 53
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	e5 e3       	ldi	r30, 0x35	; 53
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	90 81       	ld	r25, Z
    308c:	88 e0       	ldi	r24, 0x08	; 8
    308e:	89 27       	eor	r24, r25
    3090:	8c 93       	st	X, r24
					GLCD_CTRL_PORT ^= (1 << CS2);
    3092:	a5 e3       	ldi	r26, 0x35	; 53
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e5 e3       	ldi	r30, 0x35	; 53
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	90 81       	ld	r25, Z
    309c:	80 e1       	ldi	r24, 0x10	; 16
    309e:	89 27       	eor	r24, r25
    30a0:	8c 93       	st	X, r24
					GLCD_sendCommand(Page + Page_inc);
    30a2:	8f 81       	ldd	r24, Y+7	; 0x07
    30a4:	98 85       	ldd	r25, Y+8	; 0x08
    30a6:	cc 01       	movw	r24, r24
    30a8:	a0 e0       	ldi	r26, 0x00	; 0
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	29 81       	ldd	r18, Y+1	; 0x01
    30be:	3a 81       	ldd	r19, Y+2	; 0x02
    30c0:	4b 81       	ldd	r20, Y+3	; 0x03
    30c2:	5c 81       	ldd	r21, Y+4	; 0x04
    30c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	bc 01       	movw	r22, r24
    30ce:	cd 01       	movw	r24, r26
    30d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
					Page_inc = Page_inc + 0.5;
    30dc:	69 81       	ldd	r22, Y+1	; 0x01
    30de:	7a 81       	ldd	r23, Y+2	; 0x02
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	9c 81       	ldd	r25, Y+4	; 0x04
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e0       	ldi	r20, 0x00	; 0
    30ea:	5f e3       	ldi	r21, 0x3F	; 63
    30ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	9a 83       	std	Y+2, r25	; 0x02
    30f8:	ab 83       	std	Y+3, r26	; 0x03
    30fa:	bc 83       	std	Y+4, r27	; 0x04
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)  /* space value */
		{
			for (column=1; column<=FontWidth; column++)
    30fc:	89 85       	ldd	r24, Y+9	; 0x09
    30fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	9a 87       	std	Y+10, r25	; 0x0a
    3104:	89 87       	std	Y+9, r24	; 0x09
    3106:	89 85       	ldd	r24, Y+9	; 0x09
    3108:	9a 85       	ldd	r25, Y+10	; 0x0a
    310a:	86 30       	cpi	r24, 0x06	; 6
    310c:	91 05       	cpc	r25, r1
    310e:	08 f4       	brcc	.+2      	; 0x3112 <GLCD_displayString+0x1a6>
    3110:	85 cf       	rjmp	.-246    	; 0x301c <GLCD_displayString+0xb0>
					GLCD_sendCommand(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
    3112:	8d 85       	ldd	r24, Y+13	; 0x0d
    3114:	88 2f       	mov	r24, r24
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	96 95       	lsr	r25
    311a:	98 2f       	mov	r25, r24
    311c:	88 27       	eor	r24, r24
    311e:	97 95       	ror	r25
    3120:	87 95       	ror	r24
    3122:	90 95       	com	r25
    3124:	81 95       	neg	r24
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	85 50       	subi	r24, 0x05	; 5
    312a:	9c 4f       	sbci	r25, 0xFC	; 252
    312c:	9c 01       	movw	r18, r24
    312e:	8d 81       	ldd	r24, Y+5	; 0x05
    3130:	9e 81       	ldd	r25, Y+6	; 0x06
    3132:	28 17       	cp	r18, r24
    3134:	39 07       	cpc	r19, r25
    3136:	08 f4       	brcc	.+2      	; 0x313a <GLCD_displayString+0x1ce>
    3138:	6e c1       	rjmp	.+732    	; 0x3416 <GLCD_displayString+0x4aa>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
    313a:	2e 85       	ldd	r18, Y+14	; 0x0e
    313c:	3f 85       	ldd	r19, Y+15	; 0x0f
    313e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3140:	9c 85       	ldd	r25, Y+12	; 0x0c
    3142:	f9 01       	movw	r30, r18
    3144:	e8 0f       	add	r30, r24
    3146:	f9 1f       	adc	r31, r25
    3148:	80 81       	ld	r24, Z
    314a:	28 2f       	mov	r18, r24
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	c9 01       	movw	r24, r18
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	82 0f       	add	r24, r18
    3156:	93 1f       	adc	r25, r19
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	82 0f       	add	r24, r18
    3166:	93 1f       	adc	r25, r19
    3168:	8c 50       	subi	r24, 0x0C	; 12
    316a:	93 40       	sbci	r25, 0x03	; 3
    316c:	8b 51       	subi	r24, 0x1B	; 27
    316e:	9e 4f       	sbci	r25, 0xFE	; 254
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	59 f0       	breq	.+22     	; 0x318a <GLCD_displayString+0x21e>
    3174:	2e 85       	ldd	r18, Y+14	; 0x0e
    3176:	3f 85       	ldd	r19, Y+15	; 0x0f
    3178:	8b 85       	ldd	r24, Y+11	; 0x0b
    317a:	9c 85       	ldd	r25, Y+12	; 0x0c
    317c:	f9 01       	movw	r30, r18
    317e:	e8 0f       	add	r30, r24
    3180:	f9 1f       	adc	r31, r25
    3182:	80 81       	ld	r24, Z
    3184:	80 32       	cpi	r24, 0x20	; 32
    3186:	09 f0       	breq	.+2      	; 0x318a <GLCD_displayString+0x21e>
    3188:	76 c0       	rjmp	.+236    	; 0x3276 <GLCD_displayString+0x30a>
		{
			for(column=0; column<FontWidth; column++)
    318a:	1a 86       	std	Y+10, r1	; 0x0a
    318c:	19 86       	std	Y+9, r1	; 0x09
    318e:	6c c0       	rjmp	.+216    	; 0x3268 <GLCD_displayString+0x2fc>
			{
				GLCD_sendData(font[str[i]-32][column]);
    3190:	2e 85       	ldd	r18, Y+14	; 0x0e
    3192:	3f 85       	ldd	r19, Y+15	; 0x0f
    3194:	8b 85       	ldd	r24, Y+11	; 0x0b
    3196:	9c 85       	ldd	r25, Y+12	; 0x0c
    3198:	f9 01       	movw	r30, r18
    319a:	e8 0f       	add	r30, r24
    319c:	f9 1f       	adc	r31, r25
    319e:	80 81       	ld	r24, Z
    31a0:	88 2f       	mov	r24, r24
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9c 01       	movw	r18, r24
    31a6:	20 52       	subi	r18, 0x20	; 32
    31a8:	30 40       	sbci	r19, 0x00	; 0
    31aa:	49 85       	ldd	r20, Y+9	; 0x09
    31ac:	5a 85       	ldd	r21, Y+10	; 0x0a
    31ae:	c9 01       	movw	r24, r18
    31b0:	88 0f       	add	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	82 0f       	add	r24, r18
    31ba:	93 1f       	adc	r25, r19
    31bc:	84 0f       	add	r24, r20
    31be:	95 1f       	adc	r25, r21
    31c0:	fc 01       	movw	r30, r24
    31c2:	eb 51       	subi	r30, 0x1B	; 27
    31c4:	fe 4f       	sbci	r31, 0xFE	; 254
    31c6:	80 81       	ld	r24, Z
    31c8:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
				if((Y_address+1)%64==0)
    31cc:	8d 81       	ldd	r24, Y+5	; 0x05
    31ce:	9e 81       	ldd	r25, Y+6	; 0x06
    31d0:	01 96       	adiw	r24, 0x01	; 1
    31d2:	8f 73       	andi	r24, 0x3F	; 63
    31d4:	90 70       	andi	r25, 0x00	; 0
    31d6:	00 97       	sbiw	r24, 0x00	; 0
    31d8:	e9 f5       	brne	.+122    	; 0x3254 <GLCD_displayString+0x2e8>
				{
					GLCD_CTRL_PORT ^= (1 << CS1);
    31da:	a5 e3       	ldi	r26, 0x35	; 53
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e5 e3       	ldi	r30, 0x35	; 53
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	90 81       	ld	r25, Z
    31e4:	88 e0       	ldi	r24, 0x08	; 8
    31e6:	89 27       	eor	r24, r25
    31e8:	8c 93       	st	X, r24
					GLCD_CTRL_PORT ^= (1 << CS2);
    31ea:	a5 e3       	ldi	r26, 0x35	; 53
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e5 e3       	ldi	r30, 0x35	; 53
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	90 81       	ld	r25, Z
    31f4:	80 e1       	ldi	r24, 0x10	; 16
    31f6:	89 27       	eor	r24, r25
    31f8:	8c 93       	st	X, r24
					GLCD_sendCommand((Page+Page_inc));
    31fa:	8f 81       	ldd	r24, Y+7	; 0x07
    31fc:	98 85       	ldd	r25, Y+8	; 0x08
    31fe:	cc 01       	movw	r24, r24
    3200:	a0 e0       	ldi	r26, 0x00	; 0
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	bc 01       	movw	r22, r24
    3212:	cd 01       	movw	r24, r26
    3214:	29 81       	ldd	r18, Y+1	; 0x01
    3216:	3a 81       	ldd	r19, Y+2	; 0x02
    3218:	4b 81       	ldd	r20, Y+3	; 0x03
    321a:	5c 81       	ldd	r21, Y+4	; 0x04
    321c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	bc 01       	movw	r22, r24
    3226:	cd 01       	movw	r24, r26
    3228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
					Page_inc = Page_inc + 0.5;
    3234:	69 81       	ldd	r22, Y+1	; 0x01
    3236:	7a 81       	ldd	r23, Y+2	; 0x02
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	9c 81       	ldd	r25, Y+4	; 0x04
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	5f e3       	ldi	r21, 0x3F	; 63
    3244:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	9a 83       	std	Y+2, r25	; 0x02
    3250:	ab 83       	std	Y+3, r26	; 0x03
    3252:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	9e 81       	ldd	r25, Y+6	; 0x06
    3258:	01 96       	adiw	r24, 0x01	; 1
    325a:	9e 83       	std	Y+6, r25	; 0x06
    325c:	8d 83       	std	Y+5, r24	; 0x05
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	01 96       	adiw	r24, 0x01	; 1
    3264:	9a 87       	std	Y+10, r25	; 0x0a
    3266:	89 87       	std	Y+9, r24	; 0x09
    3268:	89 85       	ldd	r24, Y+9	; 0x09
    326a:	9a 85       	ldd	r25, Y+10	; 0x0a
    326c:	85 30       	cpi	r24, 0x05	; 5
    326e:	91 05       	cpc	r25, r1
    3270:	08 f4       	brcc	.+2      	; 0x3274 <GLCD_displayString+0x308>
    3272:	8e cf       	rjmp	.-228    	; 0x3190 <GLCD_displayString+0x224>
    3274:	c0 c0       	rjmp	.+384    	; 0x33f6 <GLCD_displayString+0x48a>
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    3276:	1a 86       	std	Y+10, r1	; 0x0a
    3278:	19 86       	std	Y+9, r1	; 0x09
    327a:	6c c0       	rjmp	.+216    	; 0x3354 <GLCD_displayString+0x3e8>
			{
				GLCD_sendData(font[str[i]-32][column]);
    327c:	2e 85       	ldd	r18, Y+14	; 0x0e
    327e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3280:	8b 85       	ldd	r24, Y+11	; 0x0b
    3282:	9c 85       	ldd	r25, Y+12	; 0x0c
    3284:	f9 01       	movw	r30, r18
    3286:	e8 0f       	add	r30, r24
    3288:	f9 1f       	adc	r31, r25
    328a:	80 81       	ld	r24, Z
    328c:	88 2f       	mov	r24, r24
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	9c 01       	movw	r18, r24
    3292:	20 52       	subi	r18, 0x20	; 32
    3294:	30 40       	sbci	r19, 0x00	; 0
    3296:	49 85       	ldd	r20, Y+9	; 0x09
    3298:	5a 85       	ldd	r21, Y+10	; 0x0a
    329a:	c9 01       	movw	r24, r18
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	82 0f       	add	r24, r18
    32a6:	93 1f       	adc	r25, r19
    32a8:	84 0f       	add	r24, r20
    32aa:	95 1f       	adc	r25, r21
    32ac:	fc 01       	movw	r30, r24
    32ae:	eb 51       	subi	r30, 0x1B	; 27
    32b0:	fe 4f       	sbci	r31, 0xFE	; 254
    32b2:	80 81       	ld	r24, Z
    32b4:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
				if((Y_address+1)%64==0)
    32b8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ba:	9e 81       	ldd	r25, Y+6	; 0x06
    32bc:	01 96       	adiw	r24, 0x01	; 1
    32be:	8f 73       	andi	r24, 0x3F	; 63
    32c0:	90 70       	andi	r25, 0x00	; 0
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	e9 f5       	brne	.+122    	; 0x3340 <GLCD_displayString+0x3d4>
				{
					GLCD_CTRL_PORT ^= (1 << CS1);
    32c6:	a5 e3       	ldi	r26, 0x35	; 53
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e5 e3       	ldi	r30, 0x35	; 53
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	90 81       	ld	r25, Z
    32d0:	88 e0       	ldi	r24, 0x08	; 8
    32d2:	89 27       	eor	r24, r25
    32d4:	8c 93       	st	X, r24
					GLCD_CTRL_PORT ^= (1 << CS2);
    32d6:	a5 e3       	ldi	r26, 0x35	; 53
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e5 e3       	ldi	r30, 0x35	; 53
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	90 81       	ld	r25, Z
    32e0:	80 e1       	ldi	r24, 0x10	; 16
    32e2:	89 27       	eor	r24, r25
    32e4:	8c 93       	st	X, r24
					GLCD_sendCommand((Page+Page_inc));
    32e6:	8f 81       	ldd	r24, Y+7	; 0x07
    32e8:	98 85       	ldd	r25, Y+8	; 0x08
    32ea:	cc 01       	movw	r24, r24
    32ec:	a0 e0       	ldi	r26, 0x00	; 0
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	bc 01       	movw	r22, r24
    32fe:	cd 01       	movw	r24, r26
    3300:	29 81       	ldd	r18, Y+1	; 0x01
    3302:	3a 81       	ldd	r19, Y+2	; 0x02
    3304:	4b 81       	ldd	r20, Y+3	; 0x03
    3306:	5c 81       	ldd	r21, Y+4	; 0x04
    3308:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	bc 01       	movw	r22, r24
    3312:	cd 01       	movw	r24, r26
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
					Page_inc = Page_inc + 0.5;
    3320:	69 81       	ldd	r22, Y+1	; 0x01
    3322:	7a 81       	ldd	r23, Y+2	; 0x02
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	9c 81       	ldd	r25, Y+4	; 0x04
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	5f e3       	ldi	r21, 0x3F	; 63
    3330:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	9a 83       	std	Y+2, r25	; 0x02
    333c:	ab 83       	std	Y+3, r26	; 0x03
    333e:	bc 83       	std	Y+4, r27	; 0x04
				}
				Y_address++;
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	01 96       	adiw	r24, 0x01	; 1
    3346:	9e 83       	std	Y+6, r25	; 0x06
    3348:	8d 83       	std	Y+5, r24	; 0x05
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
    334a:	89 85       	ldd	r24, Y+9	; 0x09
    334c:	9a 85       	ldd	r25, Y+10	; 0x0a
    334e:	01 96       	adiw	r24, 0x01	; 1
    3350:	9a 87       	std	Y+10, r25	; 0x0a
    3352:	89 87       	std	Y+9, r24	; 0x09
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	9a 85       	ldd	r25, Y+10	; 0x0a
    3358:	85 30       	cpi	r24, 0x05	; 5
    335a:	91 05       	cpc	r25, r1
    335c:	08 f4       	brcc	.+2      	; 0x3360 <GLCD_displayString+0x3f4>
    335e:	8e cf       	rjmp	.-228    	; 0x327c <GLCD_displayString+0x310>
					GLCD_sendCommand((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_sendData(0);
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
			Y_address++;
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	9e 81       	ldd	r25, Y+6	; 0x06
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
			if((Y_address)%64 == 0)
    3370:	8d 81       	ldd	r24, Y+5	; 0x05
    3372:	9e 81       	ldd	r25, Y+6	; 0x06
    3374:	8f 73       	andi	r24, 0x3F	; 63
    3376:	90 70       	andi	r25, 0x00	; 0
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	e9 f5       	brne	.+122    	; 0x33f6 <GLCD_displayString+0x48a>
			{
				GLCD_CTRL_PORT ^= (1 << CS1);
    337c:	a5 e3       	ldi	r26, 0x35	; 53
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	e5 e3       	ldi	r30, 0x35	; 53
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	90 81       	ld	r25, Z
    3386:	88 e0       	ldi	r24, 0x08	; 8
    3388:	89 27       	eor	r24, r25
    338a:	8c 93       	st	X, r24
				GLCD_CTRL_PORT ^= (1 << CS2);
    338c:	a5 e3       	ldi	r26, 0x35	; 53
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e5 e3       	ldi	r30, 0x35	; 53
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	90 81       	ld	r25, Z
    3396:	80 e1       	ldi	r24, 0x10	; 16
    3398:	89 27       	eor	r24, r25
    339a:	8c 93       	st	X, r24
				GLCD_sendCommand((Page+Page_inc));
    339c:	8f 81       	ldd	r24, Y+7	; 0x07
    339e:	98 85       	ldd	r25, Y+8	; 0x08
    33a0:	cc 01       	movw	r24, r24
    33a2:	a0 e0       	ldi	r26, 0x00	; 0
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	29 81       	ldd	r18, Y+1	; 0x01
    33b8:	3a 81       	ldd	r19, Y+2	; 0x02
    33ba:	4b 81       	ldd	r20, Y+3	; 0x03
    33bc:	5c 81       	ldd	r21, Y+4	; 0x04
    33be:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
				Page_inc = Page_inc + 0.5;
    33d6:	69 81       	ldd	r22, Y+1	; 0x01
    33d8:	7a 81       	ldd	r23, Y+2	; 0x02
    33da:	8b 81       	ldd	r24, Y+3	; 0x03
    33dc:	9c 81       	ldd	r25, Y+4	; 0x04
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	5f e3       	ldi	r21, 0x3F	; 63
    33e6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	ab 83       	std	Y+3, r26	; 0x03
    33f4:	bc 83       	std	Y+4, r27	; 0x04

	GLCD_CTRL_PORT |= (1 << CS1);	/* Select Left half of display */
	GLCD_CTRL_PORT &= ~(1 << CS2);

	GLCD_sendCommand(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
    33f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    33fa:	01 96       	adiw	r24, 0x01	; 1
    33fc:	9c 87       	std	Y+12, r25	; 0x0c
    33fe:	8b 87       	std	Y+11, r24	; 0x0b
    3400:	2e 85       	ldd	r18, Y+14	; 0x0e
    3402:	3f 85       	ldd	r19, Y+15	; 0x0f
    3404:	8b 85       	ldd	r24, Y+11	; 0x0b
    3406:	9c 85       	ldd	r25, Y+12	; 0x0c
    3408:	f9 01       	movw	r30, r18
    340a:	e8 0f       	add	r30, r24
    340c:	f9 1f       	adc	r31, r25
    340e:	80 81       	ld	r24, Z
    3410:	88 23       	and	r24, r24
    3412:	09 f0       	breq	.+2      	; 0x3416 <GLCD_displayString+0x4aa>
    3414:	df cd       	rjmp	.-1090   	; 0x2fd4 <GLCD_displayString+0x68>
				GLCD_sendCommand((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_sendCommand(COLUMN_SETTING_ADDRESS);		/* Set Y address (column=0) */
    3416:	80 e4       	ldi	r24, 0x40	; 64
    3418:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(PAGE_SETTING_ADDRESS);		/* Set x address (page=0) */
    341c:	88 eb       	ldi	r24, 0xB8	; 184
    341e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
}
    3422:	2f 96       	adiw	r28, 0x0f	; 15
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	f8 94       	cli
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	cd bf       	out	0x3d, r28	; 61
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    3436:	08 95       	ret

00003438 <DrawShape>:
 ----------------------------------------------------------------------------------------------------*/

void DrawShape(uint8 *shape_Ptr, uint8 *rowIndicator_Ptr,
		uint8 *columnIndicator_Ptr, uint8 *lowerPageIndicator_Ptr,
		uint8 *upperPageIndicator_Ptr, uint8 *nextShapeFlag_Ptr,
		uint8 *lowerState_Ptr, uint8 *upperState_Ptr) {
    3438:	af 92       	push	r10
    343a:	bf 92       	push	r11
    343c:	cf 92       	push	r12
    343e:	df 92       	push	r13
    3440:	ef 92       	push	r14
    3442:	ff 92       	push	r15
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	6f 97       	sbiw	r28, 0x1f	; 31
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	99 8b       	std	Y+17, r25	; 0x11
    345e:	88 8b       	std	Y+16, r24	; 0x10
    3460:	7b 8b       	std	Y+19, r23	; 0x13
    3462:	6a 8b       	std	Y+18, r22	; 0x12
    3464:	5d 8b       	std	Y+21, r21	; 0x15
    3466:	4c 8b       	std	Y+20, r20	; 0x14
    3468:	3f 8b       	std	Y+23, r19	; 0x17
    346a:	2e 8b       	std	Y+22, r18	; 0x16
    346c:	19 8f       	std	Y+25, r17	; 0x19
    346e:	08 8f       	std	Y+24, r16	; 0x18
    3470:	fb 8e       	std	Y+27, r15	; 0x1b
    3472:	ea 8e       	std	Y+26, r14	; 0x1a
    3474:	dd 8e       	std	Y+29, r13	; 0x1d
    3476:	cc 8e       	std	Y+28, r12	; 0x1c
    3478:	bf 8e       	std	Y+31, r11	; 0x1f
    347a:	ae 8e       	std	Y+30, r10	; 0x1e

	uint8 loopCounter = ZERO;
    347c:	1f 86       	std	Y+15, r1	; 0x0f

	cli();
    347e:	f8 94       	cli
	/* Select Right half of display */
	GLCD_CTRL_PORT |= (ONE << CS1);
    3480:	a5 e3       	ldi	r26, 0x35	; 53
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	e5 e3       	ldi	r30, 0x35	; 53
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	88 60       	ori	r24, 0x08	; 8
    348c:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(ONE << CS2);
    348e:	a5 e3       	ldi	r26, 0x35	; 53
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	e5 e3       	ldi	r30, 0x35	; 53
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	8f 7e       	andi	r24, 0xEF	; 239
    349a:	8c 93       	st	X, r24

	/* check on the page number to be sure that is a valid page number */
	if (*upperPageIndicator_Ptr <= LAST_PAGE) {
    349c:	e8 8d       	ldd	r30, Y+24	; 0x18
    349e:	f9 8d       	ldd	r31, Y+25	; 0x19
    34a0:	80 81       	ld	r24, Z
    34a2:	88 30       	cpi	r24, 0x08	; 8
    34a4:	08 f0       	brcs	.+2      	; 0x34a8 <DrawShape+0x70>
    34a6:	6c c0       	rjmp	.+216    	; 0x3580 <DrawShape+0x148>
		/* set the page number */
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);
    34a8:	e8 8d       	ldd	r30, Y+24	; 0x18
    34aa:	f9 8d       	ldd	r31, Y+25	; 0x19
    34ac:	80 81       	ld	r24, Z
    34ae:	88 54       	subi	r24, 0x48	; 72
    34b0:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>

		/* looping along the shape width */
		for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    34b4:	1f 86       	std	Y+15, r1	; 0x0f
    34b6:	60 c0       	rjmp	.+192    	; 0x3578 <DrawShape+0x140>
			/* set the column address */
			GLCD_sendCommand(
    34b8:	ec 89       	ldd	r30, Y+20	; 0x14
    34ba:	fd 89       	ldd	r31, Y+21	; 0x15
    34bc:	90 81       	ld	r25, Z
    34be:	8f 85       	ldd	r24, Y+15	; 0x0f
    34c0:	89 0f       	add	r24, r25
    34c2:	80 5c       	subi	r24, 0xC0	; 192
    34c4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
			COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr + loopCounter);
			/* read the state of the column */
			upperState_Ptr[loopCounter] = GLCD_readData();
    34c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ca:	28 2f       	mov	r18, r24
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34d2:	8c 01       	movw	r16, r24
    34d4:	02 0f       	add	r16, r18
    34d6:	13 1f       	adc	r17, r19
    34d8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    34dc:	f8 01       	movw	r30, r16
    34de:	80 83       	st	Z, r24
			/* one dummy read is required to get the state*/
			upperState_Ptr[loopCounter] = GLCD_readData();
    34e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34ea:	8c 01       	movw	r16, r24
    34ec:	02 0f       	add	r16, r18
    34ee:	13 1f       	adc	r17, r19
    34f0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    34f4:	f8 01       	movw	r30, r16
    34f6:	80 83       	st	Z, r24
			/* check if the upper part of the shape collides with another shape or not */
			if (checkUpper(upperState_Ptr[loopCounter], *rowIndicator_Ptr)
    34f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fa:	28 2f       	mov	r18, r24
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3500:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3502:	fc 01       	movw	r30, r24
    3504:	e2 0f       	add	r30, r18
    3506:	f3 1f       	adc	r31, r19
    3508:	80 81       	ld	r24, Z
    350a:	ea 89       	ldd	r30, Y+18	; 0x12
    350c:	fb 89       	ldd	r31, Y+19	; 0x13
    350e:	90 81       	ld	r25, Z
    3510:	69 2f       	mov	r22, r25
    3512:	0e 94 20 0c 	call	0x1840	; 0x1840 <checkUpper>
    3516:	68 2f       	mov	r22, r24
    3518:	70 e0       	ldi	r23, 0x00	; 0
    351a:	e8 89       	ldd	r30, Y+16	; 0x10
    351c:	f9 89       	ldd	r31, Y+17	; 0x11
    351e:	80 81       	ld	r24, Z
    3520:	48 2f       	mov	r20, r24
    3522:	50 e0       	ldi	r21, 0x00	; 0
    3524:	8f 85       	ldd	r24, Y+15	; 0x0f
    3526:	28 2f       	mov	r18, r24
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	ca 01       	movw	r24, r20
    352c:	88 0f       	add	r24, r24
    352e:	99 1f       	adc	r25, r25
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	82 0f       	add	r24, r18
    353a:	93 1f       	adc	r25, r19
    353c:	fc 01       	movw	r30, r24
    353e:	eb 53       	subi	r30, 0x3B	; 59
    3540:	fc 4f       	sbci	r31, 0xFC	; 252
    3542:	80 81       	ld	r24, Z
    3544:	28 2f       	mov	r18, r24
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	ea 89       	ldd	r30, Y+18	; 0x12
    354a:	fb 89       	ldd	r31, Y+19	; 0x13
    354c:	80 81       	ld	r24, Z
    354e:	88 2f       	mov	r24, r24
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	a9 01       	movw	r20, r18
    3554:	02 c0       	rjmp	.+4      	; 0x355a <DrawShape+0x122>
    3556:	44 0f       	add	r20, r20
    3558:	55 1f       	adc	r21, r21
    355a:	8a 95       	dec	r24
    355c:	e2 f7       	brpl	.-8      	; 0x3556 <DrawShape+0x11e>
    355e:	ca 01       	movw	r24, r20
    3560:	86 23       	and	r24, r22
    3562:	97 23       	and	r25, r23
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	29 f0       	breq	.+10     	; 0x3572 <DrawShape+0x13a>
					& (((shapes[*shape_Ptr][loopCounter]) << (*rowIndicator_Ptr)))) {

				/* set the nextShapeFlag to ONE ( indication of the collision ) */
				*nextShapeFlag_Ptr = ONE;
    3568:	ea 8d       	ldd	r30, Y+26	; 0x1a
    356a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	80 83       	st	Z, r24
    3570:	07 c0       	rjmp	.+14     	; 0x3580 <DrawShape+0x148>
	if (*upperPageIndicator_Ptr <= LAST_PAGE) {
		/* set the page number */
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);

		/* looping along the shape width */
		for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    3572:	8f 85       	ldd	r24, Y+15	; 0x0f
    3574:	8f 5f       	subi	r24, 0xFF	; 255
    3576:	8f 87       	std	Y+15, r24	; 0x0f
    3578:	8f 85       	ldd	r24, Y+15	; 0x0f
    357a:	88 30       	cpi	r24, 0x08	; 8
    357c:	08 f4       	brcc	.+2      	; 0x3580 <DrawShape+0x148>
    357e:	9c cf       	rjmp	.-200    	; 0x34b8 <DrawShape+0x80>
			}

		}
	}
	/* check if the shape collides or not */
	if (*nextShapeFlag_Ptr == ONE) {
    3580:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3582:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3584:	80 81       	ld	r24, Z
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	09 f4       	brne	.+2      	; 0x358c <DrawShape+0x154>
    358a:	76 c0       	rjmp	.+236    	; 0x3678 <DrawShape+0x240>

	} else {
		/* if it doesn't collide, check the lower part of the shape collides or not */
		/* check on the page number to be sure that is a valid page number */
		if (*lowerPageIndicator_Ptr <= LAST_PAGE) {
    358c:	ee 89       	ldd	r30, Y+22	; 0x16
    358e:	ff 89       	ldd	r31, Y+23	; 0x17
    3590:	80 81       	ld	r24, Z
    3592:	88 30       	cpi	r24, 0x08	; 8
    3594:	08 f0       	brcs	.+2      	; 0x3598 <DrawShape+0x160>
    3596:	70 c0       	rjmp	.+224    	; 0x3678 <DrawShape+0x240>
			/* set the page address */
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + *lowerPageIndicator_Ptr);
    3598:	ee 89       	ldd	r30, Y+22	; 0x16
    359a:	ff 89       	ldd	r31, Y+23	; 0x17
    359c:	80 81       	ld	r24, Z
    359e:	88 54       	subi	r24, 0x48	; 72
    35a0:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>

			for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    35a4:	1f 86       	std	Y+15, r1	; 0x0f
    35a6:	64 c0       	rjmp	.+200    	; 0x3670 <DrawShape+0x238>
				/* set the column address */
				GLCD_sendCommand(
    35a8:	ec 89       	ldd	r30, Y+20	; 0x14
    35aa:	fd 89       	ldd	r31, Y+21	; 0x15
    35ac:	90 81       	ld	r25, Z
    35ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b0:	89 0f       	add	r24, r25
    35b2:	80 5c       	subi	r24, 0xC0	; 192
    35b4:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
				COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr + loopCounter);
				/* read the state of the column */
				lowerState_Ptr[loopCounter] = GLCD_readData();
    35b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    35c2:	8c 01       	movw	r16, r24
    35c4:	02 0f       	add	r16, r18
    35c6:	13 1f       	adc	r17, r19
    35c8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    35cc:	f8 01       	movw	r30, r16
    35ce:	80 83       	st	Z, r24
				/* one dummy read is required to get the state*/
				lowerState_Ptr[loopCounter] = GLCD_readData();
    35d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d2:	28 2f       	mov	r18, r24
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    35da:	8c 01       	movw	r16, r24
    35dc:	02 0f       	add	r16, r18
    35de:	13 1f       	adc	r17, r19
    35e0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <GLCD_readData>
    35e4:	f8 01       	movw	r30, r16
    35e6:	80 83       	st	Z, r24
				/* check if the upper part of the shape collides with another shape or not */
				if (checkLower(lowerState_Ptr[loopCounter], *rowIndicator_Ptr)
    35e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    35f2:	fc 01       	movw	r30, r24
    35f4:	e2 0f       	add	r30, r18
    35f6:	f3 1f       	adc	r31, r19
    35f8:	80 81       	ld	r24, Z
    35fa:	ea 89       	ldd	r30, Y+18	; 0x12
    35fc:	fb 89       	ldd	r31, Y+19	; 0x13
    35fe:	90 81       	ld	r25, Z
    3600:	69 2f       	mov	r22, r25
    3602:	0e 94 3a 0c 	call	0x1874	; 0x1874 <checkLower>
    3606:	68 2f       	mov	r22, r24
    3608:	70 e0       	ldi	r23, 0x00	; 0
    360a:	e8 89       	ldd	r30, Y+16	; 0x10
    360c:	f9 89       	ldd	r31, Y+17	; 0x11
    360e:	80 81       	ld	r24, Z
    3610:	48 2f       	mov	r20, r24
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	8f 85       	ldd	r24, Y+15	; 0x0f
    3616:	28 2f       	mov	r18, r24
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	ca 01       	movw	r24, r20
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	88 0f       	add	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	88 0f       	add	r24, r24
    3626:	99 1f       	adc	r25, r25
    3628:	82 0f       	add	r24, r18
    362a:	93 1f       	adc	r25, r19
    362c:	fc 01       	movw	r30, r24
    362e:	eb 53       	subi	r30, 0x3B	; 59
    3630:	fc 4f       	sbci	r31, 0xFC	; 252
    3632:	80 81       	ld	r24, Z
    3634:	48 2f       	mov	r20, r24
    3636:	50 e0       	ldi	r21, 0x00	; 0
    3638:	ea 89       	ldd	r30, Y+18	; 0x12
    363a:	fb 89       	ldd	r31, Y+19	; 0x13
    363c:	80 81       	ld	r24, Z
    363e:	28 2f       	mov	r18, r24
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	88 e0       	ldi	r24, 0x08	; 8
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	82 1b       	sub	r24, r18
    3648:	93 0b       	sbc	r25, r19
    364a:	9a 01       	movw	r18, r20
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <DrawShape+0x21a>
    364e:	35 95       	asr	r19
    3650:	27 95       	ror	r18
    3652:	8a 95       	dec	r24
    3654:	e2 f7       	brpl	.-8      	; 0x364e <DrawShape+0x216>
    3656:	c9 01       	movw	r24, r18
    3658:	86 23       	and	r24, r22
    365a:	97 23       	and	r25, r23
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	29 f0       	breq	.+10     	; 0x366a <DrawShape+0x232>
						& (((shapes[*shape_Ptr][loopCounter])
								>> ((NUM_BITS_IN_BYTE - *rowIndicator_Ptr))))) {
					/* set the nextShapeFlag to ONE ( indication of the collision ) */
					*nextShapeFlag_Ptr = ONE;
    3660:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3662:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	80 83       	st	Z, r24
    3668:	07 c0       	rjmp	.+14     	; 0x3678 <DrawShape+0x240>
		/* check on the page number to be sure that is a valid page number */
		if (*lowerPageIndicator_Ptr <= LAST_PAGE) {
			/* set the page address */
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + *lowerPageIndicator_Ptr);

			for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    366a:	8f 85       	ldd	r24, Y+15	; 0x0f
    366c:	8f 5f       	subi	r24, 0xFF	; 255
    366e:	8f 87       	std	Y+15, r24	; 0x0f
    3670:	8f 85       	ldd	r24, Y+15	; 0x0f
    3672:	88 30       	cpi	r24, 0x08	; 8
    3674:	08 f4       	brcc	.+2      	; 0x3678 <DrawShape+0x240>
    3676:	98 cf       	rjmp	.-208    	; 0x35a8 <DrawShape+0x170>
	}
	/* check if the shape collides or not
	 * if yes, skip display the current shape
	 * if not, displaying the current shape
	 */
	if (*nextShapeFlag_Ptr == ONE) {
    3678:	ea 8d       	ldd	r30, Y+26	; 0x1a
    367a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    367c:	80 81       	ld	r24, Z
    367e:	81 30       	cpi	r24, 0x01	; 1
    3680:	51 f4       	brne	.+20     	; 0x3696 <DrawShape+0x25e>

		/* if current page is the top page, this means that the player losses the game */
		if (*upperPageIndicator_Ptr == STARTED_UPPER_PAGE) {
    3682:	e8 8d       	ldd	r30, Y+24	; 0x18
    3684:	f9 8d       	ldd	r31, Y+25	; 0x19
    3686:	80 81       	ld	r24, Z
    3688:	88 23       	and	r24, r24
    368a:	09 f0       	breq	.+2      	; 0x368e <DrawShape+0x256>
    368c:	5e c1       	rjmp	.+700    	; 0x394a <DrawShape+0x512>
			/* set the loseFlag to ONE ( indication of losing the game ) */
			loseFlag = ONE;
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	80 93 16 04 	sts	0x0416, r24
    3694:	5a c1       	rjmp	.+692    	; 0x394a <DrawShape+0x512>
		}

	} else {

		/* check on the page number to be sure that is a valid page number */
		if ((*upperPageIndicator_Ptr <= LAST_PAGE)) {
    3696:	e8 8d       	ldd	r30, Y+24	; 0x18
    3698:	f9 8d       	ldd	r31, Y+25	; 0x19
    369a:	80 81       	ld	r24, Z
    369c:	88 30       	cpi	r24, 0x08	; 8
    369e:	08 f0       	brcs	.+2      	; 0x36a2 <DrawShape+0x26a>
    36a0:	6a c0       	rjmp	.+212    	; 0x3776 <DrawShape+0x33e>
			/* set the page address */
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);
    36a2:	e8 8d       	ldd	r30, Y+24	; 0x18
    36a4:	f9 8d       	ldd	r31, Y+25	; 0x19
    36a6:	80 81       	ld	r24, Z
    36a8:	88 54       	subi	r24, 0x48	; 72
    36aa:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
			/* set the column address */
			GLCD_sendCommand(
    36ae:	ec 89       	ldd	r30, Y+20	; 0x14
    36b0:	fd 89       	ldd	r31, Y+21	; 0x15
    36b2:	80 81       	ld	r24, Z
    36b4:	80 5c       	subi	r24, 0xC0	; 192
    36b6:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
			COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr);

			for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    36ba:	1f 86       	std	Y+15, r1	; 0x0f
    36bc:	58 c0       	rjmp	.+176    	; 0x376e <DrawShape+0x336>
				/*display each column of the shape */
				GLCD_sendData(
    36be:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c0:	28 2f       	mov	r18, r24
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    36c8:	fc 01       	movw	r30, r24
    36ca:	e2 0f       	add	r30, r18
    36cc:	f3 1f       	adc	r31, r19
    36ce:	80 81       	ld	r24, Z
    36d0:	68 2f       	mov	r22, r24
    36d2:	e8 89       	ldd	r30, Y+16	; 0x10
    36d4:	f9 89       	ldd	r31, Y+17	; 0x11
    36d6:	80 81       	ld	r24, Z
    36d8:	48 2f       	mov	r20, r24
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36de:	28 2f       	mov	r18, r24
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	ca 01       	movw	r24, r20
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	88 0f       	add	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	88 0f       	add	r24, r24
    36ee:	99 1f       	adc	r25, r25
    36f0:	82 0f       	add	r24, r18
    36f2:	93 1f       	adc	r25, r19
    36f4:	fc 01       	movw	r30, r24
    36f6:	eb 53       	subi	r30, 0x3B	; 59
    36f8:	fc 4f       	sbci	r31, 0xFC	; 252
    36fa:	80 81       	ld	r24, Z
    36fc:	28 2f       	mov	r18, r24
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	ea 89       	ldd	r30, Y+18	; 0x12
    3702:	fb 89       	ldd	r31, Y+19	; 0x13
    3704:	80 81       	ld	r24, Z
    3706:	88 2f       	mov	r24, r24
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	a9 01       	movw	r20, r18
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <DrawShape+0x2da>
    370e:	44 0f       	add	r20, r20
    3710:	55 1f       	adc	r21, r21
    3712:	8a 95       	dec	r24
    3714:	e2 f7       	brpl	.-8      	; 0x370e <DrawShape+0x2d6>
    3716:	ca 01       	movw	r24, r20
    3718:	80 95       	com	r24
    371a:	68 23       	and	r22, r24
    371c:	e8 89       	ldd	r30, Y+16	; 0x10
    371e:	f9 89       	ldd	r31, Y+17	; 0x11
    3720:	80 81       	ld	r24, Z
    3722:	48 2f       	mov	r20, r24
    3724:	50 e0       	ldi	r21, 0x00	; 0
    3726:	8f 85       	ldd	r24, Y+15	; 0x0f
    3728:	28 2f       	mov	r18, r24
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	ca 01       	movw	r24, r20
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	88 0f       	add	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	82 0f       	add	r24, r18
    373c:	93 1f       	adc	r25, r19
    373e:	fc 01       	movw	r30, r24
    3740:	eb 53       	subi	r30, 0x3B	; 59
    3742:	fc 4f       	sbci	r31, 0xFC	; 252
    3744:	80 81       	ld	r24, Z
    3746:	28 2f       	mov	r18, r24
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	ea 89       	ldd	r30, Y+18	; 0x12
    374c:	fb 89       	ldd	r31, Y+19	; 0x13
    374e:	80 81       	ld	r24, Z
    3750:	88 2f       	mov	r24, r24
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	f9 01       	movw	r30, r18
    3756:	02 c0       	rjmp	.+4      	; 0x375c <DrawShape+0x324>
    3758:	ee 0f       	add	r30, r30
    375a:	ff 1f       	adc	r31, r31
    375c:	8a 95       	dec	r24
    375e:	e2 f7       	brpl	.-8      	; 0x3758 <DrawShape+0x320>
    3760:	cf 01       	movw	r24, r30
    3762:	86 2b       	or	r24, r22
    3764:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);
			/* set the column address */
			GLCD_sendCommand(
			COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr);

			for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    3768:	8f 85       	ldd	r24, Y+15	; 0x0f
    376a:	8f 5f       	subi	r24, 0xFF	; 255
    376c:	8f 87       	std	Y+15, r24	; 0x0f
    376e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3770:	88 30       	cpi	r24, 0x08	; 8
    3772:	08 f4       	brcc	.+2      	; 0x3776 <DrawShape+0x33e>
    3774:	a4 cf       	rjmp	.-184    	; 0x36be <DrawShape+0x286>
								| (((shapes[*shape_Ptr][loopCounter])
										<< (*rowIndicator_Ptr))));
			}
		}
		/* check on the page number to be sure that is a valid page number */
		if ((*lowerPageIndicator_Ptr <= LAST_PAGE)) {
    3776:	ee 89       	ldd	r30, Y+22	; 0x16
    3778:	ff 89       	ldd	r31, Y+23	; 0x17
    377a:	80 81       	ld	r24, Z
    377c:	88 30       	cpi	r24, 0x08	; 8
    377e:	08 f0       	brcs	.+2      	; 0x3782 <DrawShape+0x34a>
    3780:	72 c0       	rjmp	.+228    	; 0x3866 <DrawShape+0x42e>
			/* set the page address */
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + *lowerPageIndicator_Ptr);
    3782:	ee 89       	ldd	r30, Y+22	; 0x16
    3784:	ff 89       	ldd	r31, Y+23	; 0x17
    3786:	80 81       	ld	r24, Z
    3788:	88 54       	subi	r24, 0x48	; 72
    378a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
			/* set the column address */
			GLCD_sendCommand(
    378e:	ec 89       	ldd	r30, Y+20	; 0x14
    3790:	fd 89       	ldd	r31, Y+21	; 0x15
    3792:	80 81       	ld	r24, Z
    3794:	80 5c       	subi	r24, 0xC0	; 192
    3796:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
			COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr);

			for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    379a:	1f 86       	std	Y+15, r1	; 0x0f
    379c:	60 c0       	rjmp	.+192    	; 0x385e <DrawShape+0x426>
				/*display each column of the shape */
				GLCD_sendData(
    379e:	8f 85       	ldd	r24, Y+15	; 0x0f
    37a0:	28 2f       	mov	r18, r24
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37a8:	fc 01       	movw	r30, r24
    37aa:	e2 0f       	add	r30, r18
    37ac:	f3 1f       	adc	r31, r19
    37ae:	80 81       	ld	r24, Z
    37b0:	68 2f       	mov	r22, r24
    37b2:	e8 89       	ldd	r30, Y+16	; 0x10
    37b4:	f9 89       	ldd	r31, Y+17	; 0x11
    37b6:	80 81       	ld	r24, Z
    37b8:	48 2f       	mov	r20, r24
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    37be:	28 2f       	mov	r18, r24
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	ca 01       	movw	r24, r20
    37c4:	88 0f       	add	r24, r24
    37c6:	99 1f       	adc	r25, r25
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	88 0f       	add	r24, r24
    37ce:	99 1f       	adc	r25, r25
    37d0:	82 0f       	add	r24, r18
    37d2:	93 1f       	adc	r25, r19
    37d4:	fc 01       	movw	r30, r24
    37d6:	eb 53       	subi	r30, 0x3B	; 59
    37d8:	fc 4f       	sbci	r31, 0xFC	; 252
    37da:	80 81       	ld	r24, Z
    37dc:	48 2f       	mov	r20, r24
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	ea 89       	ldd	r30, Y+18	; 0x12
    37e2:	fb 89       	ldd	r31, Y+19	; 0x13
    37e4:	80 81       	ld	r24, Z
    37e6:	28 2f       	mov	r18, r24
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	88 e0       	ldi	r24, 0x08	; 8
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	82 1b       	sub	r24, r18
    37f0:	93 0b       	sbc	r25, r19
    37f2:	9a 01       	movw	r18, r20
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <DrawShape+0x3c2>
    37f6:	35 95       	asr	r19
    37f8:	27 95       	ror	r18
    37fa:	8a 95       	dec	r24
    37fc:	e2 f7       	brpl	.-8      	; 0x37f6 <DrawShape+0x3be>
    37fe:	c9 01       	movw	r24, r18
    3800:	80 95       	com	r24
    3802:	68 23       	and	r22, r24
    3804:	e8 89       	ldd	r30, Y+16	; 0x10
    3806:	f9 89       	ldd	r31, Y+17	; 0x11
    3808:	80 81       	ld	r24, Z
    380a:	48 2f       	mov	r20, r24
    380c:	50 e0       	ldi	r21, 0x00	; 0
    380e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	ca 01       	movw	r24, r20
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	82 0f       	add	r24, r18
    3824:	93 1f       	adc	r25, r19
    3826:	fc 01       	movw	r30, r24
    3828:	eb 53       	subi	r30, 0x3B	; 59
    382a:	fc 4f       	sbci	r31, 0xFC	; 252
    382c:	80 81       	ld	r24, Z
    382e:	48 2f       	mov	r20, r24
    3830:	50 e0       	ldi	r21, 0x00	; 0
    3832:	ea 89       	ldd	r30, Y+18	; 0x12
    3834:	fb 89       	ldd	r31, Y+19	; 0x13
    3836:	80 81       	ld	r24, Z
    3838:	28 2f       	mov	r18, r24
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	88 e0       	ldi	r24, 0x08	; 8
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	82 1b       	sub	r24, r18
    3842:	93 0b       	sbc	r25, r19
    3844:	fa 01       	movw	r30, r20
    3846:	02 c0       	rjmp	.+4      	; 0x384c <DrawShape+0x414>
    3848:	f5 95       	asr	r31
    384a:	e7 95       	ror	r30
    384c:	8a 95       	dec	r24
    384e:	e2 f7       	brpl	.-8      	; 0x3848 <DrawShape+0x410>
    3850:	cf 01       	movw	r24, r30
    3852:	86 2b       	or	r24, r22
    3854:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
			GLCD_sendCommand(PAGE_SETTING_ADDRESS + *lowerPageIndicator_Ptr);
			/* set the column address */
			GLCD_sendCommand(
			COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr);

			for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    3858:	8f 85       	ldd	r24, Y+15	; 0x0f
    385a:	8f 5f       	subi	r24, 0xFF	; 255
    385c:	8f 87       	std	Y+15, r24	; 0x0f
    385e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3860:	88 30       	cpi	r24, 0x08	; 8
    3862:	08 f4       	brcc	.+2      	; 0x3866 <DrawShape+0x42e>
    3864:	9c cf       	rjmp	.-200    	; 0x379e <DrawShape+0x366>
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	ac e8       	ldi	r26, 0x8C	; 140
    386c:	b2 e4       	ldi	r27, 0x42	; 66
    386e:	8b 87       	std	Y+11, r24	; 0x0b
    3870:	9c 87       	std	Y+12, r25	; 0x0c
    3872:	ad 87       	std	Y+13, r26	; 0x0d
    3874:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3876:	6b 85       	ldd	r22, Y+11	; 0x0b
    3878:	7c 85       	ldd	r23, Y+12	; 0x0c
    387a:	8d 85       	ldd	r24, Y+13	; 0x0d
    387c:	9e 85       	ldd	r25, Y+14	; 0x0e
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	4a ef       	ldi	r20, 0xFA	; 250
    3884:	54 e4       	ldi	r21, 0x44	; 68
    3886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	8f 83       	std	Y+7, r24	; 0x07
    3890:	98 87       	std	Y+8, r25	; 0x08
    3892:	a9 87       	std	Y+9, r26	; 0x09
    3894:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	78 85       	ldd	r23, Y+8	; 0x08
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	40 e8       	ldi	r20, 0x80	; 128
    38a4:	5f e3       	ldi	r21, 0x3F	; 63
    38a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38aa:	88 23       	and	r24, r24
    38ac:	2c f4       	brge	.+10     	; 0x38b8 <DrawShape+0x480>
		__ticks = 1;
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	9e 83       	std	Y+6, r25	; 0x06
    38b4:	8d 83       	std	Y+5, r24	; 0x05
    38b6:	3f c0       	rjmp	.+126    	; 0x3936 <DrawShape+0x4fe>
	else if (__tmp > 65535)
    38b8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ba:	78 85       	ldd	r23, Y+8	; 0x08
    38bc:	89 85       	ldd	r24, Y+9	; 0x09
    38be:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	3f ef       	ldi	r19, 0xFF	; 255
    38c4:	4f e7       	ldi	r20, 0x7F	; 127
    38c6:	57 e4       	ldi	r21, 0x47	; 71
    38c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38cc:	18 16       	cp	r1, r24
    38ce:	4c f5       	brge	.+82     	; 0x3922 <DrawShape+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	40 e2       	ldi	r20, 0x20	; 32
    38de:	51 e4       	ldi	r21, 0x41	; 65
    38e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	bc 01       	movw	r22, r24
    38ea:	cd 01       	movw	r24, r26
    38ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	9e 83       	std	Y+6, r25	; 0x06
    38f6:	8d 83       	std	Y+5, r24	; 0x05
    38f8:	0f c0       	rjmp	.+30     	; 0x3918 <DrawShape+0x4e0>
    38fa:	88 ec       	ldi	r24, 0xC8	; 200
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9c 83       	std	Y+4, r25	; 0x04
    3900:	8b 83       	std	Y+3, r24	; 0x03
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	9c 81       	ldd	r25, Y+4	; 0x04
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	f1 f7       	brne	.-4      	; 0x3906 <DrawShape+0x4ce>
    390a:	9c 83       	std	Y+4, r25	; 0x04
    390c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	9e 83       	std	Y+6, r25	; 0x06
    3916:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3918:	8d 81       	ldd	r24, Y+5	; 0x05
    391a:	9e 81       	ldd	r25, Y+6	; 0x06
    391c:	00 97       	sbiw	r24, 0x00	; 0
    391e:	69 f7       	brne	.-38     	; 0x38fa <DrawShape+0x4c2>
    3920:	14 c0       	rjmp	.+40     	; 0x394a <DrawShape+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3922:	6f 81       	ldd	r22, Y+7	; 0x07
    3924:	78 85       	ldd	r23, Y+8	; 0x08
    3926:	89 85       	ldd	r24, Y+9	; 0x09
    3928:	9a 85       	ldd	r25, Y+10	; 0x0a
    392a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	9e 83       	std	Y+6, r25	; 0x06
    3934:	8d 83       	std	Y+5, r24	; 0x05
    3936:	8d 81       	ldd	r24, Y+5	; 0x05
    3938:	9e 81       	ldd	r25, Y+6	; 0x06
    393a:	9a 83       	std	Y+2, r25	; 0x02
    393c:	89 83       	std	Y+1, r24	; 0x01
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	9a 81       	ldd	r25, Y+2	; 0x02
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	f1 f7       	brne	.-4      	; 0x3942 <DrawShape+0x50a>
    3946:	9a 83       	std	Y+2, r25	; 0x02
    3948:	89 83       	std	Y+1, r24	; 0x01
												- *rowIndicator_Ptr)))));
			}
		}
		_delay_ms(DELAY_AFTER_DRAWING_TIME);
	}
	sei();
    394a:	78 94       	sei
}
    394c:	6f 96       	adiw	r28, 0x1f	; 31
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	de bf       	out	0x3e, r29	; 62
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	cd bf       	out	0x3d, r28	; 61
    3958:	cf 91       	pop	r28
    395a:	df 91       	pop	r29
    395c:	1f 91       	pop	r17
    395e:	0f 91       	pop	r16
    3960:	ff 90       	pop	r15
    3962:	ef 90       	pop	r14
    3964:	df 90       	pop	r13
    3966:	cf 90       	pop	r12
    3968:	bf 90       	pop	r11
    396a:	af 90       	pop	r10
    396c:	08 95       	ret

0000396e <EraseShape>:
 ----------------------------------------------------------------------------------------------------*/

void EraseShape(uint8 *shape_Ptr, uint8 *rowIndicator_Ptr,
		uint8 *columnIndicator_Ptr, uint8 *lowerPageIndicator_Ptr,
		uint8 *upperPageIndicator_Ptr, uint8 *lowerState_Ptr,
		uint8 *upperState_Ptr) {
    396e:	cf 92       	push	r12
    3970:	df 92       	push	r13
    3972:	ef 92       	push	r14
    3974:	ff 92       	push	r15
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	df 93       	push	r29
    397c:	cf 93       	push	r28
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62
    3982:	2f 97       	sbiw	r28, 0x0f	; 15
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	f8 94       	cli
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	cd bf       	out	0x3d, r28	; 61
    398e:	9b 83       	std	Y+3, r25	; 0x03
    3990:	8a 83       	std	Y+2, r24	; 0x02
    3992:	7d 83       	std	Y+5, r23	; 0x05
    3994:	6c 83       	std	Y+4, r22	; 0x04
    3996:	5f 83       	std	Y+7, r21	; 0x07
    3998:	4e 83       	std	Y+6, r20	; 0x06
    399a:	39 87       	std	Y+9, r19	; 0x09
    399c:	28 87       	std	Y+8, r18	; 0x08
    399e:	1b 87       	std	Y+11, r17	; 0x0b
    39a0:	0a 87       	std	Y+10, r16	; 0x0a
    39a2:	fd 86       	std	Y+13, r15	; 0x0d
    39a4:	ec 86       	std	Y+12, r14	; 0x0c
    39a6:	df 86       	std	Y+15, r13	; 0x0f
    39a8:	ce 86       	std	Y+14, r12	; 0x0e

	uint8 loopCounter = ZERO;
    39aa:	19 82       	std	Y+1, r1	; 0x01
	cli();
    39ac:	f8 94       	cli
	GLCD_CTRL_PORT |= (ONE << CS1); /* Select Right half of display */
    39ae:	a5 e3       	ldi	r26, 0x35	; 53
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	e5 e3       	ldi	r30, 0x35	; 53
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	88 60       	ori	r24, 0x08	; 8
    39ba:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(ONE << CS2);
    39bc:	a5 e3       	ldi	r26, 0x35	; 53
    39be:	b0 e0       	ldi	r27, 0x00	; 0
    39c0:	e5 e3       	ldi	r30, 0x35	; 53
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	80 81       	ld	r24, Z
    39c6:	8f 7e       	andi	r24, 0xEF	; 239
    39c8:	8c 93       	st	X, r24

	/* check on the page number to be sure that is a valid page number */
	if ((*upperPageIndicator_Ptr <= LAST_PAGE)) {
    39ca:	ea 85       	ldd	r30, Y+10	; 0x0a
    39cc:	fb 85       	ldd	r31, Y+11	; 0x0b
    39ce:	80 81       	ld	r24, Z
    39d0:	88 30       	cpi	r24, 0x08	; 8
    39d2:	08 f0       	brcs	.+2      	; 0x39d6 <EraseShape+0x68>
    39d4:	45 c0       	rjmp	.+138    	; 0x3a60 <EraseShape+0xf2>
		/* set the page address */
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);
    39d6:	ea 85       	ldd	r30, Y+10	; 0x0a
    39d8:	fb 85       	ldd	r31, Y+11	; 0x0b
    39da:	80 81       	ld	r24, Z
    39dc:	88 54       	subi	r24, 0x48	; 72
    39de:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		/* set the column address */
		GLCD_sendCommand(
    39e2:	ee 81       	ldd	r30, Y+6	; 0x06
    39e4:	ff 81       	ldd	r31, Y+7	; 0x07
    39e6:	80 81       	ld	r24, Z
    39e8:	80 5c       	subi	r24, 0xC0	; 192
    39ea:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr);

		for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    39ee:	19 82       	std	Y+1, r1	; 0x01
    39f0:	34 c0       	rjmp	.+104    	; 0x3a5a <EraseShape+0xec>
			/* erasing the upper part of the shape */
			GLCD_sendData(
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	28 2f       	mov	r18, r24
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    39fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    39fc:	fc 01       	movw	r30, r24
    39fe:	e2 0f       	add	r30, r18
    3a00:	f3 1f       	adc	r31, r19
    3a02:	80 81       	ld	r24, Z
    3a04:	68 2f       	mov	r22, r24
    3a06:	ea 81       	ldd	r30, Y+2	; 0x02
    3a08:	fb 81       	ldd	r31, Y+3	; 0x03
    3a0a:	80 81       	ld	r24, Z
    3a0c:	48 2f       	mov	r20, r24
    3a0e:	50 e0       	ldi	r21, 0x00	; 0
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	28 2f       	mov	r18, r24
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	ca 01       	movw	r24, r20
    3a18:	88 0f       	add	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	88 0f       	add	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	82 0f       	add	r24, r18
    3a26:	93 1f       	adc	r25, r19
    3a28:	fc 01       	movw	r30, r24
    3a2a:	eb 53       	subi	r30, 0x3B	; 59
    3a2c:	fc 4f       	sbci	r31, 0xFC	; 252
    3a2e:	80 81       	ld	r24, Z
    3a30:	28 2f       	mov	r18, r24
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	ec 81       	ldd	r30, Y+4	; 0x04
    3a36:	fd 81       	ldd	r31, Y+5	; 0x05
    3a38:	80 81       	ld	r24, Z
    3a3a:	88 2f       	mov	r24, r24
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	a9 01       	movw	r20, r18
    3a40:	02 c0       	rjmp	.+4      	; 0x3a46 <EraseShape+0xd8>
    3a42:	44 0f       	add	r20, r20
    3a44:	55 1f       	adc	r21, r21
    3a46:	8a 95       	dec	r24
    3a48:	e2 f7       	brpl	.-8      	; 0x3a42 <EraseShape+0xd4>
    3a4a:	ca 01       	movw	r24, r20
    3a4c:	80 95       	com	r24
    3a4e:	86 23       	and	r24, r22
    3a50:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *upperPageIndicator_Ptr);
		/* set the column address */
		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr);

		for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    3a54:	89 81       	ldd	r24, Y+1	; 0x01
    3a56:	8f 5f       	subi	r24, 0xFF	; 255
    3a58:	89 83       	std	Y+1, r24	; 0x01
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	88 30       	cpi	r24, 0x08	; 8
    3a5e:	48 f2       	brcs	.-110    	; 0x39f2 <EraseShape+0x84>
									<< (*rowIndicator_Ptr))));
		}

	}
	/* check on the page number to be sure that is a valid page number */
	if ((*lowerPageIndicator_Ptr <= LAST_PAGE)) {
    3a60:	e8 85       	ldd	r30, Y+8	; 0x08
    3a62:	f9 85       	ldd	r31, Y+9	; 0x09
    3a64:	80 81       	ld	r24, Z
    3a66:	88 30       	cpi	r24, 0x08	; 8
    3a68:	08 f0       	brcs	.+2      	; 0x3a6c <EraseShape+0xfe>
    3a6a:	49 c0       	rjmp	.+146    	; 0x3afe <EraseShape+0x190>
		/* set the page address */
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *lowerPageIndicator_Ptr);
    3a6c:	e8 85       	ldd	r30, Y+8	; 0x08
    3a6e:	f9 85       	ldd	r31, Y+9	; 0x09
    3a70:	80 81       	ld	r24, Z
    3a72:	88 54       	subi	r24, 0x48	; 72
    3a74:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		/* set the column address */
		GLCD_sendCommand(
    3a78:	ee 81       	ldd	r30, Y+6	; 0x06
    3a7a:	ff 81       	ldd	r31, Y+7	; 0x07
    3a7c:	80 81       	ld	r24, Z
    3a7e:	80 5c       	subi	r24, 0xC0	; 192
    3a80:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
		COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr);

		for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    3a84:	19 82       	std	Y+1, r1	; 0x01
    3a86:	38 c0       	rjmp	.+112    	; 0x3af8 <EraseShape+0x18a>
			/* erasing the lower part of the shape */
			GLCD_sendData(
    3a88:	89 81       	ldd	r24, Y+1	; 0x01
    3a8a:	28 2f       	mov	r18, r24
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a90:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a92:	fc 01       	movw	r30, r24
    3a94:	e2 0f       	add	r30, r18
    3a96:	f3 1f       	adc	r31, r19
    3a98:	80 81       	ld	r24, Z
    3a9a:	68 2f       	mov	r22, r24
    3a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    3aa0:	80 81       	ld	r24, Z
    3aa2:	48 2f       	mov	r20, r24
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	28 2f       	mov	r18, r24
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	ca 01       	movw	r24, r20
    3aae:	88 0f       	add	r24, r24
    3ab0:	99 1f       	adc	r25, r25
    3ab2:	88 0f       	add	r24, r24
    3ab4:	99 1f       	adc	r25, r25
    3ab6:	88 0f       	add	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	82 0f       	add	r24, r18
    3abc:	93 1f       	adc	r25, r19
    3abe:	fc 01       	movw	r30, r24
    3ac0:	eb 53       	subi	r30, 0x3B	; 59
    3ac2:	fc 4f       	sbci	r31, 0xFC	; 252
    3ac4:	80 81       	ld	r24, Z
    3ac6:	48 2f       	mov	r20, r24
    3ac8:	50 e0       	ldi	r21, 0x00	; 0
    3aca:	ec 81       	ldd	r30, Y+4	; 0x04
    3acc:	fd 81       	ldd	r31, Y+5	; 0x05
    3ace:	80 81       	ld	r24, Z
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	88 e0       	ldi	r24, 0x08	; 8
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	82 1b       	sub	r24, r18
    3ada:	93 0b       	sbc	r25, r19
    3adc:	9a 01       	movw	r18, r20
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <EraseShape+0x176>
    3ae0:	35 95       	asr	r19
    3ae2:	27 95       	ror	r18
    3ae4:	8a 95       	dec	r24
    3ae6:	e2 f7       	brpl	.-8      	; 0x3ae0 <EraseShape+0x172>
    3ae8:	c9 01       	movw	r24, r18
    3aea:	80 95       	com	r24
    3aec:	86 23       	and	r24, r22
    3aee:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
		GLCD_sendCommand(PAGE_SETTING_ADDRESS + *lowerPageIndicator_Ptr);
		/* set the column address */
		GLCD_sendCommand(
		COLUMN_SETTING_ADDRESS + *columnIndicator_Ptr);

		for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	8f 5f       	subi	r24, 0xFF	; 255
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	88 30       	cpi	r24, 0x08	; 8
    3afc:	28 f2       	brcs	.-118    	; 0x3a88 <EraseShape+0x11a>
							& ~((shapes[*shape_Ptr][loopCounter])
									>> ((NUM_BITS_IN_BYTE - *rowIndicator_Ptr)))));
		}

	}
	sei();
    3afe:	78 94       	sei
}
    3b00:	2f 96       	adiw	r28, 0x0f	; 15
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	1f 91       	pop	r17
    3b12:	0f 91       	pop	r16
    3b14:	ff 90       	pop	r15
    3b16:	ef 90       	pop	r14
    3b18:	df 90       	pop	r13
    3b1a:	cf 90       	pop	r12
    3b1c:	08 95       	ret

00003b1e <GenerateLocation>:
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void GenerateLocation(uint8 *shape_Ptr, uint8 *rowIndicator_Ptr,
		uint8 *upperPageIndicator_Ptr, uint8 *lowerPageIndicator_Ptr,
		uint8 *columnIndicator_Ptr) {
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	2a 97       	sbiw	r28, 0x0a	; 10
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	9a 83       	std	Y+2, r25	; 0x02
    3b38:	89 83       	std	Y+1, r24	; 0x01
    3b3a:	7c 83       	std	Y+4, r23	; 0x04
    3b3c:	6b 83       	std	Y+3, r22	; 0x03
    3b3e:	5e 83       	std	Y+6, r21	; 0x06
    3b40:	4d 83       	std	Y+5, r20	; 0x05
    3b42:	38 87       	std	Y+8, r19	; 0x08
    3b44:	2f 83       	std	Y+7, r18	; 0x07
    3b46:	1a 87       	std	Y+10, r17	; 0x0a
    3b48:	09 87       	std	Y+9, r16	; 0x09
	cli();
    3b4a:	f8 94       	cli

	/* row numbers will be 1,3,5,7 */
	(*rowIndicator_Ptr) = (*rowIndicator_Ptr) + TWO;
    3b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b50:	80 81       	ld	r24, Z
    3b52:	8e 5f       	subi	r24, 0xFE	; 254
    3b54:	eb 81       	ldd	r30, Y+3	; 0x03
    3b56:	fc 81       	ldd	r31, Y+4	; 0x04
    3b58:	80 83       	st	Z, r24

	/* check if the row number is out of range
	 * if yes, we have to increment the pages number
	 */
	if ((*rowIndicator_Ptr) == NINE) {
    3b5a:	eb 81       	ldd	r30, Y+3	; 0x03
    3b5c:	fc 81       	ldd	r31, Y+4	; 0x04
    3b5e:	80 81       	ld	r24, Z
    3b60:	89 30       	cpi	r24, 0x09	; 9
    3b62:	91 f4       	brne	.+36     	; 0x3b88 <GenerateLocation+0x6a>

		(*rowIndicator_Ptr) = ONE;
    3b64:	eb 81       	ldd	r30, Y+3	; 0x03
    3b66:	fc 81       	ldd	r31, Y+4	; 0x04
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	80 83       	st	Z, r24
		(*upperPageIndicator_Ptr)++;
    3b6c:	ed 81       	ldd	r30, Y+5	; 0x05
    3b6e:	fe 81       	ldd	r31, Y+6	; 0x06
    3b70:	80 81       	ld	r24, Z
    3b72:	8f 5f       	subi	r24, 0xFF	; 255
    3b74:	ed 81       	ldd	r30, Y+5	; 0x05
    3b76:	fe 81       	ldd	r31, Y+6	; 0x06
    3b78:	80 83       	st	Z, r24
		(*lowerPageIndicator_Ptr)++;
    3b7a:	ef 81       	ldd	r30, Y+7	; 0x07
    3b7c:	f8 85       	ldd	r31, Y+8	; 0x08
    3b7e:	80 81       	ld	r24, Z
    3b80:	8f 5f       	subi	r24, 0xFF	; 255
    3b82:	ef 81       	ldd	r30, Y+7	; 0x07
    3b84:	f8 85       	ldd	r31, Y+8	; 0x08
    3b86:	80 83       	st	Z, r24
	/* check if the row number is last row and the last upper page
	 * and the lower page is out of the number
	 *  this means, the current shape reaches to the bottom of the border
	 *  so, we have to start again with new shape
	 */
	if ((*rowIndicator_Ptr == SEVEN) && (*upperPageIndicator_Ptr == SEVEN)
    3b88:	eb 81       	ldd	r30, Y+3	; 0x03
    3b8a:	fc 81       	ldd	r31, Y+4	; 0x04
    3b8c:	80 81       	ld	r24, Z
    3b8e:	87 30       	cpi	r24, 0x07	; 7
    3b90:	b9 f5       	brne	.+110    	; 0x3c00 <GenerateLocation+0xe2>
    3b92:	ed 81       	ldd	r30, Y+5	; 0x05
    3b94:	fe 81       	ldd	r31, Y+6	; 0x06
    3b96:	80 81       	ld	r24, Z
    3b98:	87 30       	cpi	r24, 0x07	; 7
    3b9a:	91 f5       	brne	.+100    	; 0x3c00 <GenerateLocation+0xe2>
    3b9c:	ef 81       	ldd	r30, Y+7	; 0x07
    3b9e:	f8 85       	ldd	r31, Y+8	; 0x08
    3ba0:	80 81       	ld	r24, Z
    3ba2:	88 30       	cpi	r24, 0x08	; 8
    3ba4:	69 f5       	brne	.+90     	; 0x3c00 <GenerateLocation+0xe2>
			&& (*lowerPageIndicator_Ptr == EIGHT)) {
		completeCheck(rowIndicator_Ptr, (uint8)(* upperPageIndicator_Ptr));
    3ba6:	ed 81       	ldd	r30, Y+5	; 0x05
    3ba8:	fe 81       	ldd	r31, Y+6	; 0x06
    3baa:	80 81       	ld	r24, Z
    3bac:	88 2f       	mov	r24, r24
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	9c 01       	movw	r18, r24
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb6:	b9 01       	movw	r22, r18
    3bb8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <completeCheck>
		*upperPageIndicator_Ptr = STARTED_UPPER_PAGE;
    3bbc:	ed 81       	ldd	r30, Y+5	; 0x05
    3bbe:	fe 81       	ldd	r31, Y+6	; 0x06
    3bc0:	10 82       	st	Z, r1
		*lowerPageIndicator_Ptr = STARTED_LOWER_PAGE;
    3bc2:	ef 81       	ldd	r30, Y+7	; 0x07
    3bc4:	f8 85       	ldd	r31, Y+8	; 0x08
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	80 83       	st	Z, r24
		*rowIndicator_Ptr = STARTED_ROW;
    3bca:	eb 81       	ldd	r30, Y+3	; 0x03
    3bcc:	fc 81       	ldd	r31, Y+4	; 0x04
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	80 83       	st	Z, r24
        (*columnIndicator_Ptr) = STARTED_COLUMN;
    3bd2:	e9 85       	ldd	r30, Y+9	; 0x09
    3bd4:	fa 85       	ldd	r31, Y+10	; 0x0a
    3bd6:	82 e2       	ldi	r24, 0x22	; 34
    3bd8:	80 83       	st	Z, r24
        *shape_Ptr = nextShape;
    3bda:	80 91 18 04 	lds	r24, 0x0418
    3bde:	e9 81       	ldd	r30, Y+1	; 0x01
    3be0:	fa 81       	ldd	r31, Y+2	; 0x02
    3be2:	80 83       	st	Z, r24
		nextShape = NextShapeView(&shape);
    3be4:	84 ee       	ldi	r24, 0xE4	; 228
    3be6:	91 e0       	ldi	r25, 0x01	; 1
    3be8:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <NextShapeView>
    3bec:	80 93 18 04 	sts	0x0418, r24

		if ((*shape_Ptr) == NUM_SHAPES) {
    3bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf4:	80 81       	ld	r24, Z
    3bf6:	89 30       	cpi	r24, 0x09	; 9
    3bf8:	19 f4       	brne	.+6      	; 0x3c00 <GenerateLocation+0xe2>
			(*shape_Ptr) = ZERO;
    3bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    3bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bfe:	10 82       	st	Z, r1
		}

	}


	sei();
    3c00:	78 94       	sei
}
    3c02:	2a 96       	adiw	r28, 0x0a	; 10
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	f8 94       	cli
    3c08:	de bf       	out	0x3e, r29	; 62
    3c0a:	0f be       	out	0x3f, r0	; 63
    3c0c:	cd bf       	out	0x3d, r28	; 61
    3c0e:	cf 91       	pop	r28
    3c10:	df 91       	pop	r29
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	08 95       	ret

00003c18 <RotateShape>:
/*----------------------------------------------------------------------------------------------------
 [Function Name]:  RotateShape
 [Description]  :  This function is responsible for setting the number of the new shape after rotating
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/
void RotateShape(uint8 *columnIndicator_Ptr) {
    3c18:	df 93       	push	r29
    3c1a:	cf 93       	push	r28
    3c1c:	00 d0       	rcall	.+0      	; 0x3c1e <RotateShape+0x6>
    3c1e:	00 d0       	rcall	.+0      	; 0x3c20 <RotateShape+0x8>
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	9a 83       	std	Y+2, r25	; 0x02
    3c26:	89 83       	std	Y+1, r24	; 0x01

	switch (shape) {
    3c28:	80 91 e4 01 	lds	r24, 0x01E4
    3c2c:	28 2f       	mov	r18, r24
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	3c 83       	std	Y+4, r19	; 0x04
    3c32:	2b 83       	std	Y+3, r18	; 0x03
    3c34:	8b 81       	ldd	r24, Y+3	; 0x03
    3c36:	9c 81       	ldd	r25, Y+4	; 0x04
    3c38:	84 30       	cpi	r24, 0x04	; 4
    3c3a:	91 05       	cpc	r25, r1
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <RotateShape+0x28>
    3c3e:	3f c0       	rjmp	.+126    	; 0x3cbe <RotateShape+0xa6>
    3c40:	2b 81       	ldd	r18, Y+3	; 0x03
    3c42:	3c 81       	ldd	r19, Y+4	; 0x04
    3c44:	25 30       	cpi	r18, 0x05	; 5
    3c46:	31 05       	cpc	r19, r1
    3c48:	d4 f4       	brge	.+52     	; 0x3c7e <RotateShape+0x66>
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4e:	81 30       	cpi	r24, 0x01	; 1
    3c50:	91 05       	cpc	r25, r1
    3c52:	71 f1       	breq	.+92     	; 0x3cb0 <RotateShape+0x98>
    3c54:	2b 81       	ldd	r18, Y+3	; 0x03
    3c56:	3c 81       	ldd	r19, Y+4	; 0x04
    3c58:	22 30       	cpi	r18, 0x02	; 2
    3c5a:	31 05       	cpc	r19, r1
    3c5c:	2c f4       	brge	.+10     	; 0x3c68 <RotateShape+0x50>
    3c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c60:	9c 81       	ldd	r25, Y+4	; 0x04
    3c62:	00 97       	sbiw	r24, 0x00	; 0
    3c64:	09 f1       	breq	.+66     	; 0x3ca8 <RotateShape+0x90>
    3c66:	3e c0       	rjmp	.+124    	; 0x3ce4 <RotateShape+0xcc>
    3c68:	2b 81       	ldd	r18, Y+3	; 0x03
    3c6a:	3c 81       	ldd	r19, Y+4	; 0x04
    3c6c:	22 30       	cpi	r18, 0x02	; 2
    3c6e:	31 05       	cpc	r19, r1
    3c70:	c9 f1       	breq	.+114    	; 0x3ce4 <RotateShape+0xcc>
    3c72:	8b 81       	ldd	r24, Y+3	; 0x03
    3c74:	9c 81       	ldd	r25, Y+4	; 0x04
    3c76:	83 30       	cpi	r24, 0x03	; 3
    3c78:	91 05       	cpc	r25, r1
    3c7a:	e9 f0       	breq	.+58     	; 0x3cb6 <RotateShape+0x9e>
    3c7c:	33 c0       	rjmp	.+102    	; 0x3ce4 <RotateShape+0xcc>
    3c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3c80:	3c 81       	ldd	r19, Y+4	; 0x04
    3c82:	26 30       	cpi	r18, 0x06	; 6
    3c84:	31 05       	cpc	r19, r1
    3c86:	19 f1       	breq	.+70     	; 0x3cce <RotateShape+0xb6>
    3c88:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8c:	86 30       	cpi	r24, 0x06	; 6
    3c8e:	91 05       	cpc	r25, r1
    3c90:	d4 f0       	brlt	.+52     	; 0x3cc6 <RotateShape+0xae>
    3c92:	2b 81       	ldd	r18, Y+3	; 0x03
    3c94:	3c 81       	ldd	r19, Y+4	; 0x04
    3c96:	27 30       	cpi	r18, 0x07	; 7
    3c98:	31 05       	cpc	r19, r1
    3c9a:	e9 f0       	breq	.+58     	; 0x3cd6 <RotateShape+0xbe>
    3c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca0:	88 30       	cpi	r24, 0x08	; 8
    3ca2:	91 05       	cpc	r25, r1
    3ca4:	e1 f0       	breq	.+56     	; 0x3cde <RotateShape+0xc6>
    3ca6:	1e c0       	rjmp	.+60     	; 0x3ce4 <RotateShape+0xcc>
	case FIRST_SHAPE:
		shape = SECOND_SHAPE;
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	80 93 e4 01 	sts	0x01E4, r24
    3cae:	1a c0       	rjmp	.+52     	; 0x3ce4 <RotateShape+0xcc>
		break;
	case SECOND_SHAPE:
		shape = FIRST_SHAPE;
    3cb0:	10 92 e4 01 	sts	0x01E4, r1
    3cb4:	17 c0       	rjmp	.+46     	; 0x3ce4 <RotateShape+0xcc>
		break;
	case THIRD_SHAPE:

		break;
	case FOURTH_SHAPE:
		shape = FIFTH_SHAPE;
    3cb6:	84 e0       	ldi	r24, 0x04	; 4
    3cb8:	80 93 e4 01 	sts	0x01E4, r24
    3cbc:	13 c0       	rjmp	.+38     	; 0x3ce4 <RotateShape+0xcc>
		break;
	case FIFTH_SHAPE:
		shape = FOURTH_SHAPE;
    3cbe:	83 e0       	ldi	r24, 0x03	; 3
    3cc0:	80 93 e4 01 	sts	0x01E4, r24
    3cc4:	0f c0       	rjmp	.+30     	; 0x3ce4 <RotateShape+0xcc>
		break;
	case SIXTH_SHAPE:
		shape = EIGHTH_SHAPE;
    3cc6:	87 e0       	ldi	r24, 0x07	; 7
    3cc8:	80 93 e4 01 	sts	0x01E4, r24
    3ccc:	0b c0       	rjmp	.+22     	; 0x3ce4 <RotateShape+0xcc>
		break;
	case SEVENTH_SHAPE:
		shape = NINGTH_SHAPE;
    3cce:	88 e0       	ldi	r24, 0x08	; 8
    3cd0:	80 93 e4 01 	sts	0x01E4, r24
    3cd4:	07 c0       	rjmp	.+14     	; 0x3ce4 <RotateShape+0xcc>
		break;
	case EIGHTH_SHAPE:
		shape = SEVENTH_SHAPE;
    3cd6:	86 e0       	ldi	r24, 0x06	; 6
    3cd8:	80 93 e4 01 	sts	0x01E4, r24
    3cdc:	03 c0       	rjmp	.+6      	; 0x3ce4 <RotateShape+0xcc>
		break;
	case NINGTH_SHAPE:
		shape = SIXTH_SHAPE;
    3cde:	85 e0       	ldi	r24, 0x05	; 5
    3ce0:	80 93 e4 01 	sts	0x01E4, r24
		break;
	}
	checkAfterMoving(columnIndicator_Ptr);
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce8:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <checkAfterMoving>


}
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	cf 91       	pop	r28
    3cf6:	df 91       	pop	r29
    3cf8:	08 95       	ret

00003cfa <NextShapeView>:
 [Args]         :  uint8 * shape_Ptr
 this argument shall contains the address of the next shape
 [Returns]      :  This function returns value of the next shape
 ----------------------------------------------------------------------------------------------------*/

uint8 NextShapeView(uint8 *shape_Ptr) {
    3cfa:	df 93       	push	r29
    3cfc:	cf 93       	push	r28
    3cfe:	00 d0       	rcall	.+0      	; 0x3d00 <NextShapeView+0x6>
    3d00:	0f 92       	push	r0
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	9b 83       	std	Y+3, r25	; 0x03
    3d08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 loopCounter = ZERO;
    3d0a:	19 82       	std	Y+1, r1	; 0x01
	static uint8 shapeNext = ZERO;
	GLCD_CTRL_PORT |= (ONE << CS2); /* Select Left half of display */
    3d0c:	a5 e3       	ldi	r26, 0x35	; 53
    3d0e:	b0 e0       	ldi	r27, 0x00	; 0
    3d10:	e5 e3       	ldi	r30, 0x35	; 53
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	80 81       	ld	r24, Z
    3d16:	80 61       	ori	r24, 0x10	; 16
    3d18:	8c 93       	st	X, r24
	GLCD_CTRL_PORT &= ~(ONE << CS1);
    3d1a:	a5 e3       	ldi	r26, 0x35	; 53
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	e5 e3       	ldi	r30, 0x35	; 53
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	87 7f       	andi	r24, 0xF7	; 247
    3d26:	8c 93       	st	X, r24
	GLCD_sendCommand(COLUMN_SETTING_ADDRESS + SHAPE_OUTPUT_ADDRESS); /* Set column address) */
    3d28:	8e e5       	ldi	r24, 0x5E	; 94
    3d2a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>
	GLCD_sendCommand(PAGE_SETTING_ADDRESS + PAGE_2); /* Set page address */
    3d2e:	8a eb       	ldi	r24, 0xBA	; 186
    3d30:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <GLCD_sendCommand>

	if ((*shape_Ptr) + ONE == NUM_SHAPES) {
    3d34:	ea 81       	ldd	r30, Y+2	; 0x02
    3d36:	fb 81       	ldd	r31, Y+3	; 0x03
    3d38:	80 81       	ld	r24, Z
    3d3a:	88 30       	cpi	r24, 0x08	; 8
    3d3c:	19 f4       	brne	.+6      	; 0x3d44 <NextShapeView+0x4a>
		shapeNext = FIRST_SHAPE;
    3d3e:	10 92 19 04 	sts	0x0419, r1
    3d42:	06 c0       	rjmp	.+12     	; 0x3d50 <NextShapeView+0x56>
	} else {
		shapeNext = (*shape_Ptr) + ONE;
    3d44:	ea 81       	ldd	r30, Y+2	; 0x02
    3d46:	fb 81       	ldd	r31, Y+3	; 0x03
    3d48:	80 81       	ld	r24, Z
    3d4a:	8f 5f       	subi	r24, 0xFF	; 255
    3d4c:	80 93 19 04 	sts	0x0419, r24
	}
	/* displaying the current shape */
	for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    3d50:	19 82       	std	Y+1, r1	; 0x01
    3d52:	19 c0       	rjmp	.+50     	; 0x3d86 <NextShapeView+0x8c>
		GLCD_sendData(shapes[(shapeNext)][loopCounter]);
    3d54:	80 91 19 04 	lds	r24, 0x0419
    3d58:	48 2f       	mov	r20, r24
    3d5a:	50 e0       	ldi	r21, 0x00	; 0
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	28 2f       	mov	r18, r24
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	ca 01       	movw	r24, r20
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	88 0f       	add	r24, r24
    3d6a:	99 1f       	adc	r25, r25
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	82 0f       	add	r24, r18
    3d72:	93 1f       	adc	r25, r19
    3d74:	fc 01       	movw	r30, r24
    3d76:	eb 53       	subi	r30, 0x3B	; 59
    3d78:	fc 4f       	sbci	r31, 0xFC	; 252
    3d7a:	80 81       	ld	r24, Z
    3d7c:	0e 94 cd 10 	call	0x219a	; 0x219a <GLCD_sendData>
		shapeNext = FIRST_SHAPE;
	} else {
		shapeNext = (*shape_Ptr) + ONE;
	}
	/* displaying the current shape */
	for (loopCounter = ZERO; loopCounter < SHAPE_WIDTH; loopCounter++) {
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	8f 5f       	subi	r24, 0xFF	; 255
    3d84:	89 83       	std	Y+1, r24	; 0x01
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	88 30       	cpi	r24, 0x08	; 8
    3d8a:	20 f3       	brcs	.-56     	; 0x3d54 <NextShapeView+0x5a>
		GLCD_sendData(shapes[(shapeNext)][loopCounter]);
	}
	return shapeNext;
    3d8c:	80 91 19 04 	lds	r24, 0x0419
}
    3d90:	0f 90       	pop	r0
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	08 95       	ret

00003d9c <checkAfterMoving>:
 [Args]         :  uint8 *columnIndicator_Ptr
 this argument shall contains the address of the columnIndicator variable
 [Returns]      :  This function returns void
 ----------------------------------------------------------------------------------------------------*/

void checkAfterMoving(uint8 *columnIndicator_Ptr) {
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	00 d0       	rcall	.+0      	; 0x3da2 <checkAfterMoving+0x6>
    3da2:	00 d0       	rcall	.+0      	; 0x3da4 <checkAfterMoving+0x8>
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	9a 83       	std	Y+2, r25	; 0x02
    3daa:	89 83       	std	Y+1, r24	; 0x01

	switch (shape) {
    3dac:	80 91 e4 01 	lds	r24, 0x01E4
    3db0:	28 2f       	mov	r18, r24
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	3c 83       	std	Y+4, r19	; 0x04
    3db6:	2b 83       	std	Y+3, r18	; 0x03
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dba:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbc:	84 30       	cpi	r24, 0x04	; 4
    3dbe:	91 05       	cpc	r25, r1
    3dc0:	09 f4       	brne	.+2      	; 0x3dc4 <checkAfterMoving+0x28>
    3dc2:	5a c0       	rjmp	.+180    	; 0x3e78 <checkAfterMoving+0xdc>
    3dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    3dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    3dc8:	25 30       	cpi	r18, 0x05	; 5
    3dca:	31 05       	cpc	r19, r1
    3dcc:	84 f4       	brge	.+32     	; 0x3dee <checkAfterMoving+0x52>
    3dce:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd2:	82 30       	cpi	r24, 0x02	; 2
    3dd4:	91 05       	cpc	r25, r1
    3dd6:	b9 f0       	breq	.+46     	; 0x3e06 <checkAfterMoving+0x6a>
    3dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    3dda:	3c 81       	ldd	r19, Y+4	; 0x04
    3ddc:	23 30       	cpi	r18, 0x03	; 3
    3dde:	31 05       	cpc	r19, r1
    3de0:	2c f5       	brge	.+74     	; 0x3e2c <checkAfterMoving+0x90>
    3de2:	8b 81       	ldd	r24, Y+3	; 0x03
    3de4:	9c 81       	ldd	r25, Y+4	; 0x04
    3de6:	99 23       	and	r25, r25
    3de8:	0c f4       	brge	.+2      	; 0x3dec <checkAfterMoving+0x50>
    3dea:	58 c0       	rjmp	.+176    	; 0x3e9c <checkAfterMoving+0x100>
    3dec:	45 c0       	rjmp	.+138    	; 0x3e78 <checkAfterMoving+0xdc>
    3dee:	2b 81       	ldd	r18, Y+3	; 0x03
    3df0:	3c 81       	ldd	r19, Y+4	; 0x04
    3df2:	27 30       	cpi	r18, 0x07	; 7
    3df4:	31 05       	cpc	r19, r1
    3df6:	6c f1       	brlt	.+90     	; 0x3e52 <checkAfterMoving+0xb6>
    3df8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfc:	89 30       	cpi	r24, 0x09	; 9
    3dfe:	91 05       	cpc	r25, r1
    3e00:	0c f0       	brlt	.+2      	; 0x3e04 <checkAfterMoving+0x68>
    3e02:	4c c0       	rjmp	.+152    	; 0x3e9c <checkAfterMoving+0x100>
    3e04:	39 c0       	rjmp	.+114    	; 0x3e78 <checkAfterMoving+0xdc>
	case THIRD_SHAPE:
		if (*columnIndicator_Ptr > RIGHT_MARGIN_THIRD_SHAPE) {
    3e06:	e9 81       	ldd	r30, Y+1	; 0x01
    3e08:	fa 81       	ldd	r31, Y+2	; 0x02
    3e0a:	80 81       	ld	r24, Z
    3e0c:	85 33       	cpi	r24, 0x35	; 53
    3e0e:	20 f0       	brcs	.+8      	; 0x3e18 <checkAfterMoving+0x7c>
			*columnIndicator_Ptr = RIGHT_MARGIN_THIRD_SHAPE;
    3e10:	e9 81       	ldd	r30, Y+1	; 0x01
    3e12:	fa 81       	ldd	r31, Y+2	; 0x02
    3e14:	84 e3       	ldi	r24, 0x34	; 52
    3e16:	80 83       	st	Z, r24
		}
		if (*columnIndicator_Ptr < LEFT_MARGIN_ALL_SHAPES) {
    3e18:	e9 81       	ldd	r30, Y+1	; 0x01
    3e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e1c:	80 81       	ld	r24, Z
    3e1e:	80 31       	cpi	r24, 0x10	; 16
    3e20:	e8 f5       	brcc	.+122    	; 0x3e9c <checkAfterMoving+0x100>
			*columnIndicator_Ptr = LEFT_MARGIN_ALL_SHAPES;
    3e22:	e9 81       	ldd	r30, Y+1	; 0x01
    3e24:	fa 81       	ldd	r31, Y+2	; 0x02
    3e26:	80 e1       	ldi	r24, 0x10	; 16
    3e28:	80 83       	st	Z, r24
    3e2a:	38 c0       	rjmp	.+112    	; 0x3e9c <checkAfterMoving+0x100>
		}

		break;
	case FOURTH_SHAPE:
		if (*columnIndicator_Ptr > RIGHT_MARGIN_FOURTH_SHAPE) {
    3e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e30:	80 81       	ld	r24, Z
    3e32:	87 33       	cpi	r24, 0x37	; 55
    3e34:	20 f0       	brcs	.+8      	; 0x3e3e <checkAfterMoving+0xa2>
			*columnIndicator_Ptr = RIGHT_MARGIN_FOURTH_SHAPE;
    3e36:	e9 81       	ldd	r30, Y+1	; 0x01
    3e38:	fa 81       	ldd	r31, Y+2	; 0x02
    3e3a:	86 e3       	ldi	r24, 0x36	; 54
    3e3c:	80 83       	st	Z, r24
		}
		if (*columnIndicator_Ptr < LEFT_MARGIN_ALL_SHAPES) {
    3e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e40:	fa 81       	ldd	r31, Y+2	; 0x02
    3e42:	80 81       	ld	r24, Z
    3e44:	80 31       	cpi	r24, 0x10	; 16
    3e46:	50 f5       	brcc	.+84     	; 0x3e9c <checkAfterMoving+0x100>
			*columnIndicator_Ptr = LEFT_MARGIN_ALL_SHAPES;
    3e48:	e9 81       	ldd	r30, Y+1	; 0x01
    3e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e4c:	80 e1       	ldi	r24, 0x10	; 16
    3e4e:	80 83       	st	Z, r24
    3e50:	25 c0       	rjmp	.+74     	; 0x3e9c <checkAfterMoving+0x100>
		}
		break;

	case SIXTH_SHAPE:
	case SEVENTH_SHAPE:
		if (*columnIndicator_Ptr > RIGHT_MARGIN_SIXTH_SEVENTH_SHAPE) {
    3e52:	e9 81       	ldd	r30, Y+1	; 0x01
    3e54:	fa 81       	ldd	r31, Y+2	; 0x02
    3e56:	80 81       	ld	r24, Z
    3e58:	83 33       	cpi	r24, 0x33	; 51
    3e5a:	20 f0       	brcs	.+8      	; 0x3e64 <checkAfterMoving+0xc8>
			*columnIndicator_Ptr = RIGHT_MARGIN_SIXTH_SEVENTH_SHAPE;
    3e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e60:	82 e3       	ldi	r24, 0x32	; 50
    3e62:	80 83       	st	Z, r24
		}
		if (*columnIndicator_Ptr < LEFT_MARGIN_ALL_SHAPES) {
    3e64:	e9 81       	ldd	r30, Y+1	; 0x01
    3e66:	fa 81       	ldd	r31, Y+2	; 0x02
    3e68:	80 81       	ld	r24, Z
    3e6a:	80 31       	cpi	r24, 0x10	; 16
    3e6c:	b8 f4       	brcc	.+46     	; 0x3e9c <checkAfterMoving+0x100>
			*columnIndicator_Ptr = LEFT_MARGIN_ALL_SHAPES;
    3e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    3e70:	fa 81       	ldd	r31, Y+2	; 0x02
    3e72:	80 e1       	ldi	r24, 0x10	; 16
    3e74:	80 83       	st	Z, r24
    3e76:	12 c0       	rjmp	.+36     	; 0x3e9c <checkAfterMoving+0x100>
	case FIRST_SHAPE:
	case SECOND_SHAPE:
	case FIFTH_SHAPE:
	case EIGHTH_SHAPE:
	case NINGTH_SHAPE:
		if (*columnIndicator_Ptr > RIGHT_MARGINE_REST_SHAPES) {
    3e78:	e9 81       	ldd	r30, Y+1	; 0x01
    3e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e7c:	80 81       	ld	r24, Z
    3e7e:	81 33       	cpi	r24, 0x31	; 49
    3e80:	20 f0       	brcs	.+8      	; 0x3e8a <checkAfterMoving+0xee>
			*columnIndicator_Ptr = RIGHT_MARGINE_REST_SHAPES;
    3e82:	e9 81       	ldd	r30, Y+1	; 0x01
    3e84:	fa 81       	ldd	r31, Y+2	; 0x02
    3e86:	80 e3       	ldi	r24, 0x30	; 48
    3e88:	80 83       	st	Z, r24
		}
		if (*columnIndicator_Ptr < LEFT_MARGIN_ALL_SHAPES) {
    3e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e8e:	80 81       	ld	r24, Z
    3e90:	80 31       	cpi	r24, 0x10	; 16
    3e92:	20 f4       	brcc	.+8      	; 0x3e9c <checkAfterMoving+0x100>
			*columnIndicator_Ptr = LEFT_MARGIN_ALL_SHAPES;
    3e94:	e9 81       	ldd	r30, Y+1	; 0x01
    3e96:	fa 81       	ldd	r31, Y+2	; 0x02
    3e98:	80 e1       	ldi	r24, 0x10	; 16
    3e9a:	80 83       	st	Z, r24
		}
		break;
	}

}
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	cf 91       	pop	r28
    3ea6:	df 91       	pop	r29
    3ea8:	08 95       	ret

00003eaa <__prologue_saves__>:
    3eaa:	2f 92       	push	r2
    3eac:	3f 92       	push	r3
    3eae:	4f 92       	push	r4
    3eb0:	5f 92       	push	r5
    3eb2:	6f 92       	push	r6
    3eb4:	7f 92       	push	r7
    3eb6:	8f 92       	push	r8
    3eb8:	9f 92       	push	r9
    3eba:	af 92       	push	r10
    3ebc:	bf 92       	push	r11
    3ebe:	cf 92       	push	r12
    3ec0:	df 92       	push	r13
    3ec2:	ef 92       	push	r14
    3ec4:	ff 92       	push	r15
    3ec6:	0f 93       	push	r16
    3ec8:	1f 93       	push	r17
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	cd b7       	in	r28, 0x3d	; 61
    3ed0:	de b7       	in	r29, 0x3e	; 62
    3ed2:	ca 1b       	sub	r28, r26
    3ed4:	db 0b       	sbc	r29, r27
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	f8 94       	cli
    3eda:	de bf       	out	0x3e, r29	; 62
    3edc:	0f be       	out	0x3f, r0	; 63
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	09 94       	ijmp

00003ee2 <__epilogue_restores__>:
    3ee2:	2a 88       	ldd	r2, Y+18	; 0x12
    3ee4:	39 88       	ldd	r3, Y+17	; 0x11
    3ee6:	48 88       	ldd	r4, Y+16	; 0x10
    3ee8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eea:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eec:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eee:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ef0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ef2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ef4:	b9 84       	ldd	r11, Y+9	; 0x09
    3ef6:	c8 84       	ldd	r12, Y+8	; 0x08
    3ef8:	df 80       	ldd	r13, Y+7	; 0x07
    3efa:	ee 80       	ldd	r14, Y+6	; 0x06
    3efc:	fd 80       	ldd	r15, Y+5	; 0x05
    3efe:	0c 81       	ldd	r16, Y+4	; 0x04
    3f00:	1b 81       	ldd	r17, Y+3	; 0x03
    3f02:	aa 81       	ldd	r26, Y+2	; 0x02
    3f04:	b9 81       	ldd	r27, Y+1	; 0x01
    3f06:	ce 0f       	add	r28, r30
    3f08:	d1 1d       	adc	r29, r1
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	ed 01       	movw	r28, r26
    3f16:	08 95       	ret

00003f18 <_exit>:
    3f18:	f8 94       	cli

00003f1a <__stop_program>:
    3f1a:	ff cf       	rjmp	.-2      	; 0x3f1a <__stop_program>
